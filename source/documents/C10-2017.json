{
    "ID": "C10-2017",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "This article delves into the scoring function of the statistical paraphrase generation model.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It presents an algorithm for exact computation and two applicative experiments.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first experiment analyses the behaviour of a statistical paraphrase generation decoder, and raises some issues with the ordering of n-best outputs.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The second experiment shows that a major boost of performance can be obtained by embedding a true score computation inside a MonteCarlo sampling based paraphrase generator.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "A paraphrase generator is a program which, given a source sentence, produces a new sentence with almost the same meaning.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The modification place is not imposed but the paraphrase has to differ from the original sentence.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Paraphrase generation is useful in applications where it is needed to choose between different forms to keep the most fit.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For instance, automatic summary can be seen as a particular paraphrasing task (Barzilay and Lee, 2003) by selecting the shortest paraphrase.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They can help human writers by proposing alternatives and having them choose the most appropriate (Max and Zock, 2008).",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Paraphrases can also be used to improve natural language processing (NLP) systems.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this direction, (CallisonBurch et al., 2006) tried to improve machine translations by enlarging the coverage of patterns that can be translated.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the same way, most NLP systems like information retrieval (Sekine, 2005) or question answering (Duclaye et al., 2003), based on pattern recognition, can be improved by a paraphrase generator.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Most of these applications need a n-best set of solutions in order to rerank them according to a task-specific criterion.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to produce the paraphrases, a promising approach is to see the paraphrase generation problem as a statistical translation problem.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In that approach, the target language becomes the same as the source language (Quirk et al., 2004; Bannard and CallisonBurch, 2005; Max and Zock, 2008).",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first difficulty of this approach is the need of a paraphrase table.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A paraphrase table is a monolingual version of a translation table in the statistical machine translation (SMT) field.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this field, the difficulty is basically overcome by using huge aligned bilingual corpora like the Europarl (Koehn, 2005) corpus.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the paraphrase generation field, one needs a huge aligned monolingual corpus to build a paraphrase table.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The low availability of such monolingual corpora nurtures researches in order to find heuristics to produce them (Barzilay and Lee, 2003; Quirk et al., 2004).",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On the other hand, an interesting method proposed by (Bannard and CallisonBurch, 2005) tries to make a paraphrase table using a translation table learned on bilingual corpora.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The method uses a well-known heuristic (Lepage and Denoual, 2005) which says that if two sentences have the same translation, then they should be paraphrases of each others.",
                    "sid": 22,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Another aspect, less studied, is the generation process of paraphrases, i.e. the decoding process in SMT.",
                    "sid": 23,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This process is subject to combinatorial 144 Coling 2010: Poster Volume, pages 144\u2013152, Beijing, August 2010 explosions.",
                    "sid": 24,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Heuristics are then frequently used to drive the exploration process in the a priori intractable high dimensional spaces.",
                    "sid": 25,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On the one hand, these heuristics are used to build a para source and target languages i.e. the paraphrase table.",
                    "sid": 26,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This can be decomposed into: t\u2217 \u2248 arg max P (t) TI P (sI I phrase step by step according to the paraphrase t,I i\u2208I i |ti , B) table.",
                    "sid": 27,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On the other hand, they try to evaluate the where I is a partition of the source sentence andrelevance of a step according to the global para phrase generation model.",
                    "sid": 28,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The SMT model score xI the ith segment in the sentence x. For a given is related to the path followed to generate a paraphrase.",
                    "sid": 29,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because of the step-by-step computation, different ways can produce the same paraphrase, but with different scores.",
                    "sid": 30,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Amongst these scores, the best one is the true score of a paraphrase according to the SMT model.",
                    "sid": 31,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Most paraphrase generators use some standard SMT decoding algorithms (Quirk et al., 2004) or some off-the-shelf decoding tools like MOSES.",
                    "sid": 32,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The goal of these decoders is to find the best path in the lattice produced by the paraphrase table.",
                    "sid": 33,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is basically achieved by using dynamic programming \u2013 especially the Viterbi algorithm \u2013 and beam searching (Koehn et al., 2007).",
                    "sid": 34,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The best paraphrase proposed by these programs is known not to be the optimal paraphrase.",
                    "sid": 35,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One can even question if the score returned is the true score.",
                    "sid": 36,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We first show in Section 2 that in the particular domain of statistical paraphrase generation, one can compute true a posteriori scores of generated paraphrases.",
                    "sid": 37,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We then explore some applications of the true score algorithm in the paraphrase generation field.",
                    "sid": 38,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Section 3, we show that scores returned by SMT decoders are not always true scores and they plague the ranking of output n-best solutions.",
                    "sid": 39,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Section 4, we show that the true score can give a major boost for holistic paraphrases generators which do not rely on decoding approaches.",
                    "sid": 40,
                    "ssid": 40,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "true score computing. ",
            "number": "2",
            "sents": [
                {
                    "text": "2.1 Context.",
                    "sid": 41,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The phrase based SMT model (Koehn et al., 2003) can be transposed to paraphrase generation as follows: t\u2217 = arg max P (t) \u00d7 P (s|t, B) where s is the source sentence, t the target sentence i.e. the paraphrase, t\u2217 the best paraphrase and B a model of the noisy channel between thecouple of s, t sentences, it exists several segmen tations I with different probabilities.",
                    "sid": 42,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is illustrated in Example 1.",
                    "sid": 43,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Depending on the quality of the paraphrase table, one can find up to thousands of paraphrase segments for a source sentence.",
                    "sid": 44,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that the generated paraphrases are not always semantically or even syntactically correct, as in P2.",
                    "sid": 45,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "P3 illustrates the score evaluation problem: it can be generated by applying to the source sentence the sequences of transformations {T 1, T 2} , {T 1, T 4, T 5} or even {T 5, T 1, T 4} . . .",
                    "sid": 46,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Example 1 Decoding Source sentence: The dog runs after the young cat.",
                    "sid": 47,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Paraphrase table excerpt: T1: P(the beast | the dog) = 0.8 T2: P(the kitten | the young cat) = 0.7 T3: P(after it | after the) = 0.4 T4: P(the | the young) = 0.05 T5: P(cat | kitten) = 0.1 Some possible generated paraphrases: P1: the beast runs after the young cat.",
                    "sid": 48,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "P2: *the dog runs after it young cat.",
                    "sid": 49,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "P3: the beast runs after the kitten.",
                    "sid": 50,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We define the score of a potential paraphrase t following a segmentation I as: Zt = P (t) TI P (si |ti , B) I I I i\u2208I The true score of a potential paraphrase t is defined as: Z \u2217 I t = max Zt I Because of high-dimension problems, decoders apply sub-optimal algorithms to search for t\u2217.",
                    "sid": 51,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They produce estimated solutions over all possible paraphrases t and over all possible segmentations I . Actually, for a given paraphrase t, they con A2: no reordering model is applied during the paraphrasing transformation.",
                    "sid": 52,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Under this set of assumptions, the sequence (ordered) of transformation rules becomes a set (un sider only some Z I Z \u2217 where they should estimate ordered) of transformation rules.",
                    "sid": 53,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One can there fore easily determine all the sets of transformaI . SMT decoders are overlooking the partition ing step in their computations.",
                    "sid": 54,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There is no reason for the decoder solution to reach the true score.",
                    "sid": 55,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Troubles arise when one needs the scores of generated paraphrases, for instance when the system must produce an ordered n-best solution.",
                    "sid": 56,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "What is the relevance of the estimated scores \u2013 and orders \u2013 with respect to the true scores \u2013 and orders \u2013 of the model?",
                    "sid": 57,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Is the true score able to help the generation process?",
                    "sid": 58,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.2 Algorithm.",
                    "sid": 59,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let us first adopt the point of view proposed in (Chevelu et al., 2009).",
                    "sid": 60,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The paraphrase generation problem can be seen as an exploration problem.",
                    "sid": 61,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We seek the best paraphrase according to a scoring function in a space to search by applying successive transformations.",
                    "sid": 62,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This space is composed of states connected by actions.",
                    "sid": 63,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An action is a transformation rule with a place where it applies in the sentence.",
                    "sid": 64,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "States are a sentence with a set of possible actions.",
                    "sid": 65,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Applying an action in a given state consists in transforming the sentence of the state and removing all rules that are no more applicable.",
                    "sid": 66,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this framework, each state, except the root, can be a final state.",
                    "sid": 67,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The SMT approach fits within this point of view.",
                    "sid": 68,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, generation and evaluation need not to be coupled any longer.",
                    "sid": 69,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Computing the true score of a generated paraphrase is in reality a task computationally easier than generating the best para tion rules from the source sentence to the target paraphrase: they are a subset of the cross- product set of every transformation rule with a source included in the source sentence and with a result included in the target paraphrase.",
                    "sid": 70,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "And this cross-product set remains computationally tractable.",
                    "sid": 71,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that to guarantee a solution, the corpus of all rules should be augmented with an identity rule for each word of the source sentence (with an associated probability of applicability set to 1) missing in the paraphrase table.",
                    "sid": 72,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The algorithm for computing ex post the true score is given on algorithm 1.",
                    "sid": 73,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Algorithm 1 Algorithm for true score Let S be the source sentence.",
                    "sid": 74,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let T be the target sentence.",
                    "sid": 75,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let R : sR \u2192 tR be a transformation rule Let map : (S, T ) \u2192 C be a function Let C = {\u2205} \u2200shead|S = shead.stail , \u2200R \u2208 {\u2126|sR = shead, T = tR.ttail } C = C \u222a ({R} \u2297 map(Stail , Ttail )) return C Let score be the scoring function for a transformation rule set phrases.",
                    "sid": 76,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Once the target result is fixed, the number of sequences transforming the source sentence into the target paraphrase becomes computationally tractable under a reasonable set of assump truescoreS,\u2126(T ) = arg max c\u2208map(S,T ) (score(c)) tions: A1: the transformation rules have disjoint supports (meaning that no rule in the sequence should transform a segment of the sentence already transformed by one of of the previous applied rules) ; For our toy example, we would get the steps shown in Example 2.",
                    "sid": 77,
                    "ssid": 37,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "true score of smt decoders. ",
            "number": "3",
            "sents": [
                {
                    "text": "We have shown that it is possible to compute the true score according to the paraphrase model.",
                    "sid": 78,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We now evaluate scores from a state-of-the-art Example 2 True Score Computation Generated sets: {R1}, {R1, R3}, {R1, R2}, {R1, R4}, {R1, R4, R5}, {R3}, {R2}, {R4}, {R4, R5}, {R5} For a better readability, all identity rules are omitted.",
                    "sid": 79,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The true scores are computed as in the following examples: score( \u201dthe dog runs after the small cat.\u201d \u2192 \u201dthe beast runs after it small cat\u201d) = score({R1}) score( \u201dthe dog runs after the small cat.\u201d \u2192 \u201dthe beast runs after the kitten\u201d) = max(score({R1, R2}), score({R1, R4, R5})) paraphrased by a phrase sti in the same language is estimated by the sum of each round-trip from si to sti through any phrase ti of a pivot language.",
                    "sid": 80,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The construction of this table is very simple.",
                    "sid": 81,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given a bilingual translation table sorted by pivot phrases, the algorithm retrieves all the phrases linked with the same pivot (named a pivot cluster).",
                    "sid": 82,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each ordered pair of phrases, the program assigns a probability that is the product of there probabilities.",
                    "sid": 83,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This process realizes a self-join of the bilingual translation table.",
                    "sid": 84,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It produces a paraphrase table composed of tokens, instead of items.",
                    "sid": 85,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The program just needs to sum up all probabilities for all entries with identical paraphrase tokens to produce the final paraphrase table.",
                    "sid": 86,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Three heuristics are used to prune the paraphrase table.",
                    "sid": 87,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first heuristic prunes any entry in the paraphrase table composed of tokens with a probability lower than a threshold E. The second, called pruning pivot heuristic, consists in deleting all pivot clusters larger than a threshold \u03c4 . The last heuristic keeps only the \u03ba most probable para decoder against this baseline.",
                    "sid": 88,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, we are interested in the order of n-best outputs.",
                    "sid": 89,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use the MOSES decoder (Koehn et al., 2007) as a representative SMT decoder inside the system described below.",
                    "sid": 90,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.1 System description.",
                    "sid": 91,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Paraphrase generation tools based on SMT methods need a language model and a paraphrase table.",
                    "sid": 92,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Both are computed on a training corpus.",
                    "sid": 93,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The language models we use are n-gram language models with back-off.",
                    "sid": 94,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use SRILM (Stolcke, 2002) with its default parameters for this purpose.",
                    "sid": 95,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The length of the n-grams is five.",
                    "sid": 96,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To build a paraphrase table, we use a variant of the construction method via a pivot language proposed in (Bannard and CallisonBurch, 2005).",
                    "sid": 97,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first step consists in building a bilingual translation table from the aligned corpus.",
                    "sid": 98,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given a source phrase si and another phrase ti in a different language, a bilingual translation table provides the two probabilities p(si|ti) and p(ti|si).",
                    "sid": 99,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We useGIZA++ (Och and Ney, 2003) with its default pa rameters to produce phrase alignments.",
                    "sid": 100,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The paraphrase table is then built from the phrase translation table.",
                    "sid": 101,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The probability for a phrase si to be phrases for each source phrase in the final paraphrase table.",
                    "sid": 102,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For this study, we empirically fix E = 10\u22125, \u03c4 = 200 and \u03ba = 20.",
                    "sid": 103,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The MOSES scoring function is set by four weighting factors \u03b1\u03a6, \u03b1LM , \u03b1D , \u03b1W . Conventionally, these four weights are adjusted during a tuning step on a training corpus.",
                    "sid": 104,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The tuning step is inappropriate for paraphrasing because there is no such tuning corpus available.",
                    "sid": 105,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We empirically set \u03b1\u03a6 = 1, \u03b1LM = 1, \u03b1D = 10 and \u03b1W = 0.",
                    "sid": 106,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This means that the paraphrase table and the language model are given the same weight, no reordering is allowed and no specific sentence length is favored.",
                    "sid": 107,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.2 Experimental Protocol.",
                    "sid": 108,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For experiments reported in this paper, we use one of the largest, multilingual, freely available aligned corpus, Europarl (Koehn, 2005).",
                    "sid": 109,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It consists of European parliament debates.",
                    "sid": 110,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We choose French as the language for paraphrases and English as the pivot language.",
                    "sid": 111,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For this pair of languages, the corpus consists of 1,723,705 sentences.",
                    "sid": 112,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that the sentences in this corpus are long, with an average length of 30 words per French sentence and 27.8 for English.",
                    "sid": 113,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We randomly extract 100 French sentences as a test cor pus.",
                    "sid": 114,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each source sentence from the test corpus, the SMT decoder tries to produce a 100-best distinct paraphrase sequence.",
                    "sid": 115,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Using the algorithm 1, we compute the true score of each paraphrase and rerank them.",
                    "sid": 116,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We then compare orders output by the decoder with the true score order by using the Kendall rank correlation coefficient (\u03c4A) (Kendall,1938).",
                    "sid": 117,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this context, the Kendall rank corre lation coefficient considers each couple of paraphrases and checks if their relative order is preserved by the reranking.",
                    "sid": 118,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The \u03c4A formula is: np \u2212 ni 0.95 0.9 0.85 0.8 0.75 \u03c4A = 2 n(n \u2212 1) 0.7 where np the number of preserved orders, nd thenumber of inverted orders and n the number of el ements in the sequence.",
                    "sid": 119,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The coefficient provides a score \u2013 between -1 and 1 \u2013 that can be interpreted as a correlation coefficient between the two orders.",
                    "sid": 120,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to compare same length sequences, we filter out source sentences when MOSES can not produce enough distinct paraphrases.",
                    "sid": 121,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The test corpus is therefore reduced to 94 sentences.",
                    "sid": 122,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.3 Results.",
                    "sid": 123,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The evolution of \u03c4A means relative to the length of the n-best sequence is given Figure 1.",
                    "sid": 124,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The \u03c4A means drops to 0.73 with a standard deviation of 0.41 for a 5-best sequence which means that the orders are clearly different but not decorrelated.",
                    "sid": 125,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A finer study of the results reveals that amongst the generated paraphrases, 32% have seen their score modified.",
                    "sid": 126,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "18% of the MOSES 1-best paraphrases were not optimal anymore after the true score reranking.",
                    "sid": 127,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After reranking, the old top best solutions have dropped to a mean rank of 2.0 \u00b1 17.7 (40th rank at worse).",
                    "sid": 128,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When considering only the paraphrases no longer optimal, they have dropped to a mean rank of 6.8 \u00b1 12.9.",
                    "sid": 129,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "From the opposite point of view, new top paraphrases after reranking have come from a mean rank of 4.4 \u00b1 12.1.",
                    "sid": 130,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When considering only the paraphrases that were not optimal, they have come from a mean rank of 21.2\u00b123.5.",
                    "sid": 131,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Some have come from the 67th rank.",
                    "sid": 132,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Even an a posteriori reranking would not have retrieved this top solution if the size of MOSES n-best list were too short.",
                    "sid": 133,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This 10 20 30 40 50 60 70 80 90 100 n-best paraphrase sequence size Figure 1: Evolution of \u03c4A means relative to the length of the n-best sequence advocates for a direct embedding of the true score function inside the generation process.",
                    "sid": 134,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this section we have shown that MOSES scores are not consistent with the true score as expected from the paraphrase model.",
                    "sid": 135,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, the n-best paraphrase sequence computed by MOSES is not trustworthy while it is an input for the task system.",
                    "sid": 136,
                    "ssid": 59,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "true score to boost monte-carlo. ",
            "number": "4",
            "sents": [
                {
                    "text": "based Paraphrase Generation There exist other less common approaches more lenient than the Viterbi algorithm, which are holistic, i.e. they work on the whole sentence rather than step-by-step.",
                    "sid": 137,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The MonteCarlo based Paraphrase Generation algorithm (MCPG) proposed in (Chevelu et al., 2009) turns out to be an interesting algorithm for the study of paraphrase generation.",
                    "sid": 138,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It does not constraint the scoring function to be incremental.",
                    "sid": 139,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this section, we embed the non incremental true score function in MCPG to drive the generation step and produce n-best orders compliant with the paraphrase model, and show that the true score function can be used to provide a major boost to the performance of such an algorithm.",
                    "sid": 140,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.1 Description.",
                    "sid": 141,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The MCPG algorithm is a derivative of the Upper Confidence bound applied to Tree algorithm (UCT).",
                    "sid": 142,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "UCT (Kocsis and Szepesva\u00b4ri, 2006), a MonteCarlo planning algorithm, has recently become popular in two-player game problems.",
                    "sid": 143,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "UCT has some interesting properties: \u2022 it expands the search tree non-uniformly and favours the most promising sequences, without pruning branch; \u2022 it can deal with high branching factors; Source sentence Sampling step Exploration/exploitation compromise State \u2022 it is an anytime algorithm and returns best solutions found so far when interrupted; \u2022 it does not require expert domain knowledge to evaluate states.",
                    "sid": 144,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "already explored?",
                    "sid": 145,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "No Yes These properties make it ideally suited for problems with high branching factors and for which there is no strong evaluation function.",
                    "sid": 146,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the same reasons, this algorithm is interesting for paraphrase generation.",
                    "sid": 147,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, it does not put constraint on the scoring function.",
                    "sid": 148,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A diagram of the MCPG algorithm is presented Figure 2.",
                    "sid": 149,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The main part of the algorithm is the sampling Yes MonteCarlo sampling Enough iterations?",
                    "sid": 150,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "No step.",
                    "sid": 151,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An episode of this step is a sequence of states and actions, s1, a1, s2, a2, . . .",
                    "sid": 152,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", sT , from the root state to a final state.",
                    "sid": 153,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Basically, a state is a partially generated paraphrase associated with a set of available actions.",
                    "sid": 154,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A final state is a potential paraphrase.",
                    "sid": 155,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An action is a transformation rule from the paraphrase table.",
                    "sid": 156,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "During an episode construction, there are two ways to select the action ai to perform from a state si.",
                    "sid": 157,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the current state was already explored in a previous episode, the action is selected according to a compromise between exploration and exploitation.",
                    "sid": 158,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This compromise is computed using the UCBTunned formula (Auer et al., 2001) associated with the RAVE heuristic (Gelly and Silver, 2007).",
                    "sid": 159,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the current state is explored for the first time, its score is estimated using MonteCarlo sampling.",
                    "sid": 160,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In other words, to complete the New root selection step Final No state?",
                    "sid": 161,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Yes Output paraphrase Figure 2: The MCPG algorithm.",
                    "sid": 162,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "episode, the actions ai, ai+1, . . .",
                    "sid": 163,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", aT \u22121, aT are selected randomly until reaching a final state.",
                    "sid": 164,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "At the end of each episode, a reward is computed for the final state sT using a scoring function, and the value of each (state, action) pair of the episode is updated.",
                    "sid": 165,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then, the algorithm computes another episode with the new values.",
                    "sid": 166,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Periodically, the sampling step is stopped and the best action at the root state is selected.",
                    "sid": 167,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This action is then definitively applied and a sampling is restarted from the new root state.",
                    "sid": 168,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The action sequence is incrementally built and selected after being sufficiently sampled.",
                    "sid": 169,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For our experiment, we have chosen to stop sampling regularly after a fixed amount \u03b7 of episodes.",
                    "sid": 170,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "0100 -200300 -400500 20 40 60 80 100 1-best paraphrase index (ordered by M O S E S reranked scores) The adaptation of the original algorithm takes place in the (state, action) value updating procedure.",
                    "sid": 171,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since the goal of the algorithm is to maximise a scoring function, it uses the maximum reachable score from a state as value instead of the score expectation.",
                    "sid": 172,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This algorithm suits the paradigm recalled in Section 2 for paraphrase generation.",
                    "sid": 173,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To provide scores comparable with the paraphrase model scores, the standard version of MCPG has to apply rules until the whole source sentence is covered.",
                    "sid": 174,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With this behaviour, MCPG acts in a monolingual \u201ctranslator\u201d mode.",
                    "sid": 175,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The embedding of the true score algorithm in MCPG has given meaningful scores to all states.",
                    "sid": 176,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The algorithm needs not to \u201ctranslate\u201d the whole sentence to get a potential paraphrase and its score.",
                    "sid": 177,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This MCPG algorithm in \u201ctrue-score\u201d mode can choose to stop its processing with segments still unchanged, which solves, amongst others, out-of-vocabulary questions found in decoder- based approaches.",
                    "sid": 178,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.2 Experimental Protocol.",
                    "sid": 179,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For this experiment, we reuse the paraphrase table and the corpora generated for the experiment presented in Section 3.2; We compare the 1-best outputs from MOSES reranked by the true score function and from MCPG in both \u201ctranslator\u201d and \u201ctrue-score\u201d modes.",
                    "sid": 180,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For MCPG systems, we set the following parameters: \u03b7 = 100,000 iterations.",
                    "sid": 181,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 3: Comparison of paraphrase generators.",
                    "sid": 182,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Top: the MOSES baseline; middle and bold: the \u201ctrue-score\u201d MCPG; down: the \u201ctranslator\u201d MCPG.",
                    "sid": 183,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The use of \u201ctrue-score\u201d improves the MCPG performances.",
                    "sid": 184,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "MCPG reaches MOSES performance level.",
                    "sid": 185,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.3 Results.",
                    "sid": 186,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 3 presents a comparison between the scores from each systems, ordered by MOSES reranked scores.",
                    "sid": 187,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The boost of performance gained by using true scores inside the MCPG algorithm reaches a means of 28.79 with a standard deviation of 34.19.",
                    "sid": 188,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The mean difference between \u201ctrue-score\u201d MCPG andMOSES is \u221214.13 (standard deviation 19.99).",
                    "sid": 189,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Al though the performance remains inferior to the MOSES true score baseline, it still leads to an improvement over the \u201ctranslator\u201d MCPG system.",
                    "sid": 190,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The later system has a mean difference of perfor mance with MOSES of \u221242.92 (standard deviation of 40.14).",
                    "sid": 191,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The true score reduces the number of transformations needed to generate a paraphrase, which simplifies the exploration task.",
                    "sid": 192,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, it reduces the number of states in the exploration space: two sets of transformations producing the same paraphrase now leads to the same state.",
                    "sid": 193,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These points explain why MCPG has become more efficient.",
                    "sid": 194,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Although MCPG is improved by embedding the true score algorithm, there is still room for improvement.",
                    "sid": 195,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In its current version, MCPG does not adapt the number of exploration episodes to the input sentence.",
                    "sid": 196,
                    "ssid": 60,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "conclusion and perspectives. ",
            "number": "5",
            "sents": [
                {
                    "text": "In this paper, we have developed a true scoring algorithm adapted to the statistical paraphrase generation model.",
                    "sid": 197,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have studied its impacts on a common SMT decoder and a MonteCarlo sampling based paraphrase generator.",
                    "sid": 198,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It has revealed that the n-best outputs by SMT decoders were not viable.",
                    "sid": 199,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It has also proved useful in simplifying the exploration task and in improving holistic paraphrase generators.",
                    "sid": 200,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thanks to the boost introduced by the true score algorithm in holistic paraphrase generators, their performances are now on a par with scores produced by statistical translation decoders.",
                    "sid": 201,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, they produce guaranteed ordering, and enable the integration of a global task scoring function, which seems still out of reach for decoder- based systems.",
                    "sid": 202,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A more general problem remains open: what do the scores and the orders output by the model mean when compared to a human subjective evaluation?",
                    "sid": 203,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In preliminary results on our test corpus, less than 37% of the MOSES generated paraphrases can be considered both syntactically correct and semantically a paraphrase of their original sentence.",
                    "sid": 204,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One could study the relations between scores from the model and subjective evaluations to create predictive regression models.",
                    "sid": 205,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The true score algorithm can autonomously score existing paraphrase corpora which could be used to adapt the SMT tuning step for paraphrase generation.",
                    "sid": 206,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We note that the hundredth best paraphrases from MOSES have a score close to the best paraphrase: the mean difference is 5.9 (standard deviation 4.5) on our test corpus.",
                    "sid": 207,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is smaller than the mean difference score between MOSES and MCPG.",
                    "sid": 208,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In (Chevelu et al., 2009), both systems were rated similar by a subjective evaluation.",
                    "sid": 209,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One could question the relevance of small score differences and why the best paraphrase should be selected instead of the hundred next ones.",
                    "sid": 210,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given the current state of the art, the next step to improve paraphrase generation does not lie in score optimisation but in refining the model and its components: the language model and the paraphrase table.",
                    "sid": 211,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Human based evaluations reveal that the current most important issue of paraphrase generation lies in the syntax (Chevelu et al., 2009).",
                    "sid": 212,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It seems difficult to assess the syntax of a potential paraphrase while not considering it as a whole, which is impossible with a local scoring function inherent to the SMT decoding paradigm.",
                    "sid": 213,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Holistic paraphrase generators have now reached a level of performance comparable to SMT decoders, without suffering from their limitations.",
                    "sid": 214,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They are paving the way for experiments with more complex semantic and linguistic models to improve paraphrase generation.",
                    "sid": 215,
                    "ssid": 19,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}