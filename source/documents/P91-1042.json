{
    "ID": "P91-1042",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "This paper presents a unification procedure which eliminates the redundant copying of structures by using a lazy incremental copying appr0a~:h to achieve structure sharing.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Copying of structures accounts for a considerable amount of the total processing time.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Several methods have been proposed to minimize the amount of necessary copying.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Lazy Incremental Copying (LIC) is presented as a new solution to the copying problem.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It synthesizes ideas of lazy copying with the notion of chronological dereferencing for achieving a high amount of structure sharing.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Many modern linguistic theories are using feature structures (FS) to describe linguistic objects representing phonological, syntactic, and semantic properties.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These feature structures are specified in terms of constraints which they must satisfy.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It seems to be useful to maintain the distinction between the constraint language in which feature structure constraints are expressed, and the structures that satisfy these constraints.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unification is the primary operation for determining the satisfiability of conjunctions of equality constraints.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The efficiency of this operation is thus crucial for the overall efficiency of any system that uses feature structures.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Typed Feature Structure Unification In unification-based grammar formalisms, unification is the meet operation on the meet semi-lattice formed by partially ordering the set of feature structures by a subsumption relation [Shieber 86].",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Following ideas presented by [AitKaci 84] and introduced, for example, in the unification-based formMism underlying HPSG [Pollard and Sag 87], first-order unification is extended to the sorted case using an order-sorted signature instead of a flat one.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In most existing implementations, descriptions of feature structure constraints are not directly used as models that satisfy these constraints; instead, they are represented by directed graphs (DG) serving as satisfying models.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, in the case where we are dealing only with conjunctions of equality constraints, efficient graph unification algorithms exist.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The graph unification algorithm presented by AitKaci is a node \u2022merging process using the UNION/FIND method (originMly used for testing the equivalence of finite automata [Hopcroft/Karp 71]).",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It has its analogue in the unification algorithm for rational terms based on a fast procedure for congruence closure [Huet 76].",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Node merging is a destructive operation Since actual merging of nodes to build new node equivalence classes modifies the argument DGs, they must be copied before unification is invoked if the argument DGs need to be preserved.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, during parsing there are two kinds of representations that must be preserved: first, lexical entries and rules must be preserved.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They need to be copied first before a destructive unification operation can be applied to combine categories to form new ones; and second, nondeterminism in parsing requires the preservation of intermediate representations that might be used later when the parser comes back to a choice point to try some yet unexplored options.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "*Research reported in this paper is partly supported by the German Ministry of Research and Technology (BMFT, Bun- desmlnister filr Forschung und Technologie), under grant No. 08 B3116 3.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The views and conclusions contained herein are those of the authors and should not be interpreted as representing official policies.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "DG copying as a source of inefficiency Previous research on unification, in particular on graph unification [Karttunen/Kay 85, Pereira 85], and others, identified DG copying as the main source of inefficiency.",
                    "sid": 22,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The high cost in terms of time spent for copying and in terms of space required for the copies themselves accounts for a significant amount of the total processing time.",
                    "sid": 23,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Actually, more time is spent for copying than for unification itself.",
                    "sid": 24,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hence, it is crucial to reduce the amount of copying, both in terms of the number and of the size of copies, in order to improve the efficiency of unification.",
                    "sid": 25,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A naive implementation of unification would copy the arguments even before unification starts.",
                    "sid": 26,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is what [Wroblewski 87] calls early copying.",
                    "sid": 27,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Early copying is wasted effort in cases of failure.",
                    "sid": 28,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "He also introduced the notion of over copying, which results from copying both arguments in their entirety.",
                    "sid": 29,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since unification produces its result by merging the two arguments, the result usually contains significantly fewer nodes than the sum of the nodes of the argument DGs.",
                    "sid": 30,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Incremental Copying Wroblewski's nondestructive graph unification with incremental copying eliminates early copying and avoids over copying.",
                    "sid": 31,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "His method produces the resulting DG by incrementally copying the argument DGs.",
                    "sid": 32,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An additional copy field in the DG structure is used to associate temporary forwarding relationships to copied nodes.",
                    "sid": 33,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Only those copies are destructively modified.",
                    "sid": 34,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, the copy of the newly constructed root will be returned in case of success, and all the copy pointers will be invalidated in constant time by increment- ing a global generation counter without traversing the arguments again, leaving the arguments unchanged.",
                    "sid": 35,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Redundant Copying A problem arises with Wroblewski's account, because the resulting DG consists only of newly created structures even if parts of the input DGs that are not changed could be shared with the resultant DG.",
                    "sid": 36,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A better method would avoid (eliminate) such redundant copying as it is called by [Kogure 90].",
                    "sid": 37,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Structure Sharing The concept of structure sharing has been introduced to minimize the amount of copying by allowing DGs to share common parts of their structure.",
                    "sid": 38,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The Boyer and Moore approach uses a skeleton/environment representation for structure sharing.",
                    "sid": 39,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The basic idea of structure sharing presented by [Pereira 85], namely that an initial object together with a list of updates contains the same information as the object that results from applying the updates destructively to the initial object, uses a variant of Boyer and Moore's approach for structure sharing of term structures [Boyer/Moore 72].",
                    "sid": 40,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The method uses a skeleton for representing the initial DG that will never change and an environment for representing updates to the skeleton.",
                    "sid": 41,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There are two kinds of updates: reroutings that forward one DG node to another; arc bindings that add to a node a new arc. Lazy Copying as another method to achieve structure sharing is based on the idea of lazy evaluation.",
                    "sid": 42,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Copying is delayed until a destructive change is about to happen.",
                    "sid": 43,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Lazy copying to achieve structure sharing has been suggested by [Karttunen/Kay 85], and lately again by [Godden 90] and [Uogure 90].",
                    "sid": 44,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Neither of these methods fully avoids redundant copying in cases when we have to copy a node that is not the root.",
                    "sid": 45,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In general, all nodes along the path leading from the root to the site of an update need to be copied as well, even if they are not affected by this particular unification step, and hence could be shared with the resultant DG.",
                    "sid": 46,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Such cases seem to be ubiquitous in unification-based parsing since the equality constraints of phrase structure rules lead to the unification of substructures associated with the immediate daughter and mother categories.",
                    "sid": 47,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With respect to the overall structure that serves as the result of a parse, these unifications of substructures are even further embedded, yielding a considerable amount of copying that should be avoided.",
                    "sid": 48,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All of these methods require the copying of arcs to a certain extent, either in the form of new arc bindings or by copying arcs for the resultant DG.",
                    "sid": 49,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Lazy Incremental Copying We now present Lazy Incremental Copying (LIC) as a new approach to the copying problem.",
                    "sid": 50,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The method is based on Wroblewski's idea of incrementally producing the resultant DG while unification proceeds, making changes only to copies and leaving argument DGs untouched.",
                    "sid": 51,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Copies are associated with nodes of the argument DGs by means s b \u02d8 d \u2022 | Figure 1: Chronological dereferencing.",
                    "sid": 52,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "of an additional copy field for the data structures representing nodes.",
                    "sid": 53,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "But instead of creating copies for all of the nodes of the resultant DG, copying is done lazily.",
                    "sid": 54,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Copying is required only in cases where an update to an initial node leads to a destructive change.",
                    "sid": 55,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The Lazy Incremental Copying method constitutes a synthesis of Pereira's structure sharing approach and Wroblewski's incremental copying procedure combining the advantages and avoiding disadvantages of both methods.",
                    "sid": 56,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The structure sharing scheme is imported into Wroblewski's method eliminating redundant copying.",
                    "sid": 57,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Instead of using a global branch environment as in Pereira's approach, each node records it's own updates by means of the copy field and a generation counter.",
                    "sid": 58,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The advantages are a uniform unification procedure which makes complex merging of environments obsolete and which can be furthermore easily extended to handle disjunctive constraints.",
                    "sid": 59,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Data Structures CopyNode structure type: <symbol> arcs: <a list of ARCs> copy: <a pointer to a CopyNode> generation: <an integer> ARC structure label: <symbol> dest: <a CopyNode> Dereferencing The main difference between standard unification algorithms and LIC is the treatment of dereference pointers for representing node equivalence classes.",
                    "sid": 60,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The usual dereferencing operation follows a possible pointer chain until the class representative is found, whereas in LIC dereferencing is performed according to the current environment.",
                    "sid": 61,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each copy- node carries a generation counter that indicates to which generation it belongs.",
                    "sid": 62,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This means that every node is connected with its derivational context.",
                    "sid": 63,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A branch environment is represented as a sequence of valid generation counters (which could be extended to trees of generations for representing local disjunctions).",
                    "sid": 64,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The current generation is defined by the last element in this sequence.",
                    "sid": 65,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A copynode is said to be an active node if it was created within the current generation.",
                    "sid": 66,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Nondeterminism during parsing or during the processs of checking the satisfiability of constraints is handled through chronological backtracking, i.e. in case of failure the latest remaining choice is reexamined first.",
                    "sid": 67,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Whenever we encounter a choice point, the environment will be extended.",
                    "sid": 68,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The length of the environment corresponds to the number of stacked choice points.",
                    "sid": 69,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For every choice point with n possible continuations, n-1 new generation counters are created.",
                    "sid": 70,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The last alternative pops the last element from the environment, continues with the old environment and produces n DG representations, one for each alternative.",
                    "sid": 71,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By going back to previous generations, already existing nodes become active nodes, and are thus modified destructively.",
                    "sid": 72,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This technique resembles the last call optimization technique of some Prolog ira- \u2022 plementations, e.g. for the WAM [Warren83].",
                    "sid": 73,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The history of making choices is reflected by the dereferencing chain for each node which participated in different unifications.",
                    "sid": 74,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 1 is an example which illustrates how dereferencing works with respect to the environment: node b is the class representative for environment <0>, node c is the result of dereferencing for environments <0 1> and <0 1 2>, and finally node f corresponds to the representative for the environment <0 I 2 3> and all further extensions that did not add a new forwarding pointer to newly created copynodes.",
                    "sid": 75,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "325 Q~I, .Q Cam) 1: ck~ructive merge Cmo 2: tJmvm~JJng to tho ~tJvo nodo \u00ae -q)-- ....",
                    "sid": 76,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "--q) Cme S: i~wemen~ ~i by cn~lng a nm t.:tlve mtde Figure 2: Node merging.",
                    "sid": 77,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Advantages of this new dereferencing scheme ale: \u2022 It is very easy to undo the effects of unification upon backtracking.",
                    "sid": 78,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Instead of using trail information which records the nodes that must be restored in case of returning to a previous choice point, the state of computation at that choice point is recovered in constant time by activating the environment which is associated with that choice point.",
                    "sid": 79,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Dereferencing with respect to the environment will assure that the valid class representative will always be found.",
                    "sid": 80,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pointers to nodes that do not belong to the current environment are ignored.",
                    "sid": 81,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 It is no longer necessary to distinguish between the forward and copy slot for representing permanent and temporary relationships as it was needed in Wroblewski's algorithm.",
                    "sid": 82,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One copy field for storing the copy pointer is sufficient, thus reducing the size of node structures.",
                    "sid": 83,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Whether a unification leads to a destructive change by performing a rerouting that can not be undone, or to a nondestructive update by rerouting to a copynode that belongs to a higher generation, is reexpressed by means of the environment.",
                    "sid": 84,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Lazy Non-redundant Copying Unification itself proceeds roughly like a standard destructive graph unification algorithm that has been adapted to the order-sorted case.",
                    "sid": 85,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The distinction between active and non-active nodes allows us to perform copying lazily and to eliminate redundant copying completely.",
                    "sid": 86,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recall that a node is an active one if it belongs to the current generation.",
                    "sid": 87,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We distinguish between three cases when we merge two nodes by unifying them: (i) both are active nodes, (ii) either one of them is active, or (iii) they are both non-active.",
                    "sid": 88,
                    "ssid": 88,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the first case, we yield a destructive merge according to the current generation.",
                    "sid": 89,
                    "ssid": 89,
                    "kind_of_tag": "s"
                },
                {
                    "text": "No copying has to be done.",
                    "sid": 90,
                    "ssid": 90,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If either one of the two nodes is active, the non-active node is forwarded to the active one.",
                    "sid": 91,
                    "ssid": 91,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Again, no copying is required.",
                    "sid": 92,
                    "ssid": 92,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When we reset computation to a previous state where the non-active node is reactivated, this pointer is ignored.",
                    "sid": 93,
                    "ssid": 93,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the third case, if there is no active node yet, we know that a destructive change to an environment that must be preserved could occur by building the new equivalence class.",
                    "sid": 94,
                    "ssid": 94,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Instead, a new copynode will be created under the current active generation and both nodes will be forwarded to the new copy.",
                    "sid": 95,
                    "ssid": 95,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(For illustration cf.",
                    "sid": 96,
                    "ssid": 96,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 2.)",
                    "sid": 97,
                    "ssid": 97,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that it is not necessary to copy arcs for the method presented here.",
                    "sid": 98,
                    "ssid": 98,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Instead of collecting all arcs while dereferencing nodes, they are just carried over to new copynodes without any modification.",
                    "sid": 99,
                    "ssid": 99,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is done as an optimization to speed up the computation of arcs that occur in both argument nodes to be unified (Sharedhrcs) and the arcs that are unique with respect to each other (Un\u00b1queArcs).",
                    "sid": 100,
                    "ssid": 100,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\"1 v \\ \\ - . . .",
                    "sid": 101,
                    "ssid": 101,
                    "kind_of_tag": "s"
                },
                {
                    "text": "rein (lender 0; . Figure 3: A unification example.",
                    "sid": 102,
                    "ssid": 102,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The unification algorithm is shown in Figure 4 and Figure 3 illustrates its application to a concrete example of two successive unifications.",
                    "sid": 103,
                    "ssid": 103,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Copying the nodes that have been created by the first unification do not need to be copied again for the second unification that is applied at the node appearing as the value of the path pred.verb, saving five Copies in comparison to the other lazy copying methods.",
                    "sid": 104,
                    "ssid": 104,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Another advantage of the new approach is based on the ability to switch easily between destructive and non-destructive unification.",
                    "sid": 105,
                    "ssid": 105,
                    "kind_of_tag": "s"
                },
                {
                    "text": "During parsing or during the process of checking the satisfiability of constraints via backtracking, there are in general several choice points.",
                    "sid": 106,
                    "ssid": 106,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For every choice point with n possible continuations, n -1 lazy incremental copies of the DG are made using non- destructive unification.",
                    "sid": 107,
                    "ssid": 107,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The last alternative continues destructively, resembling the last cMl optimization technique of Prolog implemelitations, yielding n DG representations, one for each alternative.",
                    "sid": 108,
                    "ssid": 108,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since each node reflects its own update history for each continuation path, all unchanged parts of the DG are shared.",
                    "sid": 109,
                    "ssid": 109,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To sum up, derived DG instances are shared with input DG representations and updates to certain nodes by means of copy nodes are shared by different branches of the search space.",
                    "sid": 110,
                    "ssid": 110,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each new update corresponds to a new choice point in chronological order.",
                    "sid": 111,
                    "ssid": 111,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The proposed environment representation facilitates memory management for allocating and deallocating copy node structures which is very important for the algorithm to be efficient.",
                    "sid": 112,
                    "ssid": 112,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This holds, in particular, if it takes much more time to create new structures than to update old reclaimed structures.",
                    "sid": 113,
                    "ssid": 113,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Comparison with other Approaches Karttunen's Reversible Unification [Karttunen 86] does not use structure sharing at M1.",
                    "sid": 114,
                    "ssid": 114,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A new DG is copied from the modified arguments after successful unification, and the argument DGs are then restored to their original state by undoing all the changes made during unification hence requiring a second pass through the DG to assemble the result and adding a constant time for the save operation before each modification.",
                    "sid": 115,
                    "ssid": 115,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As it has been noticed by [Godden 90] and [Kogure 90], the key idea of avoiding \"redundant copying\" is to do copying lazily.",
                    "sid": 116,
                    "ssid": 116,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Copying of nodes will be delayed until a destructive change is about to take place.",
                    "sid": 117,
                    "ssid": 117,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Godden uses active data structures (Lisp closures) to implement lazy evaluation of copying, and Kogure uses a revised copynode procedure which maintains copy dependency information in order to avoid immediate copying.",
                    "sid": 118,
                    "ssid": 118,
                    "kind_of_tag": "s"
                },
                {
                    "text": "327 ~.",
                    "sid": 119,
                    "ssid": 119,
                    "kind_of_tag": "s"
                },
                {
                    "text": "procedure unify(nodel,node2 : CopyNode) nodel *-- deref(nodel) node2 ~-deter(node2) IF node1 = node2 THEN return(nodel) ELSE newtype ~-nodel.type A node2.type IF newtype = I THEN return(l) ELSE <SharedArcsl, SharedArcs2> ~-SharedArcs(nodel,node2) <UniqueArcsl, UniqueArcs2> ~-UniqueArcs(nodel,node2) IF ActiveP(nodel) THEN node ~-nodel node.arcs ~-node.arcs U UniqueArcs2 node2.copy ~-node ELSE IF ActiveP(node2) THEN node ~-node2 node.arcs ~-node.arcs LJ UniqueArcsl nodel,copy *- node ELSE node ~-CreateCopyNode nodel.copy *- node node2.copy ~-node node.arcs ~-UniqueArcsl U SharedArcsl U UniqueArcs2 ENDIF ENDIF node.type ~-newtype FOR EACH <SharedArcl, SharedArc2> IN <SharedArcsl, SharedArcs2> DO unify(SharedArcl.dest,SharedArc2.dest) return(node) ENDIF ENDIF END unify Figure 4: The unification procedure approach naive Pereira 85 Karttunen/Kay 85 Karttunen 86 Wroblewski 87 Godden 90 Kogure 90 LIC methods early over redundant incr.",
                    "sid": 120,
                    "ssid": 120,
                    "kind_of_tag": "s"
                },
                {
                    "text": "lazy copying copying copying copying copying yes yes yes no no no no no no no no no yes no yes no no yes no no no yes yes yes no no no yes no yes no yes yes no yes no yes no yes yes Figure 5: Comparison of unification approaches structure sharing no yes yes no no yes yes yes Both of these approaches suffer from difficulties of their own.",
                    "sid": 121,
                    "ssid": 121,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Godden's case, part of the copying is substituted/traded for by the creation of active data structures (Lisp closures), a potentially very costly operation, even where it would turn out that those closures remain unchanged in the final result; hence their creation is unnecessary.",
                    "sid": 122,
                    "ssid": 122,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, the search for already existing instances of active data structures in the copy environment and merging of environments for successive unifications causes an additional overhead.",
                    "sid": 123,
                    "ssid": 123,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Similarly, in Kogure's approach, not all redundant copying is avoided in cases where there exists a feature path (a sequence of nodes connected by arcs) to a node that needs to be copied.",
                    "sid": 124,
                    "ssid": 124,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All the nodes along such a path must be copied, even if they are not affected by the unification procedure.",
                    "sid": 125,
                    "ssid": 125,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, special copy dependency information has to be maintained while copying nodes in order to trigger copying of such arc sequences leading to a node where copying is needed later in the process of unification.",
                    "sid": 126,
                    "ssid": 126,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition to the overhead of storing copy dependency information, a second traversal of the set of dependent nodes is required for actually performing the copying.",
                    "sid": 127,
                    "ssid": 127,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This copying itself might eventually trigger further copying of new dependent nodes.",
                    "sid": 128,
                    "ssid": 128,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The table of Figure 5 summarizes the different unification approaches that have been discussed and compares them according to the concepts and methods they use.",
                    "sid": 129,
                    "ssid": 129,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Conclusion The lazy-incremental copying (LIC) method used for the unification algorithm combines incremental copying with lazy copying to achieve structure sharing.",
                    "sid": 130,
                    "ssid": 130,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It eliminates redundant copying in all cases even where other methods still copy over.",
                    "sid": 131,
                    "ssid": 131,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The price to be paid is counted in terms of the time spent for dereferencing but is licensed for by the gain of speed we get through the reduction both in terms of the number of copies to be made and in terms of the space required for the copies themselves.",
                    "sid": 132,
                    "ssid": 132,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The algorithm has been implemented in Common Lisp and runs on various workstation architectures.",
                    "sid": 133,
                    "ssid": 133,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is used as the essential operation in the implementation of the interpreter for the Typed Features Structure System (TFS [gmele/Zajac 90a, Emele/Zajac 90b]).",
                    "sid": 134,
                    "ssid": 134,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The formalism of TFS is based on the notion of inheritance and sets of constraints that categories of the sort signature must satisfy.",
                    "sid": 135,
                    "ssid": 135,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The formalism supports to express directly principles and generalizations of linguistic theories as they are formulated for example in the framework of HPSG [Pollard and Sag 87].",
                    "sid": 136,
                    "ssid": 136,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The efficiency of the LIC approach has been tested and compared with Wroblewski's method on a sample grammar of HPSG using a few test sentences for parsing and generation.",
                    "sid": 137,
                    "ssid": 137,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The overall processing time is reduced by 60% -70% of the original processing time.",
                    "sid": 138,
                    "ssid": 138,
                    "kind_of_tag": "s"
                },
                {
                    "text": "See [Emele 91] for further discussion of optimizations available for specialized applications of this general unification algorithm.",
                    "sid": 139,
                    "ssid": 139,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This paper also provides a detailed metering statistics for all of the other unification algorithms that have been compared.",
                    "sid": 140,
                    "ssid": 140,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}