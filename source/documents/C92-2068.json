{
    "ID": "C92-2068",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Graph unifi(:ation remains the nlost expensive part of unificatiou-b~Lsed grammar l)arsing.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We fl)cus on (Hie 81}ee(l-u 1) elelltellt ill the design of llllifieation algorithms: avoidance of copying of umao(li-fled sul)graph.s. We propose a method of attaining snch a design through a nlethod of structnre-sharing which avoids log(d) overheads often associated with structure-sharillg of graphs without any use of costly dependency pointers.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The proposed scheme eliminates redundant copying whih~ maintaining the qua.sidc,qtructive scheme's ability to avoid over copying and early copying eomlfined with its ability to handle cyclk: structures without algorithnfie additions.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "motivation",
            "number": "1",
            "sents": [
                {
                    "text": "Despite recent efforts in improving graph unification algorithms, graph unification renlains the most expensive part of parsing, both in time and space.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ATR's latest data fi'om the SLTRANS large-scale speech-to-speech translation project ([Morimoto, et al, 1990]) show 80 to 90 percent of tot~ parsing time is still consumed by graph unification where 75 to 95 percent of time is consumed by graph copying fune- ti(ms. 1 Qu~siDestruetive (Q-D) Graph Unification ([Tontabeehi, 1991]) was deveh)ped as a fiLst variation of non-destructive graph unification based upon the notion of time-sensitive 'qu~mi-destruction' of node structures.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The Q-D algorithm was proposed I)~Lsed upon the following m:cepted obserwttion about graph unification: Unification does not always succeed.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Copying is an expensive operation.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The design of tit(', Q-D scheme was motiwttcd by the following two princil)les h~r frost gral)h unification ba,sed upon the above observations: \u2022 Copying should be performed only for successful unifications.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Unification failures should be found as soon as possible.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "*This research wa.8 (lone while the author was ~ Visiting Research Scientist at ATR Interpreting Telephony [O~search Laboratories.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "lBased on unpublished reports from Knowledge itnd Data Processing Dept. ATR.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The observed tendency was that sentellCCS with very long parsing tillle requiting a large Ii|lltll~t~r of unification calls (over 200l} top-level calls) coll811lllcd extremely htrge proportion (over 93 percent) of total paraing time ft~r graph unification.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Similar data tep0rted in [Kogure.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "19901.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "and eliminated Over Copying and Early Copying (as defined in [Tomabechi, 1991] 2) and ralt about twice the speed of [Wroblewski.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1987]'s algorithm, a In this pal)er we proi)ose another design principle f(n' graph unification bmsed upon yet another accepted observation that: Unmodified subgraphs can be shared.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "At lemst two schelnes have been proposed recently ])a.~ed Ul)OU this observation (namely [Kogure.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1990] and [Emele, 1991]); however, both schemes are I)ased upon the increlllent'al Col)yiug sehellle all(l ~-LS ([e- scribed in [Tomal)eehi, 1991] incremental copying schemes inherently suffcr fi'om Early Copying as defined in that article.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is I)eeause, when a unification falls, the copies that were (:reated up to the point of failure are w~Lste(l if copies are created increment;ally, By way of definition we would like to categorize the sharing of struetul'eS in gral)hs into Feature- Structure Sharing (FS-Sharing) ~nd Data-Structure Sharing (DS-Sharing).",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Below arc our definitions: \u2022 Feature-Structure Sharing: Two or more distinct i)~,ths within a graph share the same sub-graph by (:onwwging (111 the same node equivalent to the notion of structure sharing or reenlrancy in linguistic theories (such ~ in [Pollard and Sag, 1987]).",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Data-Structure Sharing: Two or more distinct graphs share the same subgral)h by converging nil the same node the noti(m nf",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "namely.. ",
            "number": "2",
            "sents": [
                {
                    "text": "\u2022 Over Copying: Two dags ate created in order to create one new dag, This typically happens when Col)its of two input d~tgs are created prior to a destructive unific~Ltion operation to build one new dag.",
                    "sid": 22,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Early Copying: Copies ar~ created prior to the failure of unification so that copies (:reltted since the beginning of the unitication up to the point of failure are wasted.",
                    "sid": 23,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Wroblewski defined Early Col)ying as follows: \"The argutnent dags are copied be/t~teunification started.",
                    "sid": 24,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the unilication fails then some of the Ct)l)ying is wasted effort\" attd restricts early copying to cases that only apply to copies that are created prior to a unification.",
                    "sid": 25,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our definition ()f Early Copying includes copies that ~rc created during a unification and created up t() the point of fltilur(~ width were iltt(!ow~red by Wroblewski's definition.",
                    "sid": 26,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3 Recent (~xp(~rilnents COlllhlctt~d ill the Knowledge all(] Data Pro(:esniug Dept. of ATR shows the original Q-D algorithm COllsiatelltly rllllS lit ~tt~out 40 ])q~rctrl|t ~ff the elal)sed tillle uf Wroblewski'8 algorithm with its SLTRANS large-scale upokenlanguag,~ ttansl~ttlon system (with over l(t00{I grammatical gral)h nodes)..",
                    "sid": 27,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "straeture-sharing at tim data structure level.",
                    "sid": 28,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "[Kogurc, 1990] cldls Coltying of sui:h strltctures Redundant Copyin 9.",
                    "sid": 29,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Virtually all gral~lllutitication alg(n'itlinl,,; suptmrt FS-Sh~triug and some SUliport DS-Sharing with varying levels (if overhead.",
                    "sid": 30,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this lisper we proltOSl~ ~t sclienle of graph unification I)tmed UllOn a qu;~sidestrtt(:tive gratth uniti(:ati(m inetlloll that attains DS-Sharing with virtually no overh(',ad for structure- sharing.",
                    "sid": 31,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Henceforth, in tills palter, structltre-sharing refers tit DSsllariug unless otllerwise n(ited.",
                    "sid": 32,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Wc will see that tfic iutroducti(m of strlu:turesliarilag to qua~si-destructive imification art;tins another twofold increase ill rim tiluc spired.",
                    "sid": 33,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The graphs llamdled in the scheme (:;tit lie auy dirc(:ted grai)ll and cycli(:ity is llaudled without any algorithmic ;tdditions.",
                    "sid": 34,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our design princiitles for achieving structlu'C-sharing in tit(', qlta.si-destructive scllellU~ are: \u2022 Atomic and Bottom nodes can be shared 4 Atomic nodes can lie sltarcd sahdy since they tlever cli~l, llge their wdues.",
                    "sid": 35,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "B(Ittolll llodl!s Call It(!",
                    "sid": 36,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "share(l 5 sittce bottom nodes are always fl)rwal'ded to somc other uo(Jes wllcn they unify.",
                    "sid": 37,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Complex nodes can be shared unless they are modified-conq)lex nodes (:all bc COllSldercd modified if they ~tre a target of the fitrwarding operation m' if riley received the curreut ad- ditiml of comltlcment arcs (into COml)-ari:-list in (pia,si-destructive sclmme).",
                    "sid": 38,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By designing an algorithm ba.sed Ult,m these pril> (:il)les for strlu:turesliarillg while retaining the quasi- destructive nature of [Totnat)echi, 1991]'s algoritllnl, our scllmnc eliniinates l{,cdlnt(tant Cllpying whih~ elinlinating botll Early Copying auld Over Copying.",
                    "sid": 39,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2 Q-D Graph Unification We Woldd first like to describe tlle qu;Lsidestructiwe (Q-D) graph unilication schenle which is the lnLsis of our s(:henl(,'.",
                    "sid": 40,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a data structltrl~, at nolle is rcpre sentcd with live fiehls: type, arc-llst, comp ark-list.",
                    "sid": 41,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "fm'w~u'd, (:oily, and geueration.",
                    "sid": 42,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6 The data-structure for an at'(: has two liclds, qabel' and 'value'.",
                    "sid": 43,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\"Lot)el\" is an atmnic symt)ol wllicli labels tile ;u'e.",
                    "sid": 44,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "and 'wdue\" is a llointer to a llo(le structure.",
                    "sid": 45,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The central notion of tile Q-D algm'itlun is tile del)eudency of the retiresentational (:ontcnt on the glob~d timing clol:k (or thc global counter for tlic currcnt generation of lUlific;~tions).",
                    "sid": 46,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Any luodilic;~tiol~ made to coml)-arc-list, forward, or i:Olly rid(Is during one top-lcw:l uniticati(m (:au bc inwdidated by (me in- (:renlent otmration inl tile global timiug counter.",
                    "sid": 47,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "COIl tents of the (xmlp-arc-list, forward and (:opy fields arc 'IAtomic lto([l~8 ;ire IlodeH (halt reprea(~llt atoluic vcdue8, lie( loin nodes are llo{|e8 that repreuellt variabh*.",
                    "sid": 48,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "~As long as the unific~ttion Ol)er,~tion is the only operation to nmdify graphs.",
                    "sid": 49,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6 Note that [Tonlabechi, 1991] used sellarttte lltark fields fin COml)-;trcliat, forward, fill(| copy: (:urrently however, (}lily f}lltt general(kin mark is used for adl three fiehls.",
                    "sid": 50,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thanks are due to Hidehiko M~U,uo of T,)yo Informattion Sy,tcms (TIS) for suggesting thin..",
                    "sid": 51,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "NODE type + ...............",
                    "sid": 52,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ are-list +...............",
                    "sid": 53,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ compnrc-lint + ...............",
                    "sid": 54,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ ~orward IRC + ...............",
                    "sid": 55,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ copy I label I + ...............",
                    "sid": 56,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ generation I value I ...............",
                    "sid": 57,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u00f7 Figure 1: Node and Arc Structures resl)cctc(l ,rely wlten tile ge.neration mark of the lml'- ticlll~u' node nuttches tile current glob;d comat.er wdue.",
                    "sid": 58,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Q-I) graph unificatiola ham two kinds of arc lists: 1) ar,:-list and 2) colnt~;u'c-list.",
                    "sid": 59,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Arc-list (:Ollt~tins the arcs that are p(!rln;tu(!nl (i.e..",
                    "sid": 60,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ordimLry gral)li arcs) and Cillnp-arc list contains arcs that are rally wdid during one top-hwel graph unitication oper;d, ion.",
                    "sid": 61,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Tim algorittun also uses two kintls of fi)rwardlng links, i.e,, l)(!rttlalal!nt ;IAl(l t;(!llll)Ol'&l'y, i ll(!rlll~l,llellt forwar(fillg link is the usual fm'warding link ftnmd in ottler' ;d- goritfilns ([Pereir~t, 19851, [Wroblewski.",
                    "sid": 62,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1987], ctc).",
                    "sid": 63,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Telnl)orary forwarding links arc links tlud.",
                    "sid": 64,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "arc only wdid during onc top-level unilic~tti(m, Tlic currency IIf the temporary links is (letermiued by matching the emlteut of tim generati(nl field for the links witll the gl(ibal (:ounter; if they nutt(:ll, the content of this tiehl is respect[~d 7.",
                    "sid": 65,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As in [Pereira, 1985].",
                    "sid": 66,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "tile Q D ~dgorithln lla.S tltree types of uodes: 1) :atonfic.",
                    "sid": 67,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2) :lie(torn 8, and 3) :conqth!x. :atOllli(: tyllc nodes rep-res(mt at(nni( synll)ol values (such ;~s 'Noun'), :bet tom type n(Jdes are variables and :(:()lttl)lcx tylac nodes ~l.re Ilo(les that have art:s i:ol[litlg (lilt of thenl.",
                    "sid": 68,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Arcs are stored in the m'cqist tiehl.",
                    "sid": 69,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Tile atomic vahl(!",
                    "sid": 70,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "is also storc.d in the m'c-list if the node tyttc is :at,imil:.",
                    "sid": 71,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": ":llottom nodes succeed in unifyiug with nny uodes and the result of lint(it:alien t~kes tim type ~md the value of the node tlutt the :bottona nI)de w;m unified with.",
                    "sid": 72,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": ":atonli(: nodes succeed in unifying with :btIttona nodes or :at(lllliC llO(li~s with the mune vallle (Stilted in the arc-list).",
                    "sid": 73,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "UnificatioD of an :atomic uode with a :co]tll)lex llOde illlllte([iatcly filJls.",
                    "sid": 74,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": ":cottll)lex taodes site(reed in unifying with :bottolit nodes or witll :(:OUl- l)lex trades whose subgrlqdls all unity.",
                    "sid": 75,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u00b0 Figure 2 is the central qllmsi-,lestructlw~ graph unifi(:ation algorithm and Figur('.",
                    "sid": 76,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3 is the dcrcfel'encing 1\u00b0 flulction.",
                    "sid": 77,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Fig-lit'(?",
                    "sid": 78,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4 shows the algoritlill; for (:ollying ttilfl(!s all(1 ~Lrcs (called from lmify0) wllih~ respecting the (:Ollt(mts of ~a~4 \"~x~ist~ 7~1~ do II(It ]l~tVe ~t separate field for temporary forwtLrding links; instead, we desigllat(t tile integer wdue 9 to repreuent a permanent f,~rwatding llnk.",
                    "sid": 79,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We Ht~trt incrementing the global COUltter f[Olll 10 ,() whellever the gener;tti(ut lu~trk i8 lIO| 9, the integer vahle 11111~4t e(ltla] the globad COllltter v;tllle to reulmCt the forwaxding link.",
                    "sid": 80,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "8 lqottom i8 called leaf in Pereira'u algorithm.",
                    "sid": 81,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "9Arc wtlues are ,'always It(Idea aLnd never synlbolie V~dlle8 because :atomic *uLd :bottom nodes lilly lie (or ]l(}cO]ll(}) poillted to by luultiph: arl:x (i.e, FS-Sh~ring) depemlil~g on gt0annlar COllHtr.'killtg, and we do not want arcu to (:oltt~tln terlnin~d atomic V~lleO.",
                    "sid": 82,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "l\u00b0Derefi~rel|Cillg i8 till opera((loll to recllrsively traw~rae f.r-w;trding links to return the target mille of forwarding.",
                    "sid": 83,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "QUASI-DI~qTnuCTIVE ~RAPI[ UNIFICATION ] FUNCTION unify-dg(dgl,dg2}; result ~ catch with tag 'unify-fail calling unify0(dgl,dg2): increment *unify-global-counter*: ;; starts front 1(} 11 ret urn (result); END; FUNCTION unify0(dgl,dg2); if '*T* = unifyl(dgl,dg2); THEN copy ~ copy-dg-with-coml)-arcs(dgl); return(copy); END; FUNCTION unify1 (dglunderef,dg2undercf): dgl ~ derefercncedgldglunderef); dg2 ~ dereferencedgl dg2undercf }: IF (dgl.copy is son-empty)THEN dgl.copy ~ nil; :; cutoff ullt:ltrrent copy IF (dg2.copy is nonempty) THEN dg2.copy ~ nil; IF (dgl = dg2)I~THEN return('*T*); ELSE IF (dgl.type = :bottom) THEN forward-dg( dgl,dg2 jt empor asy); return('*T*); ELSE IF (dg2.type = :bottom) THEN forward-dg( dg2,dgl,:tem porary ); rcturn('*T*); ELSE IF (dgl.type = :atomic AND dg2.type = :atomic) THEN IF (dgl.arc-list = dg2.arc-list)13THEN forward-dg( dg2,dgl,:tempor ary}: return('*T*); ELSE throwt4with keyword 'unify-fail; ELSE IF (dgl.type = :atomic OH dg2.type = :atomic) THEN throw with keyword 'unify-fail; ELSE shared ~ intersectaxcs(dgl,dg2); forward-dg( dg2,dgl,:t empor ary ); 15 FOR EACH arc IN shared DO unifyl(destination of the shared arc for dgl, destination of the shared arc for dE2); new ~ complementarca(dg2,dgl); 16 IFlT(dgl.comp-arc-list is nonempty) THEN IF (dgl.generation = *unify-gloh;d-counter*) THEN FOR EACH arc IN new DO push as['.",
                    "sid": 84,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "to dgl,comp-arc-list,, ELSE dgl.colnp-arc-list ~ nil: ELSE dgl.genera.tion ~ *unify-glohal-couttter*: dgl.comp-arc-list ~-new; return ('*T*); END: FigLure 2: The Q-D Unification Functions Tit(' functions Contl)lenlelttarcs((lgl,dg2) and In 119 indicates a l)ermanent forwarding link.",
                    "sid": 85,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "12 EquM in the 'eq' 8ellse.",
                    "sid": 86,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Bec~tuae of forwarding altd cycles,.",
                    "sid": 87,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "it is possible that dgl and dg2 are \"eq'.",
                    "sid": 88,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "13 Arc-list contains atomic value if the node is of type :atomi(.",
                    "sid": 89,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "14Catch/throw coastxuct; i.e., immediately return to unify dE.",
                    "sid": 90,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "lSThis was performed ~dter FOR EACH letup in [Tonrahechi, 19911 which couht haw~ c~.uacd it prtddem writ a sttccessful cyclic call.",
                    "sid": 91,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thanks are due to Marie Boyle of University of Tuebingen fur suggesting the change.",
                    "sid": 92,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "16Colnplementarcs(dg2jlgl) was called before unifyl recur- siena in [Tomabechi, 1991], Currently it is moved to after all unifyl recuraions successfully return.",
                    "sid": 93,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thanks are ;dso due to Marie Boyle for suggestiug this.",
                    "sid": 94,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "17This check was added after [Tomabechi, 1991] to avoid over-writiltg the conlp-arc-list wll(~ll it is wrltt(,it more than once within one Ulfify0 call.",
                    "sid": 95,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thanks are duc to Peter Neuhaus of Oniversitiid Karlsruhe for reporting this l)roblem.",
                    "sid": 96,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "C;RAPll NODF\" DF',F'F'FERF'NF'ING ] FUNCTION dereferencedg(dg): f(>rwarddest ~ dg.forward; IF (forward-dent is nonempty) THEN IF (dg.generation : *unify-global-counter* OR rig.generation = 9) THEN dereferetu:e-dg( for ward-dent ); ELSE dE.forward ~ nil: :; make it GCable retura(dg)', ELSE return(rig); END; Figure 3: The Q-D Dereference Function t('rsc('tarcs(dgl,dg2) return the sctdiff(,renF`(\" (the arcs with labels that exist in dgl but not in dg2) and intersection (the arcs with labels that exist both in dgl and dg2).",
                    "sid": 97,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "During th(\" sctdifl'erence and sctiutersection otlera.tiultS, the (,ulttent of colnp-arc-lists art\" respected ms parts of arc lists if the genera.tion mark matchs the current va.lu(, of the globa.l tinting counter.",
                    "sid": 98,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Forward(rig1, dE2, :forward-type) puts (tg2 in tile forwa.rd field of dgl.",
                    "sid": 99,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the keyword in the fun('tion call is :temporary.",
                    "sid": 100,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "the eurrev.t valu(, of the *unify-glob;d-counter* is writtea in the generation fiehl of dgl.",
                    "sid": 101,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the kcyword is :perman(,nt, 9 is written in the generation fiehl of (lgl.",
                    "sid": 102,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "18 The temporary forwarding links are necessary to handle rcentrancy and cycles.",
                    "sid": 103,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As soon as unification (at any level of r(,cursion through sha.rcd art,s) is performed, a. tem- l)orary forwarding link is made from dg2 to dgl (dE1 to dE2 if dgl is of type :bottom).",
                    "sid": 104,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, during unification, a. node already unified by othcr recursive calls to unify1 within the same unify0 c',dl has a temporary forwarding link from dg2 to dE1 (ur dgl to dE2).",
                    "sid": 105,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a result, if this node becomes an int)ut argument node, derefcrencing the node causes dgl a.ud dg2 to lleconte tile Salll(, llo(lc attd unification immediately succeeds.",
                    "sid": 106,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, a subgraph below an Mrea(ly unified nude will not be checked inore than once even if an a.rgument graph has a. cycle.",
                    "sid": 107,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "19 [ QUASI- DF`STI1UCTIVF, COPYING ] FUNCTION copy-dg-wit h-conq*-arcs(dgunderef): dg ~ dereferencc~dg(dgunderef}; IF (dg.copy is iron-empty AND dg.copy.generation 2n ~ *unify-gloh',d-countcr*) THEN ret urn(dg.copy); 21 ELSE IF (dg.type = :atomic) THEN ncwcopy ~ create-node(); 2~ newcopy.type ~ :atolltic; newcopy.arc-list ~ dg,arc-list: Itewcopy.gel|eratiolt ~ *tinily-global-counter*; dg.copy ~ newcopy; ret urn(newcopy); ELSE IF {dg,type = :bottom) THEN ltewcopy ~ creatcnodel ); newcopy, type 4~ :hottoltl; I~ewcopy.gem!rlttioll ~ *unify-global-counter*; dg.copy ~ newcopy; ret urtt( newcopy )i ELSE 18permanent forwardings may be needled by gr~tlltlltar COlll- pliers that merge graphs.",
                    "sid": 108,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "l\u00b0Also, during copying suhaequent to a mlccessful uniticatioll, two 0d\u02d8:8 COllvergillg into the 8&lltl~ llode will Ilot c~*,lSe ovcrcopying simply because if a node already has a copy then the copy is returned.",
                    "sid": 109,
                    "ssid": 88,
                    "kind_of_tag": "s"
                },
                {
                    "text": "lieW(;Opy ~ (:reilt.:-node(); lleWCOpy.type ~ :COlllp|i~x; newcopy.g(~neratioll ~ *ltnifyglolnd-countel*: dg.col)y ~-lieWco|)y: 23 FOR ALL arc IN dg,arc-llst DO n(~warc ~ ctlpy-arc-alidct)lnpllrc(arc)l pllsh ll()w,%rc into newct)py.ttrcli,t; IF (dg.coiup-arc-li,t is non-mnpty AND dg.generation -*unify-glohal-counter*) THEN FOR ALL c(nnpar(: IN dg.conll~-itrcli~t DO li(~wlirc ~-- Col)y-arc-and-colllli-ltrc(colllp-arc}; plish liewltrc into n\u02d8~wcopy.arc-liut; dg,cotnp-arc-list ~ nih return (newcopy): END; FUNCTION Colly-arc-audconq)-arc(inpu t - arc }; label ~-input-,xrc.labch V~dllO t'~ copy-dg-witilcoulp-arl:s(input-arc.valul~); return a liCW ~trc with hd,el itltd vahle; END; Figure 4: Node and Arc Copying Functions Q-D Copying + DS-Sharing In order to attain strncture-sharing during QmLsi-Destructive gral)h unitication, no niodifieation is necessary for the unification functions descrit)ed in the previous section.",
                    "sid": 110,
                    "ssid": 89,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This section describes the qua.st-destructive copying with strueturc-sharing which replaces the original copying algorithm.",
                    "sid": 111,
                    "ssid": 90,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since unification functions are unnt0ditied, the Q-D unities-lion without stru(:ture-sharing eau be mixed trivially with the Q-D unificatitm with strueturcsharlng if such a mixture is desired (by simply choosing differ-eat copying fimetions).",
                    "sid": 112,
                    "ssid": 91,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Infi)rlnally, the Q-D copying with structure-sharing is l)erformed in the following way.",
                    "sid": 113,
                    "ssid": 92,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Atonfie and ])ottom llodes are shared, A COlllplex node is shared if llo nodes below that node are changed (a node is considered ehange(I by being a target of forwarding or having a valid COlnp-arc-list).",
                    "sid": 114,
                    "ssid": 93,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If a uode is ehaaged then that information is 1)~sed Ul) the graph path using multil)levalut~ binding facility when a copy of the nodes are recursively returned.",
                    "sid": 115,
                    "ssid": 94,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Two wdues are returned, the first value being the Col)y (or original) nolle and the second value being the flag representing whethe, r any of the node below that node (including t, hat node) h;us been ehanged.",
                    "sid": 116,
                    "ssid": 95,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Atomic aud bottonl nodes are always sharetl: however, they are considered changed if they were a target of forwarding st) that the 'changed' infornlation is passed up.",
                    "sid": 117,
                    "ssid": 96,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the eomI)lex node is a target of forwarding, if no node behiw that node is changed then the ()rigin;d eonlplex node is shared; however, the '(:hanged' inforniatit)n 20I.e..",
                    "sid": 118,
                    "ssid": 97,
                    "kind_of_tag": "s"
                },
                {
                    "text": "the *gtill(Sratioli\" fiehl of the iiodt, stored in tile q:olly' field of the \"dg' llode.",
                    "sid": 119,
                    "ssid": 98,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The Mgoritlnn (lescrihed in [Tomabechi, 1991] imt,d ~COllyln~rk' fiehl of'dg'.",
                    "sid": 120,
                    "ssid": 99,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Currently 'generlttion' field replaces tile three lnltrk fiehl described ill the article.",
                    "sid": 121,
                    "ssid": 100,
                    "kind_of_tag": "s"
                },
                {
                    "text": "21I.e..",
                    "sid": 122,
                    "ssid": 101,
                    "kind_of_tag": "s"
                },
                {
                    "text": "the cxisthig copy of the ilodc.",
                    "sid": 123,
                    "ssid": 102,
                    "kind_of_tag": "s"
                },
                {
                    "text": "22 Creltto8 fin empty node 8tlliCiUr(L ~a'l'lli~ ofl~ratil)li to set it newly i:tl!iited copy node into tim 'copy' field of Mg' w~ dolill Mter reclirSiOll into tubgtaph~ in tile Mgorithnl description in [Toinabechl.",
                    "sid": 124,
                    "ssid": 103,
                    "kind_of_tag": "s"
                },
                {
                    "text": "19911 which wa~ it cause of iufinite D2CllrSiOll with it parlicuhtr type of cycle~ lit the graph.",
                    "sid": 125,
                    "ssid": 104,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By llloving ill> to tills p(mltion flolll after the recilrtdon, 811ch a pr(~l)hmi Call be effectively avoided.",
                    "sid": 126,
                    "ssid": 105,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thilllk8 itr(2 due to Peter Neuhaus for reporting tile pro|lima.",
                    "sid": 127,
                    "ssid": 106,
                    "kind_of_tag": "s"
                },
                {
                    "text": "is l>~Lsse(l ut> when the recursion retunts.",
                    "sid": 128,
                    "ssid": 107,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Below is the a<:tual algoritlnn description for the Q-D copying with structure-sharing.",
                    "sid": 129,
                    "ssid": 108,
                    "kind_of_tag": "s"
                },
                {
                    "text": "[ Q-I) C ............. s......",
                    "sid": 130,
                    "ssid": 109,
                    "kind_of_tag": "s"
                },
                {
                    "text": "S .......",
                    "sid": 131,
                    "ssid": 110,
                    "kind_of_tag": "s"
                },
                {
                    "text": "I FUNCTION copy-dg-wit h-conq~-arce-share( dg-u nderef I: dg ~ dereferencedg(dgunderef); IF (dg,col)y i8 ito,-enlpty AND dg.ctqiy.generation = *unify-global-counter*) THEN IF (dg = rig.copy) THEN ~a newcopy ~-create-itode( ): newcopy.typc ~-:bottom; tmwcopy.gtmt~r ation ~ *unify-gh)b~d-ctm nt er *; dg.copy ~-- newt:spy; wdues(dg.copy.:changed): 25 ELSE vMue~(dg,col)y,:changed); ELSE IF (dg ~ dgunderef) THEN copy- imde-comp-not - for war ded(dg); ELSE copy-node-cmnpfi)rwardedidg); END; FUNCTION copy~node-comp-not-fi)rwarded(dg): IF (dg,type : :atolnic) THEN values(dg,uil); ;: rt~turn original dg with \"liO ch;lllg(~' flag.",
                    "sid": 132,
                    "ssid": 111,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ELSE IF (dg.type = :bottolll} THEN wdueu(dg.nil): ELSE IF (dg.cmnp-arc-liat is no.-empty AND rig,generation = *unify-globaLcounter*) THEN lmWCopy ~ creatt:-node(); newcopy.tylm ~ :eonwlex; n(~wcopy.genet&tiolt ~ *ullify-globAl-collnter*: dg.copy ~ newct)py: FOR ALL arc IN dg.arc-list DO newarc first Wdilt~ of copy-arc-and-contp-arc-Mlltre(arc); i)llsh liewitrc into lmwcopy,arc-]ist; FOR ALL conq)-arc IN rig,cutup-arc-list DO ilawltrc \u02d8~ firl4 t vahlc of copy-~trcalld-ct )ill p-arc-share( corn [)-arc ): ])uflh ileWltr(: iltto ilew(:opy.arc-|iat; dg.conlp-arc-list ~ nih wdtieu{ llew(:t~py,:chltlt ged ): ELSE state ~ IdL arcs ~ ldh dg.copy ~ rig 26 , dg.gtmerittiolt ~ *uliifygiol~al-i;o.nt(!r*; FOR ALL art: IN rig.arc-list DO itewar\u02d8,challge~tl ~ (:opy-arC-~lld-t:Olllpar(-sh;tr~(arc}; pus|t newart: illt~ arcs: IF (changed has wdue) THEN state ,-I:hllligl~d; IF (state has vldue) THEN IF (rig.copy # dg) THEN dg.copy.arc-liat , Arcs: dg.copy.type ~ :complex; vldues{ tlg.ct~py,:changed ); ELSE liewcopy ~ create-node(); newcopy.type ~-:comtdex; llewcopy.getleratioll ~ *tniifygl()lndctnlntl~r*; newcopy.arc-liat ~ ~trc~; dg.copy ~-- m~wl:opy; vidues( liewct)py.:t:hallged ) ; ELSE dg.copy ~ nil; ;;reset copy fiekl values{dg,uil): END; FUNCTION copy-node-conq)-forwarded{ dg); IF (dg.type : :g, tomic) THEN values(dg.:changed); ;; return origiaM dg with 'changed' flag.",
                    "sid": 133,
                    "ssid": 112,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ELSE IF (rig.type ~-:lmttom) THEN values(dg,:changed); ELSE IF (dg,comp-arc-li~t is uonenipty AND dg,generMion : *unify-globM-counter*) THEN newcopy ,-create-node(): newcopy.tylm *-:coilifdex; newcopy.gencratio~l ~ *utdfy-global-counter*; dg.copy ~ newcopy: FOR ALL arc IN dg.arc-list DO Ilew&rc (- first value of capy-arc-and-coml)-arc-sharc(arc); pllslt new&re }taro newcopy.arcdist: FOR ALL c<>ml)-arc IN dg.comp-arc-list DO ilewar(: first value of copy-arc-and-(:Olllpar(:-sh are( colll ])-arc/; pudt newarc into l|eWcg)y.arc-list; dg.comp-arc-list ~ nil: vMm~s(newcopy,:dlanged ); ELSE stale + nil, arcs ~ tail; slle(:essful tllliticatiOllS to the total ltUlllbcr of Itllifications.",
                    "sid": 134,
                    "ssid": 113,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Wc parsed cach selltcncc three times on a Sym- I)oli(:s 3620 using three tin}float}on ntethods, namely, Wroblewski's algorithln, a qua,sidcstrttctive lllethod without structure-sharing, and a qu,%i-destructive method with structure-shariug.",
                    "sid": 135,
                    "ssid": 114,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Wc took tile shortest elapsed time for ea(:h metho<l ('W' represents Wroblewski's algorithnl with a modification to handle cycles and wtrialllcs 29, 'QD' represents the <luimi- destructive nletlmd without structure-sharing, slid 'QS' represents the prol)osed lnethod with structure- sharing).",
                    "sid": 136,
                    "ssid": 115,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Data stru(:tures arc the same for all three dg.col)y ~ (Ig, dg.gcneration + *Ulfifyglol>al-counter*; unification methods ex(:el)t for additional fields for FOR ALL art: IN dg.arc-list DO imwarc,changed +: COl)y-arc-an( -comp-arc:s lare(arc); push newarc into arcs; IF (dmnged has value) THEN stat~ ~ cbal|ged; IF (state }tits value)THEN IF (rig.copy =fi dg) TItEN rig.copy.arc-list ~ arcs: dg.copy.type ~ :comt)lex; value,(dg.col~y.:changed); ELSE newcopy ~ create-node(); newcopy.type ~-- :complex; newcopy.gencration ~ *unify-gbJb~d-(:ounter*; newcopy.arc-list ~ a~cs; dg.copy ~ neweopy; v~dueA( newcopy.:cllangcd); ELSE dg,copy ~ nil; vahte~(dg,clmnged); ;; considered changed END; FUNCTION copy-arc-and-comp-arc-dkare(input -arc ); destination,cb~tnged Col)y-rig-wit h-coml)-~rcsdtare(in put -,xr(:.value ); IF (changed has value I TItEN lal)d + inpubarc.label; value ~ destination; values(a new arc witb lalml and value,:cluulged); ELSE rabies(input-arc jail): ;; return original arc END; Figure 5: Structure-Sharing Copying Functions Experiments Table 1 shows the resltlts of our experiments using all HPSG11,~sed sample Japanese granmtar dcvdoped at ATR br a conference registration telephone dialogue domain.",
                    "sid": 137,
                    "ssid": 116,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'Unifs' represents the total ltulnl/er of top-level unifications during a parse (i.c, the munl)er of calls to the top-loyal \"unify-dg', and not 'tinily1') 28.",
                    "sid": 138,
                    "ssid": 117,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'USratc' represents the ratio of 24 Currently, all lIOdetl arc Col)ted ill a cych~ il~ order to prevent the split of the copy ~uld the original when node above all uladl~.ngcd original i8 modified.",
                    "sid": 139,
                    "ssid": 118,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Tbanks are due to Makoto 'I'ak~d,a~i of TIS for suggesting the fix.",
                    "sid": 140,
                    "ssid": 119,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Of c,urue, a better method, if possihle, would be 1o copy tim whole cycle only wheat at least one node in the cycle i~ modified,.",
                    "sid": 141,
                    "ssid": 120,
                    "kind_of_tag": "s"
                },
                {
                    "text": "25'Values' retltrn nlllltil)le values ~rOlll ~t fllnCtioII.",
                    "sid": 142,
                    "ssid": 121,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our algoritlmt, two values are retunlcd.",
                    "sid": 143,
                    "ssid": 122,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first value is the result of copying, and the second value is ~t flag iMicatiag if tlmre wa~ any modificatiolt to the node or to ally of its desc(!n(lallt8.",
                    "sid": 144,
                    "ssid": 123,
                    "kind_of_tag": "s"
                },
                {
                    "text": "26Temporarily set copy of the dg 1o be itself, 27Multil)te-value-hind call.",
                    "sid": 145,
                    "ssid": 124,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first value is homld to 'newarc'.",
                    "sid": 146,
                    "ssid": 125,
                    "kind_of_tag": "s"
                },
                {
                    "text": "arid the second vahte is bt)und to 'dumged'.",
                    "sid": 147,
                    "ssid": 126,
                    "kind_of_tag": "s"
                },
                {
                    "text": "28Unifyl in called several times the number (>f uttifydg in the gtalnl|l&r ilSC(I ill the eXl)erilllCltt.",
                    "sid": 148,
                    "ssid": 127,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For exanlpb!",
                    "sid": 149,
                    "ssid": 128,
                    "kind_of_tag": "s"
                },
                {
                    "text": "nnifyl wi~ )l IIar -list ill tile Q-D lnethod8.",
                    "sid": 150,
                    "ssid": 129,
                    "kind_of_tag": "s"
                },
                {
                    "text": "8anle fltllctil)ltS are llsed to interface with Eal'ley~s parser and tile SalIIC sul)fllllCtiOllS are used wherever possible (snch ;as creation slid access of arcs) l, ll lnilthllize th(!",
                    "sid": 151,
                    "ssid": 130,
                    "kind_of_tag": "s"
                },
                {
                    "text": "diffcrem:eu that are not purely algorlthltfi<:.",
                    "sid": 152,
                    "ssid": 131,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'Nmnber of Copies' represents the numl)er of nodes created durillg each parse.",
                    "sid": 153,
                    "ssid": 132,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'Nlllllber of Arcs' rcprcsents the nlllllber of arcs created durillg each parse.",
                    "sid": 154,
                    "ssid": 133,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We used Earley's parsing 'algorithnl for the exper- intent.",
                    "sid": 155,
                    "ssid": 134,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The Japanese gralmnm' is based on tlPSG analysis ([Ponard and Sag, 1987]) eovering llhenomena such as coordination, case adjmlction, ad-junets, control, shLsh categories, zero-pronouns, in terrogativcs, WH constructs, and sonic pragmatics (speaker, hearer relations, politeness, etc.)",
                    "sid": 156,
                    "ssid": 135,
                    "kind_of_tag": "s"
                },
                {
                    "text": "([Yoshimoto and Kogm'e, 1989]}.",
                    "sid": 157,
                    "ssid": 136,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The grammar covers many of the imllortant linguistic phenomena in conversational Japaucse.",
                    "sid": 158,
                    "ssid": 137,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The grammar graphs which are con- vertcd front the l)atll equations contaiu 2324 no(tcs, a\u00b0 Wc used 16 Sclttenecs from a sanlplc telet/hone con-vcrs~tion dialog whi(:h range from very short sen-tenets (one word, i.e., tie 'no') to rdativdy hntg ones (such as soredehakochirakarasochiranitourokuyoush, i- woookuriitashimasu 'In that case, wc [speaker] will send you [hearer] the registration form.').",
                    "sid": 159,
                    "ssid": 138,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, tltc number of (toll-level) unifications per senteltce wu'icd widdy (from 6 to over 500).",
                    "sid": 160,
                    "ssid": 139,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 Discussion:.",
                    "sid": 161,
                    "ssid": 140,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pereira ([Percira, 1985]) attaills structure-sharing I)y having the rcsult graph share information with the origiw, d gr~tphs by storing charges to tile 'envirolt- merit'.",
                    "sid": 162,
                    "ssid": 141,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There will be tlle log(d) overhead (where d is the nuM)er of nodes ill a graph) associated with Percira's ntetho<l that is rcqttircd during node access to ,~ssenfl>le the whole graph from the 'skeleton' and the updates ill thc 'environment'.",
                    "sid": 163,
                    "ssid": 142,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Ill the proposed sdtcmc, since tim arcs dircetly lloint to the original graph structures there will be no overhead till\" node accesses.",
                    "sid": 164,
                    "ssid": 143,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Also, during unificatioli, siltce citaltges art!",
                    "sid": 165,
                    "ssid": 144,
                    "kind_of_tag": "s"
                },
                {
                    "text": "called 3299 times for sentence 9 when Itnifydg was called 480 tillies.",
                    "sid": 166,
                    "ssid": 145,
                    "kind_of_tag": "s"
                },
                {
                    "text": "29 Kogure ([Kogur< 1989]) des(:ribe~ It trivial time modification to WrohlewRki's algorithm lo handle cycles which is used ill oltr experillleltts,.",
                    "sid": 167,
                    "ssid": 146,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3tlDisjunctive equation~ are l)reproceH~ed hy the grammar reader module to expand into cross-multiples, whereas il~ ATR% SLTraNs syRtem.",
                    "sid": 168,
                    "ssid": 147,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Kasl)er's method ([Kauper.",
                    "sid": 169,
                    "ssid": 148,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1987]) to handle disjunctive feature-strltctures ia adopted.",
                    "sid": 170,
                    "ssid": 149,
                    "kind_of_tag": "s"
                },
                {
                    "text": "sent# Unifs USrate Elapsod timo(nec) W QD QS 1 6 0.50 o,2o o.15 0.13 2 101 0.34 2,53 1.16 1.10 3 18 0.22 0.40 0.20 0,20 4 71 0.55 2.20 1.24 0.91 5 305 0,37 13.78 6,51 3.65 6 59 0.27 3,20 0.64 0.50 7 6 0,50 0.21 0.13 0.11 8 81 0.51 3.17 1.59 1.21 9 480 0.37 24.62 8.11 5.74 10 555 0.41 40.15 16.39 8.80 ii 109 0.45 4.60 1.71 1.41 12 428 0.33 19.57 8.24 4.45 13 559 0.39 37.76 11.74 6.23 14 52 0.38 3.61 0.90 0.50 15 77 0.55 2.50 1.57 0.93 16 77 0.55 2.53 1.57 0.90 total 2984 161.23 61.85 36.77 (Z for total) ioo~ 38.4~ 22.8~ ~Sd)le 1: Comparison stored directly in the nodes (in the tluasidestructivc maturer) thcrc will be no ovcrhead for rctlccting the changes to gral)hs during unitic;ttion.",
                    "sid": 171,
                    "ssid": 150,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We share the l)rittciph~ of storing changes in a rcsU)rablc way with [Karttuncn, 1986]'s rcvtwsilfle unification and copy graphs only after a socccsshtl unification.",
                    "sid": 172,
                    "ssid": 151,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, Kal'ttllllCll~S nlcthod (lots llOt list!",
                    "sid": 173,
                    "ssid": 152,
                    "kind_of_tag": "s"
                },
                {
                    "text": "strllctllrcsharilig.",
                    "sid": 174,
                    "ssid": 153,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Also, }11 Kal'ttullcn's llltttll()t[ 31, whenever it destructive chaage is about to bc made, tile attribute vahle pairs a2 stored in the body of the tlodc arc saved illto all array.",
                    "sid": 175,
                    "ssid": 154,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The dag node structure itself is idso saved in another arrlty.",
                    "sid": 176,
                    "ssid": 155,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These wtlucs arc restored after the top lcvcI unification is c(mq)leted.",
                    "sid": 177,
                    "ssid": 156,
                    "kind_of_tag": "s"
                },
                {
                    "text": "{A t:opy is madc prior to the rcstoratiou Ol)cration if the unification wlus +t successful one.)",
                    "sid": 178,
                    "ssid": 157,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'['has, ill Karttuncn's lncthod, clmh node ixI the entire argulllcnt gral)h that hius been destructively modified must t)c restored SCl>aratcly by l'eXricviltg the attributc-values savcd ill an array and rcsctting th,!",
                    "sid": 179,
                    "ssid": 158,
                    "kind_of_tag": "s"
                },
                {
                    "text": "values into the (lag structure skeletons sltvcd in another array.",
                    "sid": 180,
                    "ssid": 159,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Ill the Q-D method.",
                    "sid": 181,
                    "ssid": 160,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Olt(!",
                    "sid": 182,
                    "ssid": 161,
                    "kind_of_tag": "s"
                },
                {
                    "text": "illCl'ell/ellt to the global COlllltcr c.q.ll iav+didatc all tht'.",
                    "sid": 183,
                    "ssid": 162,
                    "kind_of_tag": "s"
                },
                {
                    "text": "changes made to tilt!",
                    "sid": 184,
                    "ssid": 163,
                    "kind_of_tag": "s"
                },
                {
                    "text": "no<tern [Karttunen slid Kay, 1985] suggests the use of lazy evaluation to delay dcstructive chalLges during unificatiou.",
                    "sid": 185,
                    "ssid": 164,
                    "kind_of_tag": "s"
                },
                {
                    "text": "[Goddcn, 1990} presents one method to delay copying until a destructive change is al)out to take phtcc.",
                    "sid": 186,
                    "ssid": 165,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Godden uses delayed closures to directly imphm|cnt lazy evaluatitm during unification.",
                    "sid": 187,
                    "ssid": 166,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While it may be concel)tually straightforward to takc iulvantagc of delayc(I cVahlation functionalities ill progranuning laagtlages, actllal efficiency gain fl'on!",
                    "sid": 188,
                    "ssid": 167,
                    "kind_of_tag": "s"
                },
                {
                    "text": "such a schelnc may not bc significant.",
                    "sid": 189,
                    "ssid": 168,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is l)et:aase such a schenle siml)ly shifts t4e time and space consmned for Col)ying to creating and evaluating closures (which couhl be very costly compared to 'dcfstruct\" operations to create COl)ics 31The discussion of Karltunen's lnethod is ba.e,l on the D PATR imphnuent;ttion on Xerox 1109 machines ([Karttunmt, 1986]).",
                    "sid": 190,
                    "ssid": 169,
                    "kind_of_tag": "s"
                },
                {
                    "text": "32I+e., arc stru(:turen: 'label\" and 'vld[l(~' ])ilii'~ ill oUr w~cabulary.",
                    "sid": 191,
                    "ssid": 170,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Num of Copies Num of Arcs w QD q3 W qD OS 107 79 18 113 123 36 2285 1317 407 2441 1917 760 220 111 26 182 183 62 2151 1564 514 2408 2191 879 9092 5224 1220 9373 7142 2272 997 549 97 874 797 204 107 79 18 113 123 36 2406 1699 401 2572 2334 710 15756 8986 1696 17358 12427 3394 18822 11234 2737 20323 15375 5116 2913 1938 555 3089 2712 992 13363 7491 1586 14321 10218 3059 17741 9417 2483 19014 13055 4471 947 693 107 893 983 199 2137 1513 428 2436 2185 793 2137 1513 428 2436 2185 793 91181 53407 12721 97946 73950 23776 100~ 58,6~ 14~ 100~ 76% 24~ of three methods which arc often effectively ()l)timized lit many tom ......",
                    "sid": 192,
                    "ssid": 171,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 cial ....... lfilcrs).",
                    "sid": 193,
                    "ssid": 172,
                    "kind_of_tag": "s"
                },
                {
                    "text": "[Kog,|l'C, 1990] anti [Eulelc.",
                    "sid": 194,
                    "ssid": 173,
                    "kind_of_tag": "s"
                },
                {
                    "text": "19611 also use the lazy evaluation i(h',a to delay destructive changes.",
                    "sid": 195,
                    "ssid": 174,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Both Kogurc all(l Eme, h~ avoid direct usage of delayed evMuation by using pointer Oln:rations.",
                    "sid": 196,
                    "ssid": 175,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As b3mchr suggests, KogurCs method also requires a special dcl)endcncy inf(,rmation to bc mifintained which adds all overhead ahmg with the cost fin' traversing tile dCl)cudency arcs.",
                    "sid": 197,
                    "ssid": 176,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Also, a secon(I travcrsa] of the set of dellelldellt liodes i8 required for actually pcrfl)rming the copying.",
                    "sid": 198,
                    "ssid": 177,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Emele proposes a method of dcrcfercncing by adding enviromnent in- forlltatioli tllld, carries it scqtl(Hl(:t! of gCllCl'atioll COllll* tcrs so that a specific generation node (:all I)(~ fOlllld by traversing tim forwarding links until a node with that generation is found.",
                    "sid": 199,
                    "ssid": 178,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While this allows undoing destructive changes cheaply by backtracking the envirolllOCllt, every tinlc a spccilic graph is to bc at:- (:cssed the whoh!",
                    "sid": 200,
                    "ssid": 179,
                    "kind_of_tag": "s"
                },
                {
                    "text": "gt'aph ilcctls tO bc rccollstrll(:ted by following the fol'wardillg pointers ,~cqucntildly as speciticd in the environment list (cxt:et)~ for the root node) to find the node that shal'CS the smne generation number as the root llOde.",
                    "sid": 201,
                    "ssid": 180,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, similar to Pcrcira's mcthotl, there will be Nlog(d) ovcrhcad iLssociated with constructing t!ach graph every tinle & gral)h is accessed, where (1 is the llUillbCr of nodes ill the graph and N is the average depth of the tmvironlllClttal dcfcrcncc chain, This would cause a probh!nl if the algtlrithm is adolltcd fin' a large-sclde systcm ill which result graphs arc unified agidnst other graphs many times.",
                    "sid": 202,
                    "ssid": 181,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Like Wroblewski's method, \"all three lazy methods (i.c, Godden's, Kogure's and Emele's) suffer fi'mn the t)roblenl of Early Copying ms defined in [Tonlabcchi, 1991].",
                    "sid": 203,
                    "ssid": 182,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is because the copies that arc incrcnmntally created u 1, to tile point of failure during the same topAcvel unification arc wasted.",
                    "sid": 204,
                    "ssid": 183,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The prob- lent is inherent ill increlnental copying scheme and this probhml is elinfil|ated completely in [Karttuncn, 19861 and ill tile Q-D nmtltod.",
                    "sid": 205,
                    "ssid": 184,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3a There is one l/otential problent with the structure,- sharing idea whMt is shared by each of the schemes inchlding tile proposed tnethod.",
                    "sid": 206,
                    "ssid": 185,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This ltallpens when operations other tllan ttnification modify the graphs.",
                    "sid": 207,
                    "ssid": 186,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(This is typical whco a parser cuts off\" a part of a graph for sltbsequellt analysisa4.)",
                    "sid": 208,
                    "ssid": 187,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When such ol) erations are perfornmd, structure-sharing of t)ottolll (vlu'iablc) nodes stay cause probhmts when a sub graph cotttaitdog a 1)ottmn is shared by two different graphs and these graphs are used as argtllllelltS of a utfification function (either ~Ls the part of the same input graph or as ehmumts of dgl and dg2).",
                    "sid": 209,
                    "ssid": 188,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When a gt'aplL that shares st bottl)lO (lode iN llOt Ilsed ill its entirety, then the, represented i:lmstraint postulated by the path leading to the bottotn no(h; is no longer the same, Therefl>re, when such a graph appears in the same unification aloog with soIoe other graph with which it DS shares the same bottotn node.",
                    "sid": 210,
                    "ssid": 189,
                    "kind_of_tag": "s"
                },
                {
                    "text": "there will 1)e a false FS-Sharing.",
                    "sid": 211,
                    "ssid": 190,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(If the graph is used in its entirety this is not a problem since the two graph paths would unify anyway.)",
                    "sid": 212,
                    "ssid": 191,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This problenl happens mdy when neither of the two graphs that DSSltares the same I)ottolll node wan ultified against SOille other graph before al)pearing in the santo unification, as {If either was once unified, h)rwardiug wouht have avoided this prol)lent).",
                    "sid": 213,
                    "ssid": 192,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The methods to avoid such a problent can be 1) As long as these convergence of bottoln nodes are used h)r features that are not pressed up during i)arsing, the ln'oblems does not affect the result of parse in any way whMt scents the ca,se with the gr~mtmars at ATII azl(l CMU.",
                    "sid": 214,
                    "ssid": 193,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2) A parser call tie modified so that when it modifies a graph other than through graph unification a6, it et'eatcs copies of the arc stru(:tures containing the bottotn nodes.",
                    "sid": 215,
                    "ssid": 194,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the prolmsed tnethod this can be done by calling the copy function without structure-sharing llefl)re a parser ntodifics a grallh.",
                    "sid": 216,
                    "ssid": 195,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3) A parser can lie rood(tied so that it does not (:lit off parts of graphs and use the graphs in their entirety (this should not add emnplexity (mcc strttctttre-sharing is introduced to unification).",
                    "sid": 217,
                    "ssid": 196,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, althtmgh the space and time reductioo attained by structure-sharing (Jail t)e significant.",
                    "sid": 218,
                    "ssid": 197,
                    "kind_of_tag": "s"
                },
                {
                    "text": "DSShariag can cause l)roblems unless it is ttsed with a eautiott (by making sure variM)le sharing aaLazy methods delay eopyiug until a destructive chaalge is to be perforlne.d Do that unnecessary copies are not created within a lmrticular recurs(on into a unification function; howover, 8il|ce each shared arc recllrsion is indellendent (llOlldeterlllillistic).",
                    "sid": 219,
                    "ssid": 198,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(!villi if there are 11o unltecesa&ry copies created at ,dl iu otte particular relalrsioll, if there is a failure in 8Ollllr other shared art: recurs(on (at some depth), then the copied that are created hy successful shared arc recurs(ass up to the point of detection of failure will beconm wasted, As long as the haste contr<fl structure retnltins incremental, this is inher- (!lit ia the increlllental |uethod.",
                    "sid": 220,
                    "ssid": 199,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In otheI wolds, the problem is inhereut in these ilmremental methods by definition.",
                    "sid": 221,
                    "ssid": 200,
                    "kind_of_tag": "s"
                },
                {
                    "text": "34 For example, lnltny parse[.~ cut off a subgraph of the path 0 hJr applying further rules whmz it rule is accepted.",
                    "sid": 222,
                    "ssid": 201,
                    "kind_of_tag": "s"
                },
                {
                    "text": "35Such cases lltay happen whell the 8allle rule (such as V V} augluented with a heavy use of convergence ill the bottonl nodes is applied malty times during a parse.",
                    "sid": 223,
                    "ssid": 202,
                    "kind_of_tag": "s"
                },
                {
                    "text": "36Stlch as when a rule is accepted and suhgraph of O path is Cltt off..",
                    "sid": 224,
                    "ssid": 203,
                    "kind_of_tag": "s"
                },
                {
                    "text": "does not cause crroncous sharing by using these or some othm\" methods).",
                    "sid": 225,
                    "ssid": 204,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6 Conclusion.",
                    "sid": 226,
                    "ssid": 205,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The structure-sharing scltemc introduced ill this paper made the Q-D Mg(~ritlnn run significantly f~mter.",
                    "sid": 227,
                    "ssid": 206,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The original gain of the Q-D algorit, hnt was due to the fact that it does not create ally Over Copies or Early Col>ies whereas iIIcrelllelltal (:opyillg sfllI~Ille inherently produces Early Copies (iLs defined in [Totnal)echi, 19911) when a unification fails.",
                    "sid": 228,
                    "ssid": 207,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Tilt: pro- l)osed schenm lllakes the Q-D algotfflmi fully i~vl)i(1 lh~dundaltt Collies as well by only copying the lowest nodes that need to be eoI)ied due to destrtt(:tive chatlges caused by successful unifications only.",
                    "sid": 229,
                    "ssid": 208,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since there will bc virtually uo overhead associated with structure=sharlng (except far returning two vahl(!s ill- stead (If oDc' to pa.ss tip :chattge(l illforltlatioll wht!ll rt!- curs(oil for copying rcturos), the perfornlatlee of the prol)osed strnl:ture-sharing schellle should llOt drop eveii when the granmlar size is significantly scaled Ul).",
                    "sid": 230,
                    "ssid": 209,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With the denttmstratcd speed of the algorithm.",
                    "sid": 231,
                    "ssid": 210,
                    "kind_of_tag": "s"
                },
                {
                    "text": "as well as the ability to handle cyclicity in the graphs.",
                    "sid": 232,
                    "ssid": 211,
                    "kind_of_tag": "s"
                },
                {
                    "text": "mid ease of switching betwemt strueturesharittg attd non-structure sharing, the algorithm couhl lie a viable alternative to existing tttfifit:ation algorithnts used in current nature| language systems.",
                    "sid": 233,
                    "ssid": 212,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}