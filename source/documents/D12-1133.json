{
    "ID": "D12-1133",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Most current dependency parsers presuppose that input words have been morphologically disambiguated using a part-of-speech tagger before parsing begins.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We present a transition- based system for joint part-of-speech tagging and labeled dependency parsing with non- projective trees.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Experimental evaluation on Chinese, Czech, English and German shows consistent improvements in both tagging and parsing accuracy when compared to a pipeline system, which lead to improved state-of-the- art results for all languages.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Dependency-based syntactic parsing has been the focus of intense research efforts during the last decade, and the state of the art today is represented by globally normalized discriminative models that are induced using structured learning.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Graph- based models parameterize the parsing problem by the structure of the dependency graph and normally use dynamic programming for inference (McDonald et al., 2005; McDonald and Pereira, 2006; Carreras, 2007; Koo and Collins, 2010; Bohnet, 2010), but other inference methods have been explored especially for non-projective parsing (Riedel and Clarke, 2006; Smith and Eisner, 2008; Martins et al., 2009; Martins et al., 2010; Koo et al., 2010).",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Transition- based models parameterize the problem by elementary parsing actions and typically use incremental beam search (Titov and Henderson, 2007; Zhang and Clark, 2008; Zhang and Clark, 2011).",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Despite notable differences in model structure, graph-based and transition-based parsers both give state-of-the- art accuracy with proper feature selection and optimization (Koo and Collins, 2010; Zhang and Nivre, 2011; Bohnet, 2011).",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is noteworthy, however, that almost all dependency parsers presuppose that the words of an input sentence have been morphologically disambiguated using (at least) a part-of-speech tagger.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is in stark contrast to the best parsers based on PCFG models, such as the Brown parser (Charniak and Johnson, 2005) and the Berkeley parser (Petrov et al., 2006; Petrov and Klein, 2007), which not only can perform their own part-of-speech tagging but normally give better parsing accuracy when they are allowed to do so.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This suggests that joint models for tagging and parsing might improve accuracy also in the case of dependency parsing.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It has been argued that joint morphological and syntactic disambiguation is especially important for richly inflected languages, where there is considerable interaction between morphology and syntax such that neither can be fully disambiguated without considering the other.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, Lee et al.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) show that a discriminative model for joint morphological disambiguation and dependency parsing outperforms a pipeline model in experiments on Latin, Ancient Greek, Czech and Hungarian.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, Li et al.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) and Hatori et al.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) report improvements with a joint model also for Chinese, which is not a richly inflected language but is nevertheless rich in part-of-speech ambiguities.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we present a transition-based model for joint part-of-speech tagging and labeled dependency parsing with non-projective trees.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Exper 1455 Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, pages 1455\u20131465, Jeju Island, Korea, 12\u201314 July 2012.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Qc 2012 Association for Computational Linguistics iments show that joint modeling improves both tagging and parsing accuracy, leading to state-of-the-art accuracy for richly inflected languages like Czech and German as well as more configurational languages like Chinese and English.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To our knowledge, this is the first joint system that performs labeled dependency parsing.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is also the first joint system that achieves state-of-the-art accuracy for non-projective dependency parsing.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "transition-based tagging and parsing. ",
            "number": "2",
            "sents": [
                {
                    "text": "Transition-based dependency parsing was pioneered by Yamada and Matsumoto (2003) and Nivre et al.",
                    "sid": 22,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2004), who used classifiers trained to predict individual actions of a deterministic shift-reduce parser.",
                    "sid": 23,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recent research has shown that better accuracy can be achieved by using beam search and optimizing models on the entire sequence of decisions needed to parse a sentence instead of single actions (Zhang and Clark, 2008; Huang and Sagae, 2010; Zhang and Clark, 2011; Zhang and Nivre, 2011; Bohnet, 2011).",
                    "sid": 24,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, a number of different transition systems have been proposed, in particular for dealing with non-projective dependencies, which were beyond the scope of early systems (Attardi, 2006; Nivre, 2007; Nivre, 2009; Titov et al., 2009).",
                    "sid": 25,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this section, we start by defining a transition system for joint tagging and parsing based on the non-projective transition system proposed in Nivre (2009).",
                    "sid": 26,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We then show how to perform beam search and structured online learning with this model, and conclude by discussing feature representations.",
                    "sid": 27,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.1 Transition System.",
                    "sid": 28,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given a set P of part-of-speech tags and a set D of dependency labels, a tagged dependency tree for artificial root node 0.",
                    "sid": 29,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set A of arcs is a set of pairs (i, j), where i is the head node and j is the dependent node.",
                    "sid": 30,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The functions \u03c0 and \u03b4 assign a unique part-of-speech label to each node/word and a unique dependency label to each arc, respectively.",
                    "sid": 31,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This notion of dependency tree differs from the standard definition only by including part-of-speech labels as well as dependency labels (Ku\u00a8 bler et al., 2009).",
                    "sid": 32,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Following Nivre (2008), we define a transition system for dependency parsing as a quadruple S = (C, T , cs, Ct), where 1.",
                    "sid": 33,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "C is a set of configurations, 2.",
                    "sid": 34,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "T is a set of transitions, each of which is a (partial) function t : C \u2192 C , 3.",
                    "sid": 35,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "cs is an initialization function, mapping a sentence x to a configuration c \u2208 C , 4.",
                    "sid": 36,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Ct \u2286 C is a set of terminal configurations..",
                    "sid": 37,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A transition sequence for a sentence x in S is a sequence of configuration-transition pairs C0,m = [(c0, t0), (c1, t1), . . .",
                    "sid": 38,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", (cm, tm)] where c0 = cs(x), tm(cm) \u2208 Ct and ti(ci) = ci+1 (0 \u2264 i < m).1 In this paper, we take the set C of configurations to be the set of all 5tuples c = (\u03a3, B, A, \u03c0, \u03b4) such that \u03a3 (the stack) and B (the buffer) are disjoint sublists of the nodes Vx of some sentence x, A is a set of dependency arcs over Vx, and \u03c0 and \u03b4 are labeling functions as defined above.",
                    "sid": 39,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We take the initial configuration for a sentence x = w1, . . .",
                    "sid": 40,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", wn to be cs(x) = ([0], [1, . . .",
                    "sid": 41,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", n], { }, \u22a5, \u22a5), where \u22a5 is the function that is undefined for all arguments, and we take the set Ct of terminal configurations to be the set of all configurations of the form c = ([0], [ ], A, \u03c0, \u03b4) (for any A, \u03c0 and \u03b4).",
                    "sid": 42,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The tagged dependency tree defined for x by c = (\u03a3, B, A, \u03c0, \u03b4) a sentence x = w1, . . .",
                    "sid": 43,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", wn is a directed tree T = (Vx, A) with labeling functions \u03c0 and \u03b4 such that: is the tree (Vx , A) with labeling functions \u03c0 and \u03b4, 1.",
                    "sid": 44,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Vx = {0, 1, . . .",
                    "sid": 45,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", n} is a set of nodes,.",
                    "sid": 46,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.",
                    "sid": 47,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A \u2286 Vx \u00d7 Vx is a set of arcs, 3.",
                    "sid": 48,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u03c0 : Vx \u2192 P is a labeling function for nodes, 4.",
                    "sid": 49,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u03b4 : A \u2192 D is a labeling function for arcs, 5.",
                    "sid": 50,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "0 is the root of the tree.",
                    "sid": 51,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set Vx of nodes is the set of positive integers up to and including n, each corresponding to the linear position of a word in the sentence, plus an extra which we write TREE(x, c).",
                    "sid": 52,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set T of transitions is shown in Figure 1.",
                    "sid": 53,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The LEFT-ARCd and RIGHT-ARCd transitions both add an arc (with dependency label d) between the two nodes on top of the stack and replaces these nodes by the head node of the new arc (which is the rightmost node for LEFT-ARCd and the leftmost node for RIGHT-ARCd).",
                    "sid": 54,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The SHIFTp transition extracts the 1 This definition of transition sequence differs from that of.",
                    "sid": 55,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Nivre (2008) but is equivalent and suits our presentation better.",
                    "sid": 56,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "T r a n s it i o n C o n d i t i o n L E F T A R C d R I G H T A R C d S H I F T p S W A P ( [ \u03c3 | i , j ] , B , A , \u03c0 , \u03b4 ) \u21d2 ( [ \u03c3 | j ] , B , A \u222a { ( j , i ) } , \u03c0 , \u03b4 [ ( j , i ) \u2192 d ] ) ( [ \u03c3 | i , j ] , B , A , \u03c0 , \u03b4 ) \u21d2 ( [ \u03c3 | i ] , B , A \u222a { ( i , j ) } , \u03c0 , \u03b4 [ ( i , j ) \u2192 d ] ) ( \u03c3 , [ i | \u03b2 ] , A , \u03c0 , \u03b4 ) \u21d2 ( [ \u03c3 | i ] , \u03b2 , A , \u03c0 [ i \u2192 p ] , \u03b4 ) ( [ \u03c3 | i , j ] , \u03b2 , A , \u03c0 , \u03b4 ) \u21d2 ( [ \u03c3 | j ] , [ i | \u03b2 ] , A , \u03c0 , \u03b4 ) i / = 0 0 < i < j Figure 1: Transitions for joint tagging and dependency parsing extending the system of Nivre (2009).",
                    "sid": 57,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The stack \u03a3 is represented as a list with its head to the right (and tail \u03c3) and the buffer B as a list with its head to the left (and tail \u03b2).",
                    "sid": 58,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The notation f [a \u2192 b] is used to denote the function that is exactly like f except that it maps a to b. first node in the buffer, pushes it onto the stack and PARSE(x, w, b1, b2) lab els it wit h the part-of spe ech tag p. Th e SW AP 1 h0.",
                    "sid": 59,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "c \u2190 cs( x) tran sitio n extr act s the sec ond top mo st nod e fro m the 2 h0.",
                    "sid": 60,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "s \u2190 0.0 sta ck and mo ves it bac k to the buff er, sub ject to the 3 h0.",
                    "sid": 61,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "f \u2190 {0.",
                    "sid": 62,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "0}d im( w) con diti on that the two top nod es on the sta ck are still 4 BE AM \u2190 [h0 ] in the ord er giv en by the se nte nc e. 5 wh ile \u2203h \u2208 BE AM : h.c /\u2208 Ct E x c e p t f o r t h e a d d it i o n o f a t a g p a r a m e t e r p t o 6 T M P \u2190 [ ] the SHI FT tra nsit ion, thi s is equ ival ent to the sys 7 f o r e a c h h \u2208 B E A M tem des crib ed in Niv re (20 09) , whi ch tha nks to the 8 f o r e a c h t \u2208 T : P E R M I S S I B L E ( h . c , t ) SW AP tra nsit ion can han dle arbi trar y non pro ject ive 9 h . f \u2190 h . f + f ( h . c , t ) tree s. The sou ndn ess and co mpl ete nes s res ults giv 1 0 h . s \u2190 h . s + f ( h . c , t ) \u00b7 w en in that pap er trivi ally car ry ove r to the ne w sys 1 1 h . c \u2190 t ( h . c ) tem . Th e onl y thin g to not e is that , bef ore a ter mi nal 1 2 T M P \u2190 I N S E R T ( h , T M P ) configuratio n can be reached, every word has to be 13 BEAM \u2190 PRUNE(TMP, b1, b2) pus hed ont o the sta ck in a SHI FTp tra nsit ion, whi ch 1 4 h \u2190 TO P( BE AM ) ens ure s that eve ry nod e/w ord in the out put tree will 1 5 y \u2190 TR EE( x, h.c ) be tag ge d. 1 6 ret ur n y 2.2 Inference and Learning.",
                    "sid": 63,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While early transition-based parsers generally used greedy best-first inference and locally trained classifiers, recent work has shown that higher accuracy can be obtained using beam search and global structure learning to mitigate error propagation.",
                    "sid": 64,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, it seems that the globally learned models can exploit a much richer feature space than locally trained classifiers, as shown by Zhang and Nivre (2011).",
                    "sid": 65,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since joint tagging and parsing increases the size of the search space and is likely to require novel features, we use beam search in combination with structured perceptron learning.",
                    "sid": 66,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The beam search algorithm used to derive the best parse y for a sentence x is outlined in Figure 2.",
                    "sid": 67,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition to the sentence x, it takes as input a weight vector w corresponding to a linear model for scoring transitions out of configurations and two prun Figure 2: Beam search algorithm for joint tagging and dependency parsing of input sentence x with weight vector w and beam parameters b1 and b2 . The symbols h.c, h.s and h.f denote, respectively, the configuration, score and feature representation of a hypothesis h; h.c.A denotes the arc set of h.c. ing parameters b1 and b2.",
                    "sid": 68,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A parse hypothesis h is represented by a configuration h.c, a score h.s and a feature vector h.f for the transition sequence up to h.c. Hypotheses are stored in the list BEAM, which is sorted by descending scores and initialized to hold the hypothesis h0 corresponding to the initial configuration cs(x) with score 0.0 and all features set to 0.0 (lines 1\u20134).",
                    "sid": 69,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the main loop (lines 5\u201313), a set of new hypotheses is derived and stored in the list TMP, which is finally pruned and assigned as the new value of BEAM.",
                    "sid": 70,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The main loop terminates when all hypotheses in BEAM contain terminal configurations, and the dependency tree extracted from the top scoring hypothesis is returned (lines 14\u201316).",
                    "sid": 71,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set of new hypotheses is created in two nested loops (lines 7\u201312), where every hypothesis h in BEAM is updated using every permissible transition t for the configuration h.c. The feature representation of the new hypothesis is obtained by adding the feature vector f(t, h.c) for the current configuration- transition pair to the feature vector of the old hypothesis (line 9).",
                    "sid": 72,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Similarly, the score of the new ly dependency labels or tags.",
                    "sid": 73,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, in the experiments later on, we will typically constrain the parser so that SHIFTp is permissible only if p is one of the k best part-of-speech tags with a score no more than \u03b1 below the score of the 1-best tag, as determined by a preprocessing tagger.",
                    "sid": 74,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also filter out instances of LEFT-ARCd and RIGHT-ARCd, where d does not occur in the training data for the predicted part-of- speech tag combination of the head and dependent.",
                    "sid": 75,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This procedure leads to a significant speed up.",
                    "sid": 76,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to learn a weight vector w from a training hypothesis is the sum of the score f(t, h.c) \u00b7 w of set {(xj , yj )}Tof sentences with their tagged dethe current configuration-transition pair and the s core of the old hypothesis (line 10).",
                    "sid": 77,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The feature representation/score of a complete parse y for x with transition sequence C0,m is thus the sum of the feature representations/scores of the configuration- transition pairs in C0,m: pendency trees, we use a variant of the structured perceptron, introduced by Collins (2002), which makes N iterations over the training data and updates the weight vector for every sentence xj where the highest scoring parse y\u2217 is different from yj .More precisely, we use the passive-aggressive up date of Crammer et al.",
                    "sid": 78,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2006): f(x, y) = ) (c,t)\u2208C0,m s(x, y) = ) (c,t)\u2208C0,m f(c, t) f(c, t) \u00b7 w where wi+1 = wi + \u03c4 (f(xj , yj ) \u2212 f(xj , y\u2217)) f(xj , yj ) \u2212 f(xj , y\u2217) Finally, the configuration of the new hypothesis is obtained by evaluating t(h.c) (line 11).",
                    "sid": 79,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The new hypothesis is then inserted into TMP in score-sorted order (line 12).",
                    "sid": 80,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The pruning parameters b1 and b2 determine the number of hypotheses allowed in the beam and at the same time control the tradeoff between syntactic and morphological ambiguity.",
                    "sid": 81,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First, we extract the b1 highest scoring hypotheses with distinct dependency trees.",
                    "sid": 82,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then we extract the b2 highest scoring remaining hypotheses, which will typically be tagging variants of dependency trees that are already in the beam.",
                    "sid": 83,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this way, we prevent the beam from getting filled up with too many tagging variants of the same dependency tree, which was found to be harmful in preliminary experiments.",
                    "sid": 84,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One final thing to note about the inference algorithm is that the notion of permissibility for a transition t out of a configuration c can be used to capture not only formal constraints on transitions \u2013 such as the fact that it is impossible to perform a SHIFTp transition with an empty buffer or illegal to perform a LEFT-ARCd transition with the special root node on top of the stack \u2013 but also to filter out unlike \u03c4 = ||f(xj , yj ) \u2212 f(xj , y\u2217)||2 We also use the early update strategy found beneficial for parsing in several previous studies (Collins and Roark, 2004; Zhang and Clark, 2008; Huang and Sagae, 2010), which means that, during learning, we terminate the beam search as soon as the hypothesis corresponding to the gold parse yj falls out of the beam and update with respect to the partial transition sequence constructed up to that point.",
                    "sid": 85,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, we use the standard technique of averaging over all weight vectors, as originally proposed by Collins (2002).",
                    "sid": 86,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.3 Feature Representations.",
                    "sid": 87,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As already noted, the feature representation f(x, y) of an input sentence x with parse y decomposes into feature representations f(c, t) for the transitions t(c) needed to derive y from cs(x).",
                    "sid": 88,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Features may refer to any aspect of a configuration, as encoded in the stack \u03a3, the buffer B, the arc set A and the labelings \u03c0 and \u03b4.",
                    "sid": 89,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, we assume that each word w in the input is assigned up to k candidate part-of-speech tags \u03c0i(w) with corresponding scores s(\u03c0i(w)).",
                    "sid": 90,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Fea ture s inv olvi ng wor d pref ixe s and suff ixe s \u03c0i (B0 )p2 (B0 ), \u03c0i (B0 )s2 (B0 ), \u03c0i (B0 )p1 (B0 )p1 (\u03a30 ) \u03c0i (\u03a30 )p1 (\u03a30 )p1 (\u03a31 ), \u03c0i (\u03a30 )s1 (\u03a30 )s1 (\u03a30 ) \u03c0i (\u03a30 )p2 (\u03a30 )s3 (\u03a31 ),\u03c0i (\u03a30 )s3 (\u03a30 )p2 (\u03a31 ) \u03c0i (\u03a30 )w( B0 )s1 (\u03a30 ), \u03c0i (\u03a30 )w( B0 )s2 (\u03a30 ) Fea ture s inv olvi ng tag sco re diff ere nce s and ran ks \u03c0i (B0 )[s( \u03c01 (B0 )) \u2212 s(\u03c0 i (B0 ))] \u03c0i (B0 )\u03c0i (\u03a30 )[s( \u03c01 (B0 )) \u2212 s(\u03c0 i (B0 ))] i \u03c0i (B0 )[s( \u03c01 (B0 )) \u2212 s(\u03c0 i (B0 ))]\u03c0 (\u03a30 ) w( B0 )[s( \u03c01 (B0 )) \u2212 s(\u03c0 i (B0 ))]\u03c0 (\u03a30 ) Figure 3: Specialized feature templates for tagging.",
                    "sid": 91,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use \u03a3i and Bi to denote the ith token in the stack \u03a3 and buffer B, respectively, with indexing starting at 0, and we use the following functors to extract properties of a token: \u03c0i () = ith best tag; s(\u03c0i ()) = score of ith best tag; \u03c0() = finally predicted tag; w() = word form; pi () = word prefix of i characters; si () = word suffix of i characters.",
                    "sid": 92,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Score differences are binned in discrete steps of 0.05.",
                    "sid": 93,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The bulk of features used in our system are taken from Zhang and Nivre (2011), although with two important differences.",
                    "sid": 94,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First of all, like Hatori et al.",
                    "sid": 95,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011), we have omitted all features that presuppose an arc-eager parsing order, since our transition system defines an arc-standard order.",
                    "sid": 96,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Secondly, any feature that refers to the part-of-speech tag of a word w in the buffer B will in our system refer to the top- scoring tag \u03c01(w), rather than the finally predicted tag.",
                    "sid": 97,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By contrast, for a word in the stack \u03a3, part-of- speech features refer to the tag \u03c0(w) chosen when shifting w onto the stack (which may or may not be the same as \u03c01(w)).",
                    "sid": 98,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition to the standard features for transition- based dependency parsing, we have added features specifically to improve the tagging step in the joint model.",
                    "sid": 99,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The templates for these features, which are specified in Figure 3, all involve the ith best tag assigned to the first word of the buffer B (the next word to be shifted in a SHIFTp transition) in combination with neighboring words, word prefixes, word suffixes, score differences and tag rank.",
                    "sid": 100,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "limited to certain first- and second-order factors, we use features over second- and third-order factors as found in the parsers of Bohnet and Kuhn (2012).",
                    "sid": 101,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These features are scored as soon as the factors are completed, using a technique that is similar to what Hatori et al.",
                    "sid": 102,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) call delayed features, although they use it for part-of-speech tags in the lookahead while we use it for subgraphs of the dependency tree.",
                    "sid": 103,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Cluster features, finally, are features over word clusters, as first used by Koo et al.",
                    "sid": 104,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2008), which replace part-of-speech tag features.2 We use a hash kernel to map features to weights.",
                    "sid": 105,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It has been observed that most of the computing time in feature-rich parsers is spent retrieving the index of each feature in the weight vector (Bohnet, 2010).",
                    "sid": 106,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is usually done via a hash table, but significant speedups can be achieved by using a hash kernel, which simply replaces table lookup by a hash function (Bloom, 1970; Shi et al., 2009; Bohnet, 2010).",
                    "sid": 107,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The price to pay for these speedups is that there may be collisions, so that different features are mapped to the same index, but this is often compensated by the fact that the lower time and memory requirements of the hash kernel enables the use of negative features, that is, features that are never seen in the training set but occur in erroneous hypotheses at training time and can therefore be helpful also at inference time.",
                    "sid": 108,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a result, the hash kernel often improves accuracy as well as efficiency compared to traditional techniques that only make use of features that occur in gold standard parses (Bohnet, 2010).",
                    "sid": 109,
                    "ssid": 88,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "experiments. ",
            "number": "3",
            "sents": [
                {
                    "text": "We have evaluated the model for joint tagging and dependency parsing on four typologically diverse languages: Chinese, Czech, English, and German.",
                    "sid": 110,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.1 Setup.",
                    "sid": 111,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Most of the experiments use the CoNLL 2009 data sets with the training, development and test s Finally, in some experiments, we make use of two plit used in the Shared Task (Hajic\u02c7 et al., 2009), additional feature sets, which we call graph features (G) and cluster features (C), respectively.",
                    "sid": 112,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Graph features are defined over the factors of a graph-based dependency parser, which was shown to improve the accuracy of a transition-based parser by Zhang and Clark (2008).",
                    "sid": 113,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, while their features were but for better comparison with previous work we also report results for the standard benchmark data sets for Chinese and English.",
                    "sid": 114,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For Chinese, this is the Penn Chinese Treebank 5.1 (CTB5), converted 2 For replicability, a complete description of all features can be found at http://stp.lingfil.uu.se/\u223cnivre/exp/emnlp12.html.",
                    "sid": 115,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Par ser k \u03b1 C h i n e s e TLA S LAS UAS POS C z e c h TLA S LAS UAS POS E n g l i s h TLA S LAS UAS POS G e r m a n TLA S LAS UAS POS 1 0.0 73.",
                    "sid": 116,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "85 76.",
                    "sid": 117,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "12 80.",
                    "sid": 118,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "01 92.",
                    "sid": 119,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "78 82.",
                    "sid": 120,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "36 82.",
                    "sid": 121,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "65 88.",
                    "sid": 122,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "03 93.",
                    "sid": 123,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "26 85.",
                    "sid": 124,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "82 87.",
                    "sid": 125,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "17 90.",
                    "sid": 126,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "41 97.",
                    "sid": 127,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "32 85.",
                    "sid": 128,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "08 86.",
                    "sid": 129,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "60 89.",
                    "sid": 130,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "17 97.",
                    "sid": 131,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "24 2 0.1 74.",
                    "sid": 132,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "39 76.",
                    "sid": 133,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "52 80.",
                    "sid": 134,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "41 93.",
                    "sid": 135,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "37 82.",
                    "sid": 136,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "74 83.",
                    "sid": 137,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "01 88.",
                    "sid": 138,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "34 99.",
                    "sid": 139,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "39 86.",
                    "sid": 140,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "43 87.",
                    "sid": 141,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "79 91.",
                    "sid": 142,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "02 97.",
                    "sid": 143,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "49 86.",
                    "sid": 144,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "12 87.",
                    "sid": 145,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "22 89.",
                    "sid": 146,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "69 97.",
                    "sid": 147,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "85 3 0.1 3 0.2 3 0.3 3 0.4 74.",
                    "sid": 148,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "47 76.",
                    "sid": 149,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "63 80.",
                    "sid": 150,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "50 93.",
                    "sid": 151,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "38 74.",
                    "sid": 152,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "35 76.",
                    "sid": 153,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "48 80.",
                    "sid": 154,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "38 93.",
                    "sid": 155,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "43 74.",
                    "sid": 156,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "18 76.",
                    "sid": 157,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "33 80.",
                    "sid": 158,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "28 93.",
                    "sid": 159,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "48 82.",
                    "sid": 160,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "76 82.",
                    "sid": 161,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "97 88.",
                    "sid": 162,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "33 99.",
                    "sid": 163,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "40 82.",
                    "sid": 164,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "85 83.",
                    "sid": 165,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "11 88.",
                    "sid": 166,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "44 99.",
                    "sid": 167,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "32 82.",
                    "sid": 168,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "78 83.",
                    "sid": 169,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "05 88.",
                    "sid": 170,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "38 99.",
                    "sid": 171,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "33 86.",
                    "sid": 172,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "40 87.",
                    "sid": 173,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "78 90.",
                    "sid": 174,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "99 97.",
                    "sid": 175,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "43 86.",
                    "sid": 176,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "35 87.",
                    "sid": 177,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "79 91.",
                    "sid": 178,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "01 97.",
                    "sid": 179,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "52 85.",
                    "sid": 180,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "94 87.",
                    "sid": 181,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "57 90.",
                    "sid": 182,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "87 96.",
                    "sid": 183,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "97 86.",
                    "sid": 184,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "03 87.",
                    "sid": 185,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "27 89.",
                    "sid": 186,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "60 97.",
                    "sid": 187,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "74 86.",
                    "sid": 188,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "24 87.",
                    "sid": 189,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "37 89.",
                    "sid": 190,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "72 97.",
                    "sid": 191,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "90 86.",
                    "sid": 192,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "35 87.",
                    "sid": 193,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "46 89.",
                    "sid": 194,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "86 97.",
                    "sid": 195,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "90 86.",
                    "sid": 196,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "14 87.",
                    "sid": 197,
                    "ssid": 88,
                    "kind_of_tag": "s"
                },
                {
                    "text": "23 89.",
                    "sid": 198,
                    "ssid": 89,
                    "kind_of_tag": "s"
                },
                {
                    "text": "66 97.",
                    "sid": 199,
                    "ssid": 90,
                    "kind_of_tag": "s"
                },
                {
                    "text": "79 Table 1: Accuracy scores for the CoNLL 2009 shared task development sets as a function of the number of tags k and the score threshold \u03b1.",
                    "sid": 200,
                    "ssid": 91,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Beam parameters fixed at b1 = 40, b2 = 4.",
                    "sid": 201,
                    "ssid": 92,
                    "kind_of_tag": "s"
                },
                {
                    "text": "with the head-finding rules and conversion tools of Zhang and Clark (2008), and with the same split as in Zhang and Clark (2008) and Li et al.",
                    "sid": 202,
                    "ssid": 93,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011).3 For English, this is the WSJ section of the Penn Tree- bank, converted with the head-finding rules of Yamada and Matsumoto (2003) and the labeling rules of Nivre (2006).4 In order to assign k-best part-of-speech tags and scores to words in the training set, we used a per- ceptron tagger with 10-fold jackknifing.",
                    "sid": 203,
                    "ssid": 94,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The same type of tagger was trained on the entire training set in order to supply tags for the development and test sets.",
                    "sid": 204,
                    "ssid": 95,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The feature set of the tagger was optimized for English and German and provides state-of-the- art accuracy for these two languages.",
                    "sid": 205,
                    "ssid": 96,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The 1-best tagging accuracy for section 23 of the Penn Tree- bank is 97.28, which is on a par with Toutanova et al.",
                    "sid": 206,
                    "ssid": 97,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2003).",
                    "sid": 207,
                    "ssid": 98,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For German, we obtain a tagging accuracy of 97.24, which is close to the 97.39 achieved by the RFTagger (Schmid and Laws, 2008), which to our knowledge is the best tagger for German.5 The results are not directly comparable to the RFTagger as it was evaluated on a different part of the Tiger Treebank and trained on a larger part of the Tree- bank.",
                    "sid": 208,
                    "ssid": 99,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We could not use the larger training set as it contains the test set of the CoNLL 2009 data that we use to evaluate the joint model.",
                    "sid": 209,
                    "ssid": 100,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For Czech, the 1- best tagging accuracy is 99.11 and for Chinese 92.65 on the CoNLL 2009 test set.",
                    "sid": 210,
                    "ssid": 101,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We trained parsers with 25 iterations and report 3 Training: 001\u2013815, 1001\u20131136.",
                    "sid": 211,
                    "ssid": 102,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Development: 886\u2013931,.",
                    "sid": 212,
                    "ssid": 103,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1148\u20131151.",
                    "sid": 213,
                    "ssid": 104,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Test: 816\u2013885, 1137\u20131147.",
                    "sid": 214,
                    "ssid": 105,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 The RFTagger can take advantage of an additional lexicon and then reaches 97.97.",
                    "sid": 215,
                    "ssid": 106,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The lexicon supplies entries for addi results for the model obtained after the last iteration.",
                    "sid": 216,
                    "ssid": 107,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For cluster features, available only for English and German, we used standard Brown clusters based on the English and German Gigaword Corpus.",
                    "sid": 217,
                    "ssid": 108,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We restricted the vocabulary to words that occur at least 10 times, used 800 clusters, and took cluster prefixes of length 6 to define features.",
                    "sid": 218,
                    "ssid": 109,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We report the following evaluation metrics: part- of-speech accuracy (POS), unlabeled attachment score (UAS), labeled attachment score (LAS), and tagged labeled attachment score (TLAS).",
                    "sid": 219,
                    "ssid": 110,
                    "kind_of_tag": "s"
                },
                {
                    "text": "TLAS is a new metric defined as the percentage of words that are assigned the correct part-of-speech tag, the correct head and the correct dependency label.",
                    "sid": 220,
                    "ssid": 111,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In line with previous work, punctuation is included in the evaluation for the CoNLL data sets but excluded for the two benchmark data sets.",
                    "sid": 221,
                    "ssid": 112,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.2 Results.",
                    "sid": 222,
                    "ssid": 113,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 1 presents results on the development sets of the CoNLL 2009 shared task with varying values of the two tag parameters k (number of candidates) and \u03b1 (maximum score difference to 1-best tag) and beam parameters fixed at b1 = 40 and b2 = 4.",
                    "sid": 223,
                    "ssid": 114,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use the combined TLAS score on the development set to select the optimal settings for each language.",
                    "sid": 224,
                    "ssid": 115,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For Chinese, we obtain the best result with 3 tags and a threshold of 0.1.6 Compared to the baseline, we observe a POS improvement of 0.60 and a LAS improvement of 0.51.",
                    "sid": 225,
                    "ssid": 116,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For Czech, we get the best T- LAS with k = 3 and \u03b1 = 0.2, where POS improves by 0.06 and LAS by 0.46.",
                    "sid": 226,
                    "ssid": 117,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For English, the best setting is k = 2 and \u03b1 = 0.1 with a POS improvement of 0.17 and a LAS improvement of 0.62.",
                    "sid": 227,
                    "ssid": 118,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For German, finally, we see the greatest improvement with k = 3 tional words that are not found in the training corpus and additional tags for words that do occur in the training data (Schmid and Laws, 2008).",
                    "sid": 228,
                    "ssid": 119,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6 While tagging accuracy (POS) increases with larger values.",
                    "sid": 229,
                    "ssid": 120,
                    "kind_of_tag": "s"
                },
                {
                    "text": "of \u03b1, TLAS decreases because of a drop in LAS.",
                    "sid": 230,
                    "ssid": 121,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Par ser C h i n e s e TLA S LAS UAS POS C z e c h TLA S LAS UAS POS E n g l i s h TLA S LAS UAS POS G e r m a n TLA S LAS UAS POS Ges mun do et al.",
                    "sid": 231,
                    "ssid": 122,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(20 09) Boh net (20 10) 7 6 . 1 1 9 2 . 3 7 7 6 . 9 9 9 2 . 3 7 8 0 . 3 8 9 9 . 3 3 8 0 . 9 6 9 9 . 3 3 8 8 . 7 9 9 7 . 4 8 9 0 . 3 3 9 7 . 4 8 8 7 . 2 8 9 5 . 4 6 8 8 . 0 6 9 5 . 4 6 Base line (k = 1), b1 = 40 Best dev setti ng, b1 = 40 73.6 6 76.5 5 80.7 7 92.",
                    "sid": 232,
                    "ssid": 123,
                    "kind_of_tag": "s"
                },
                {
                    "text": "65 74.7 2 77.0 0 81.1 8 93.",
                    "sid": 233,
                    "ssid": 124,
                    "kind_of_tag": "s"
                },
                {
                    "text": "06 82.0 7 82.4 4 87.8 3 99.",
                    "sid": 234,
                    "ssid": 125,
                    "kind_of_tag": "s"
                },
                {
                    "text": "11 82.5 6 82.7 0 88.0 7 99.",
                    "sid": 235,
                    "ssid": 126,
                    "kind_of_tag": "s"
                },
                {
                    "text": "32 87.8 9 89.1 9 91.7 4 97.",
                    "sid": 236,
                    "ssid": 127,
                    "kind_of_tag": "s"
                },
                {
                    "text": "57 88.2 6 89.5 4 92.0 6 97.",
                    "sid": 237,
                    "ssid": 128,
                    "kind_of_tag": "s"
                },
                {
                    "text": "77 86.1 1 87.7 8 90.1 3 97.",
                    "sid": 238,
                    "ssid": 129,
                    "kind_of_tag": "s"
                },
                {
                    "text": "24 86.9 1 88.2 3 90.4 3 97.",
                    "sid": 239,
                    "ssid": 130,
                    "kind_of_tag": "s"
                },
                {
                    "text": "63 Addi ng G, b1 = 80 Addi ng G+C , b1 = 80 75.8 4 78.5 1 82.5 2 93.",
                    "sid": 240,
                    "ssid": 131,
                    "kind_of_tag": "s"
                },
                {
                    "text": "19 83.3 8 83.7 3 88.8 2 99.",
                    "sid": 241,
                    "ssid": 132,
                    "kind_of_tag": "s"
                },
                {
                    "text": "33 88.9 2 90.2 0 92.6 0 97.",
                    "sid": 242,
                    "ssid": 133,
                    "kind_of_tag": "s"
                },
                {
                    "text": "77 89.2 2 90.6 0 92.8 7 97.",
                    "sid": 243,
                    "ssid": 134,
                    "kind_of_tag": "s"
                },
                {
                    "text": "84 87.8 6 89.0 5 91.1 6 97.",
                    "sid": 244,
                    "ssid": 135,
                    "kind_of_tag": "s"
                },
                {
                    "text": "78 88.3 1 89.3 8 91.3 7 98.",
                    "sid": 245,
                    "ssid": 136,
                    "kind_of_tag": "s"
                },
                {
                    "text": "05 Table 2: Accuracy scores for the CoNLL 2009 shared task test sets.",
                    "sid": 246,
                    "ssid": 137,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Rows 1\u20132: Top performing systems in the shared CoNLL Shared Task 2009; Gesmundo et al.",
                    "sid": 247,
                    "ssid": 138,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2009) was placed first in the shared task; for Bohnet (2010), we include the updated scores later reported due to some improvements of the parser.",
                    "sid": 248,
                    "ssid": 139,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Rows 3\u20134: Baseline (k = 1) and best settings for k and \u03b1 on development set.",
                    "sid": 249,
                    "ssid": 140,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Rows 5\u20136: Wider beam (b1 = 80) and added graph features (G) and cluster features (C).",
                    "sid": 250,
                    "ssid": 141,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Second beam parameter b2 fixed at 4 in all cases.",
                    "sid": 251,
                    "ssid": 142,
                    "kind_of_tag": "s"
                },
                {
                    "text": "and \u03b1 = 0.3, where POS improves by 0.66 and LAS by 0.86.",
                    "sid": 252,
                    "ssid": 143,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 2 shows the results on the CoNLL 2009 test sets.",
                    "sid": 253,
                    "ssid": 144,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For all languages except English, we obtain state-of-the-art results already with b1 = 40 (row 4), and for all languages both tagging and parsing accuracy improve compared to the baseline (row 3).",
                    "sid": 254,
                    "ssid": 145,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The improvement in TLAS is statistically significant with p < 0.01 for all languages (paired t-test).",
                    "sid": 255,
                    "ssid": 146,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Row 5 shows the scores with a beam of 80 and the additional graph features.",
                    "sid": 256,
                    "ssid": 147,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Here the LAS scores for Chinese, Czech and German are higher than the best results on the CoNLL 2009 data sets, and the score for English is highly competitive.",
                    "sid": 257,
                    "ssid": 148,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For Chinese, we achieve 78.51 LAS, which is 1.5 percentage points higher than the reference score, while the POS score is 0.54 higher than our baseline.",
                    "sid": 258,
                    "ssid": 149,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For Czech, we get 83.73 LAS, which is by far the highest score reported for this data set, together with state-of-the-art POS accuracy.",
                    "sid": 259,
                    "ssid": 150,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For German, we obtain 89.05 LAS and 97.78 POS, which in both cases is substantially better than in the CoNLL shared task.",
                    "sid": 260,
                    "ssid": 151,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We believe it is also the highest POS accuracy ever reported for a tagger/parser trained only on the Tiger Treebank.",
                    "sid": 261,
                    "ssid": 152,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Row 6, finally, presents results with added cluster features for English and German, which results in additional improvements in all metrics.",
                    "sid": 262,
                    "ssid": 153,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 3 gives the results for the Penn Treebank converted with the head-finding rules of Yamada and Matsumoto (2003) and the labeling rules of Nivre (2006).",
                    "sid": 263,
                    "ssid": 154,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use k = 3 and \u03b1 = 0.4, which gave the best results on the development set.",
                    "sid": 264,
                    "ssid": 155,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The UAS improves by 0.24 when we do joint tagging and parsing.",
                    "sid": 265,
                    "ssid": 156,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The POS accuracy improves slightly by 0.12 Par ser TLA S UA S LA S PO S Mc Don ald et al.",
                    "sid": 266,
                    "ssid": 157,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(20 05) McD onal d and Pere ira (200 6) Zha ng and Clar k (20 08) Hua ng and Sag ae (20 10) K o o a n d C o l l i n s ( 2 0 1 0 ) Z h a n g a n d N i v r e ( 2 0 1 1 ) M a r t i n s e t a l .",
                    "sid": 267,
                    "ssid": 158,
                    "kind_of_tag": "s"
                },
                {
                    "text": "( 2 0 1 0 ) 90.",
                    "sid": 268,
                    "ssid": 159,
                    "kind_of_tag": "s"
                },
                {
                    "text": "9 91.",
                    "sid": 269,
                    "ssid": 160,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 92.",
                    "sid": 270,
                    "ssid": 161,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 92.",
                    "sid": 271,
                    "ssid": 162,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 93.0 4 92.",
                    "sid": 272,
                    "ssid": 163,
                    "kind_of_tag": "s"
                },
                {
                    "text": "9 93.2 6 Koo et al.",
                    "sid": 273,
                    "ssid": 164,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(200 8) \u2020 Carr eras et al.",
                    "sid": 274,
                    "ssid": 165,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(200 8) \u2020 Suz uki et al.",
                    "sid": 275,
                    "ssid": 166,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(20 09) \u2020 93.1 6 93.",
                    "sid": 276,
                    "ssid": 167,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 93.7 9 Bas elin e (k = 1), b1 = 40 Best dev setti ng, b1 = 40 89.",
                    "sid": 277,
                    "ssid": 168,
                    "kind_of_tag": "s"
                },
                {
                    "text": "42 89.",
                    "sid": 278,
                    "ssid": 169,
                    "kind_of_tag": "s"
                },
                {
                    "text": "75 92.7 9 93.0 3 91.7 1 91.9 2 97.2 8 97.4 0 Add ing G, b1 = 40 Add ing G+ C, b1 = 80 \u2020 90.",
                    "sid": 279,
                    "ssid": 170,
                    "kind_of_tag": "s"
                },
                {
                    "text": "12 90.",
                    "sid": 280,
                    "ssid": 171,
                    "kind_of_tag": "s"
                },
                {
                    "text": "41 93.3 8 93.6 7 92.4 4 92.6 8 97.3 3 97.4 2 Table 3: Accuracy scores for WSJPTB converted with head rules of Yamada and Matsumoto (2003) and labeling rules of Nivre (2006).",
                    "sid": 281,
                    "ssid": 172,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Best dev setting: k = 3, \u03b1 = 0.4.",
                    "sid": 282,
                    "ssid": 173,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Results marked with \u2020 use additional information sources and are not directly comparable to the others.",
                    "sid": 283,
                    "ssid": 174,
                    "kind_of_tag": "s"
                },
                {
                    "text": "but to a lower degree than for the English CoNL- L data where we observed an improvement of 0.20.",
                    "sid": 284,
                    "ssid": 175,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Nonetheless, the improvement in the joint TLAS score is statistically significant at p < 0.01 (paired t-test).",
                    "sid": 285,
                    "ssid": 176,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our joint tagger and dependency parser with graph features gives very competitive unlabeled dependency scores for English with 93.38 UAS.",
                    "sid": 286,
                    "ssid": 177,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To the best of our knowledge, this is the highest score reported for a (transition-based) dependency parser that does not use additional information sources.",
                    "sid": 287,
                    "ssid": 178,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By adding cluster features and widening the beam to b1 = 80, we achieve 93.67 UAS.",
                    "sid": 288,
                    "ssid": 179,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also obtain a POS accuracy of 97.42, which is on a par with the best results obtained using semi-supervised taggers Par ser TL AS UA S LA S PO S MS TP ars er1 MS TP ars er2 Li et al.",
                    "sid": 289,
                    "ssid": 180,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(20 11) 3rd ord er Li et al.",
                    "sid": 290,
                    "ssid": 181,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(20 11) 2nd ord er Hat ori et al.",
                    "sid": 291,
                    "ssid": 182,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(20 11) HS Hat ori et al.",
                    "sid": 292,
                    "ssid": 183,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(20 11) ZN 75.",
                    "sid": 293,
                    "ssid": 184,
                    "kind_of_tag": "s"
                },
                {
                    "text": "56 77.",
                    "sid": 294,
                    "ssid": 185,
                    "kind_of_tag": "s"
                },
                {
                    "text": "73 80.",
                    "sid": 295,
                    "ssid": 186,
                    "kind_of_tag": "s"
                },
                {
                    "text": "60 80.",
                    "sid": 296,
                    "ssid": 187,
                    "kind_of_tag": "s"
                },
                {
                    "text": "55 79.",
                    "sid": 297,
                    "ssid": 188,
                    "kind_of_tag": "s"
                },
                {
                    "text": "60 81.",
                    "sid": 298,
                    "ssid": 189,
                    "kind_of_tag": "s"
                },
                {
                    "text": "20 93.",
                    "sid": 299,
                    "ssid": 190,
                    "kind_of_tag": "s"
                },
                {
                    "text": "51 93.",
                    "sid": 300,
                    "ssid": 191,
                    "kind_of_tag": "s"
                },
                {
                    "text": "51 92.",
                    "sid": 301,
                    "ssid": 192,
                    "kind_of_tag": "s"
                },
                {
                    "text": "80 93.",
                    "sid": 302,
                    "ssid": 193,
                    "kind_of_tag": "s"
                },
                {
                    "text": "08 94.",
                    "sid": 303,
                    "ssid": 194,
                    "kind_of_tag": "s"
                },
                {
                    "text": "01 93.",
                    "sid": 304,
                    "ssid": 195,
                    "kind_of_tag": "s"
                },
                {
                    "text": "94 Bas elin e (k = 1), b1 = 40 Bes t dev setti ng, b1 = 40 61.",
                    "sid": 305,
                    "ssid": 196,
                    "kind_of_tag": "s"
                },
                {
                    "text": "95 62.",
                    "sid": 306,
                    "ssid": 197,
                    "kind_of_tag": "s"
                },
                {
                    "text": "54 80.",
                    "sid": 307,
                    "ssid": 198,
                    "kind_of_tag": "s"
                },
                {
                    "text": "33 80.",
                    "sid": 308,
                    "ssid": 199,
                    "kind_of_tag": "s"
                },
                {
                    "text": "59 76.",
                    "sid": 309,
                    "ssid": 200,
                    "kind_of_tag": "s"
                },
                {
                    "text": "79 77.",
                    "sid": 310,
                    "ssid": 201,
                    "kind_of_tag": "s"
                },
                {
                    "text": "06 92.",
                    "sid": 311,
                    "ssid": 202,
                    "kind_of_tag": "s"
                },
                {
                    "text": "81 93.",
                    "sid": 312,
                    "ssid": 203,
                    "kind_of_tag": "s"
                },
                {
                    "text": "11 Add ing G, b1 = 80 63.",
                    "sid": 313,
                    "ssid": 204,
                    "kind_of_tag": "s"
                },
                {
                    "text": "20 81.",
                    "sid": 314,
                    "ssid": 205,
                    "kind_of_tag": "s"
                },
                {
                    "text": "42 77.",
                    "sid": 315,
                    "ssid": 206,
                    "kind_of_tag": "s"
                },
                {
                    "text": "91 93.",
                    "sid": 316,
                    "ssid": 207,
                    "kind_of_tag": "s"
                },
                {
                    "text": "24 Table 4: Accuracy scores for Penn Chinese Treebank converted with the head rules of Zhang and Clark (2008).",
                    "sid": 317,
                    "ssid": 208,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Best dev setting: k = 3, \u03b1 = 0.1.",
                    "sid": 318,
                    "ssid": 209,
                    "kind_of_tag": "s"
                },
                {
                    "text": "MSTParser results from Li et al.",
                    "sid": 319,
                    "ssid": 210,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011).",
                    "sid": 320,
                    "ssid": 211,
                    "kind_of_tag": "s"
                },
                {
                    "text": "UAS scores from Li et al.",
                    "sid": 321,
                    "ssid": 212,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) and Ha- tori et al.",
                    "sid": 322,
                    "ssid": 213,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) recalculated from the separate accuracy scores for root words and non-root words reported in the original papers.",
                    "sid": 323,
                    "ssid": 214,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(S\u00f8gaard, 2011).",
                    "sid": 324,
                    "ssid": 215,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 4 shows the results for the Chinese Penn Treebank CTB 5.1 together with related work.",
                    "sid": 325,
                    "ssid": 216,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In experiments with the development set, we could confirm the results from the Chinese CoNLL data set and obtained the best results with the same settings (k = 3, \u03b1 = 0.1).",
                    "sid": 326,
                    "ssid": 217,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With b1 = 40, UAS improves by 0.25 and POS by 0.30, and the TLAS improvement is again highly significant (p < 0.01, paired t-test).",
                    "sid": 327,
                    "ssid": 218,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We get the highest UAS, 81.42, with a beam of 80 and added graph features, in which case POS accuracy increases from 92.81 to 93.24.",
                    "sid": 328,
                    "ssid": 219,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since our tagger was not optimized for Chinese, we have lower baseline results for the tagger than both Li et al.",
                    "sid": 329,
                    "ssid": 220,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) and Hatori et al.",
                    "sid": 330,
                    "ssid": 221,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) but still manage to achieve the highest reported UAS.",
                    "sid": 331,
                    "ssid": 222,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The speed of the joint tagger and dependency parser is quite reasonable with about 0.4 seconds per sentence on the WSJPTB test set, given that we perform tagging and labeled parsing with a beam of 80 while incorporating the features of a third-order graph-based model.",
                    "sid": 332,
                    "ssid": 223,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Experiments were performed on a computer with an Intel i73960X CPU (3.3 GHz and 6 cores).",
                    "sid": 333,
                    "ssid": 224,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These performance values are preliminary since we are still working on the speedup of the parser.",
                    "sid": 334,
                    "ssid": 225,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.3 Analysis.",
                    "sid": 335,
                    "ssid": 226,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to better understand the benefits of the joint model, we performed an error analysis for German Table 5: Selected entries from the confusion matrix for parts of speech in German with F-scores for the left-hand- side category.",
                    "sid": 336,
                    "ssid": 227,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ADJ* (ADJD or ADJA) = adjective; ADV = adverb; ART = determiner; APPR = preposition; NE = proper noun; NN = common noun; PRELS = relative pronoun; VVFIN = finite verb; VVINF = non-finite verb; VAFIN = finite auxiliary verb; VAINF = non-finite auxiliary verb; VVPP = participle; XY = not a word.",
                    "sid": 337,
                    "ssid": 228,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use \u03b1* to denote the set of categories with \u03b1 as a prefix.",
                    "sid": 338,
                    "ssid": 229,
                    "kind_of_tag": "s"
                },
                {
                    "text": "and English, where we compared the baseline and the joint model with respect to F-scores for individual part-of-speech categories and dependency labels.",
                    "sid": 339,
                    "ssid": 230,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the part-of-speech categories, we found an improvement across the board for both languages, with no category having a significant decrease in F-score, but we also found some interesting patterns for categories that improved more than the average.",
                    "sid": 340,
                    "ssid": 231,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 5 shows selected entries from the confusion matrix for German, where we see substantial improvements for finite and non-finite verbs, which are often morphologically ambiguous but which can be disambiguated using syntactic context.",
                    "sid": 341,
                    "ssid": 232,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also see improved accuracies for common and proper nouns, which are both capitalized in standard German orthography and therefore often mistagged, and for relative pronouns, which are less often confused for determiners in the joint model.",
                    "sid": 342,
                    "ssid": 233,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 6 gives a similar snapshot for English, and we again see improvements for verb categories that are often morphologically ambiguous, such as past participles, which can be confused for past tense verbs, and present tense verbs in third person singular, which can be confused for nouns.",
                    "sid": 343,
                    "ssid": 234,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also see some improvement for the singular noun catego C o n f u s i o n B a s e l i n e Freq F scor e J o i n t Freq F scor e VB N \u2192 VB D VB N \u2192 JJ|V B|V BP| NN 4 0 90.5 1 3 1 9 91.5 1 8 VB Z \u2192 NN| NN S VB Z \u2192 POS |JJ| RB 1 9 97.8 6 1 3 98.3 6 NN \u2192 VB G|V B|V BN| VB D NN \u2192 JJ|J JR NN \u2192 NN *|R B|I N|D T 7 2 7 9 96.8 5 8 5 8 6 9 97.2 5 7 RB \u2192 IN RB \u2192 JJ*| RP| NN *|R BR| UH 12 6 92.4 8 6 9 3 92.9 8 9 Table 6: Selected entries from the confusion matrix for parts of speech in English with F-scores for the left-hand- side category.",
                    "sid": 344,
                    "ssid": 235,
                    "kind_of_tag": "s"
                },
                {
                    "text": "DT = determiner; IN = preposition or subordinating conjunction; JJ = adjective; JJR = comparative adjective; NN = singular or mass noun; NNS = plural noun; POS = possessive clitic; RB = adverb; RBR = comparative adverb; RP = particle; UH = interjection; VB = base form verb; VBD = past tense verb; VBG = gerund or present participle; VBN = past participle; VBP = present tense verb, not 3rd person singular; VBZ = present tense verb, 3rd person singular.",
                    "sid": 345,
                    "ssid": 236,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use \u03b1* to denote the set of categories with \u03b1 as a prefix.",
                    "sid": 346,
                    "ssid": 237,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ry and for adverbs, which are less often confused for prepositions or subordinating conjunctions thanks to the syntactic information in the joint model.",
                    "sid": 347,
                    "ssid": 238,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For dependency labels, it is hard to extract any striking patterns and it seems that we mainly see an improvement in overall parsing accuracy thanks to less severe tagging errors.",
                    "sid": 348,
                    "ssid": 239,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, it is worth observing that, for both English and German, we see significant F-score improvements for the core gram matical functions subject (91.3 \u2192 92.1 for German, 95.6 \u2192 96.1 for English) and object (86.9 \u2192 87.9 for German, 90.2 \u2192 91.9 for English).",
                    "sid": 349,
                    "ssid": 240,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "related work. ",
            "number": "4",
            "sents": [
                {
                    "text": "Our work is most closely related to Lee et al.",
                    "sid": 350,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011), Li et al.",
                    "sid": 351,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) and Hatori et al.",
                    "sid": 352,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011), who all present discriminative models for joint tagging and dependency parsing.",
                    "sid": 353,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, all three models only perform unlabeled parsing, while our model incorporates dependency labels into the parsing process.",
                    "sid": 354,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Whereas Lee et al.",
                    "sid": 355,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) and Li et al.",
                    "sid": 356,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) take a graph-based approach to dependency parsing, Ha- tori et al.",
                    "sid": 357,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) use a transition-based model similar to ours but limited to projective dependency trees.",
                    "sid": 358,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Both Li et al.",
                    "sid": 359,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) and Hatori et al.",
                    "sid": 360,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) only evaluate their model on Chinese, and of these only Hatori et al.",
                    "sid": 361,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) report consistent improvements in both tagging and parsing accuracy.",
                    "sid": 362,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Like our system, the parser of Lee et al.",
                    "sid": 363,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) can handle non- projective trees and experimental results are presented for four languages, but their graph-based model is relatively simple and the baselines therefore well below the state of the art.",
                    "sid": 364,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We are thus the first to show consistent improvements in both tagging and (labeled) parsing accuracy across typologically diverse languages at the state-of-the-art level.",
                    "sid": 365,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, the capacity to handle non-projective dependencies, which is crucial to attain good performance on Czech and German, does not seem to hurt performance on English and Chinese, where the benchmark sets contain only projective trees.",
                    "sid": 366,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The use of beam search in transition-based dependency parsing in order to mitigate the problem of error propagation was first proposed by Johansson and Nugues (2006), although they still used a locally trained model.",
                    "sid": 367,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Globally normalized models were first explored by Titov and Henderson (2007), who were also the first to use a parameterized SHIFT transition like the one found in both Hatori et al.",
                    "sid": 368,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011) and our own work, although Titov and Henderson (2007) used it to define a generative model by pa- rameterizing the SHIFT transition by an input word.",
                    "sid": 369,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Zhang and Clark (2008) was the first to combine beam search with a globally normalized discrimi- native model, using structured perceptron learning and the early update strategy of Collins and Roark (2004), and also explored the addition of graph- based features to a transition-based parser.",
                    "sid": 370,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This approach was further pursued in Zhang and Clark (2011) and was used by Zhang and Nivre (2011) to achieve state-of-the-art results in dependency parsing for both Chinese and English through the addition of rich non-local features.",
                    "sid": 371,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Huang and Sagae (2010) combined structured perceptron learning and beam search with the use of a graph-structured stack to allow ambiguity packing in the beam, a technique that was reused by Hatori et al.",
                    "sid": 372,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2011).",
                    "sid": 373,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, as noted in the introduction, although joint tagging and parsing is rare in dependency parsing, most state-of-the-art parsers based on PCFG models naturally incorporate part-of-speech tagging and usually achieve better parsing accuracy (albeit not always tagging accuracy) with a joint model than with a pipeline approach (Collins, 1997; Charniak, 2000; Charniak and Johnson, 2005; Petrov et al., 2006).",
                    "sid": 374,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Models that in addition incorporate morphological analysis and segmentation have been explored by Tsarfaty (2006), Cohen and Smith (2007), and Goldberg and Tsarfaty (2008) with special reference to Hebrew parsing.",
                    "sid": 375,
                    "ssid": 26,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "conclusion. ",
            "number": "5",
            "sents": [
                {
                    "text": "We have presented the first system for joint part- of-speech tagging and labeled dependency parsing with non-projective dependency trees.",
                    "sid": 376,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Evaluation on four languages shows consistent improvements in both tagging and parsing accuracy over a pipeline system with state-of-the-art results across the board.",
                    "sid": 377,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The error analysis reveals improvements in tagging accuracy for syntactically central categories, mainly verbs, with improvement in syntactic accuracy for core grammatical functions as a result.",
                    "sid": 378,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In future work we intend to explore joint models that incorporate not only basic part-of-speech tags but also more fine-grained morphological features.",
                    "sid": 379,
                    "ssid": 4,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}