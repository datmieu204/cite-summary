{
    "ID": "D07-1076",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "This paper proposes a tree kernel with context- sensitive structured parse tree information for relation extraction.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It resolves two critical problems in previous tree kernels for relation extraction in two ways.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First, it automatically determines a dynamic context-sensitive tree span for relation extraction by extending the widely -used Shortest Path-enclosed Tree (SPT) to include necessary context information outside SPT.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Second, it proposes a context-sensitive convolution tree kernel, which enumerates both context-free and context- sensitive sub-trees by consid ering their ancestor node paths as their contexts.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, this paper evaluates the complementary nature between our tree kernel and a state-of-the-art linear kernel.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Evaluation on the ACE RDC corpora shows that our dynamic context-sensitive tree span is much more s uitable for relation extraction than SPT and our tree kernel outperforms the state-of-the-art Collins and Duffy\u2019s convolution tree kernel.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It also shows that our tree kernel achieves much better performance than the state-of-the-art linear kernels . Finally, it shows that feature-based and tree kernel-based methods much complement each other and the composite kernel can well integrate both flat and structured features.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Relation extraction is to find various predefined semantic relations between pairs of entities in text.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The research in relation extraction has been pr omoted by the Message Understanding Conferences (MUCs) (MUC, 19871998) and the NIST Automatic Content Extraction (ACE) program (ACE, 20022005).",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "According to the ACE Program, an entity is an object or a set of objects in the world and a relation is an explicitly or implicitly stated relationship among entities.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, the sentence \u201cBill Gates is the chairman and chief software architect of Microsoft Corporation.\u201d c onveys the ACE-style relation \u201cEMPLOYMENT.exec\u201d between the entities \u201cBill Gates\u201d (person name) and \u201cMicrosoft Corporation\u201d (organization name).",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Extraction of semantic relations between entities can be very useful in many applic a- tions such as question answering, e.g. to answer the query \u201cWho is the president of the United States?\u201d, and information retrieval, e.g. to expand the query \u201cGeorge W. Bush\u201dwith \u201cthe pres ident of the United States\u201dvia his relationship with \u201cthe United States\u201d.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Many researches have been done in relation extraction.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Among them, feature-based methods (Kambhatla 2004; Zhou et al., 2005) achieve certain success by employing a large amount of diverse linguistic features, varying from lexical knowledge, entity- related information to syntactic parse trees, dependency trees and semantic information . How ever, it is difficult for them to effectively capture struc tured parse tree information (Zhou et al 2005), which is critical for further performance improvement in relation extraction.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As an alternative to feature-based methods, tree kernel-based methods provide an elegant solution to explore implic itly structured features by directly computing the simila rity between two trees.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Although earlier researches (Zelenko et al 2003; Culotta and Sorensen 2004; Bunescu and Mooney 2005a) only achieve success on simple tasks and fail on complex tasks, such as the ACE RDC task, tree kernel-based methods achieve much progress recently.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As the state-of-the-art, Zhang et al (2006) applied the c onvolution tree kernel (Collins and Duffy 2001) and achieved comparable performance with a state-of-the- art linear kernel (Zhou et al 2005) on the 5 relation types in the ACE RDC 2003 corpus.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, there are two problems in Collins and Duffy\u2019s convolution tree kernel for relation extrac tion.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first is that the sub-trees enumerated in the tree kernel computation are context-free.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is, each sub-tree enumerated in the tree kernel computation 728 Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, pp.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "728\u2013736, Prague, June 2007.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Qc 2007 Association for Computational Linguistics does not consider the context information outside the sub-tree.",
                    "sid": 22,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The second is to dec ide a proper tree span in relation extraction.",
                    "sid": 23,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Zhang et al (2006) explored five tree spans in relation extraction and it was a bit surprising to find that the Shortest Path-enclosed Tree (SPT, i.e. the sub-tree enclosed by the shortest path linking two involved entities in the parse tree) performed best.",
                    "sid": 24,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is contrast to our intuition.",
                    "sid": 25,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, \u201cgot married\u201d is critical to determine the relationship between \u201cJohn\u201d and \u201cMary\u201din the sentence \u201cJohn and Mary got married\u2026 \u201d as shown in Figure 1(e).",
                    "sid": 26,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is obvious that the information contained in SPT (\u201cJohn and Marry\u201d) is not enough to determine their relationship.This paper proposes a context-sensitive convolu tion tree kernel for relation extraction to resolve the above two problems.",
                    "sid": 27,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It first automatically determines a dynamic context-sensitive tree span for relation extraction by extending the Shortest Path-enclosed Tree (SPT) to include necessary context information outside SPT.",
                    "sid": 28,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then it proposes a context -sensitive convolution tree kernel, whic h not only enumerates context- free sub-trees but also context -sensitive sub-trees by considering their ancestor node paths as their contexts.",
                    "sid": 29,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, this paper evaluates the complementary nature of different linear kernels and tree kernels via a composite kernel.",
                    "sid": 30,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The layout of this paper is as follows.",
                    "sid": 31,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Section 2, we review related work in more details.",
                    "sid": 32,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then, the dynamic context-sensitive tree span and the context- sensitive convolution tree ker nel are proposed in Section 3 while Section 4 shows the experimental results.",
                    "sid": 33,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, we conclude our work in Sec tion 5.",
                    "sid": 34,
                    "ssid": 34,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "related work. ",
            "number": "2",
            "sents": [
                {
                    "text": "The relation extraction task was first introduced as part of the Template Element task in MUC6 and then formulated as the Template Relation task in MUC7.",
                    "sid": 35,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since then, many methods, such as feature-based (Kambhatla 2004; Zhou et al 2005, 2006), tree kernel-based (Zelenko et al 2003; Culotta and Sorensen 2004; Bunescu and Mooney 2005a; Zhang et al 2006) and composite kernel-based (Zhao and Gris hman 2005; Zhang et al 2006), have been proposed in literature.",
                    "sid": 36,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the feature-based methods, Kambhatla (2004) employed Maximum Entropy models to combine diverse lexical, syntactic and semantic features in relation extrac tion, and achieved the F-measure of 52.8 on the 24 relation subtypes in the ACE RDC 2003 corpus.",
                    "sid": 37,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Zhou et al (2005) further systematically explored diverse features through a linear kernel and Support Vector Machines , and achieved the F measures of 68.0 and 55.5 on the 5 relation types and the 24 relation subtypes in the ACE RDC 2003 corpus respectively.",
                    "sid": 38,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One problem with the feature-based methods is that they need extensive feature engineering.",
                    "sid": 39,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Another problem is that, although they can explore some structured information in the parse tree (e.g. Kambhatla (2004) used the non-terminal path c onnecting the given two entities in a parse tree while Zhou et al.",
                    "sid": 40,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2005) introduced additional chunking features to enhance the performance), it is found difficult to well preserve structured information in the parse trees using the feature-based methods.",
                    "sid": 41,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Zhou et al (2006) further improved the performance by exploring the commonality among related classes in a class hierarchy using hierarchical learning strategy.",
                    "sid": 42,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As an alternative to the feature-based methods, the kernel-based methods (Haussler, 1999) have been proposed to implicitly explore various features in a high dimensional space by employing a kernel to calculate the similarity between two objects directly.",
                    "sid": 43,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, the kernel-based methods could be very effective at reducing the burden of feature engineering for structured objects in NLP researches, e.g. the tree structure in relation extraction.",
                    "sid": 44,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Zelenko et al.",
                    "sid": 45,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2003) proposed a kernel between two parse trees, which recursively matches nodes from roots to leaves in a top-down manner . For each pair of matched nodes, a subsequence kernel on their child nodes is invoked.",
                    "sid": 46,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They achieved quite success on two simple relation extraction tasks.",
                    "sid": 47,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Culotta and Sorensen (2004) extended this work to estimate similarity between augmented dependency trees and achieved the F-measure of 45.8 on the 5 relation types in the ACE RDC 2003 corpus.",
                    "sid": 48,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One problem with the above two tree kernels is that matched nodes must be at the same height and have the same path to the root node.",
                    "sid": 49,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Bunescu and Mooney (2005a) pr o- posed a shortest path dependency tree kernel, which just sums up the number of common word classes at each position in the two paths, and achieved the F-measure of 52.5 on the 5 relation types in the ACE RDC 2003 corpus.",
                    "sid": 50,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They argued that the information to model a relationship between two entities can be typically captured by the shortest path between them in the dependency graph.",
                    "sid": 51,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While the shortest path may not be able to well preserve structured dependency tree information, another problem with their kernel is that the two paths should have same length.",
                    "sid": 52,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This makes it s uffer from the similar behavior with that of Culotta and Sorensen (2004): high precision but very low recall.",
                    "sid": 53,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As the state-of-the-art tree kernel-based method, Zhang et al (2006) explored various structured feature spaces and used the convolution tree kernel over parse trees (Collins and Duffy 2001) to model syntactic structured information for relation extraction.",
                    "sid": 54,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They achieved the F -measures of 61.9 and 63.6 on the 5 relation types of the ACE RDC 2003 corpus and the 7 relation types of the ACE RDC 2004 corpus respectively without entity-related information while the F- measure on the 5 relation types in the ACE RDC2003 corpus reached 68.7 when entity-related infor mation was included in the parse tree.",
                    "sid": 55,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One problem with Collins and Duffy\u2019s convolution tree kernel is that the sub-trees involved in the tree kernel computation are context-free, that is, they do not consider the information outside the sub-trees.",
                    "sid": 56,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is different from the tree kernel in Culota and Sorensen (2004), where the sub-trees involved in the tree kernel computation are context -sensitive (that is, with the path from the tree root node to the sub-tree root node in consideration).",
                    "sid": 57,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Zhang et al (2006) also showed that the widely-used Shortest Path-enclosed Tree (SPT) performed best.",
                    "sid": 58,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One problem with SPT is that it fails to capture the contextual information outside the shortest path, which is important for relation extraction in many cases . Our random selection of 100 pos i- tive training instances from the ACE RDC 2003 training corpus shows that ~25% of the cases need contextual information outside the shortest path.",
                    "sid": 59,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Among other kernels , Bunescu and Mooney (2005b) proposed a subsequence kernel and applied it in protein interaction and ACE relation extraction tasks.In order to integrate the advantages of feature based and tree kernel-based methods, some researc hers have turned to composite kernel-based methods.",
                    "sid": 60,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Zhao and Grishman (2005) defined several feature- based composite kernels to integrate diverse features for relation extraction and achieved the F-measure of 70.4 on the 7 relation types of the ACE RDC 2004 corpus . Zhang et al (2006) proposed two composite kernels to integrate a linear kernel and Collins and Duffy\u2019s convolution tree kernel.",
                    "sid": 61,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It achieved the F- measure of 70.9/57.2 on the 5 relation types/24 relation subtypes in the ACE RDC 2003 corpus and the F-measure of 72.1/63.6 on the 7 relation types/23 relation subtypes in the ACE RDC 2004 corpus.The above discussion suggests that structured in formation in the parse tree may not be fully utilized in the previous works, regardless of feature-based, tree kernel-based or composite kernel-based methods.",
                    "sid": 62,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Compared with the previous works, this paper proposes a dynamic context-sensitive tree span trying tocover necessary structured information and a c ontext more, a composite kernel is applied to combine our tree kernel and a state-of-the-art linear kernel for integrating both flat and structured features in relation extraction as well as validating their complementary nature.",
                    "sid": 63,
                    "ssid": 29,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "context sensitive convolution tree. ",
            "number": "3",
            "sents": [
                {
                    "text": "Kernel for Relation Extraction In this section, we first propose an algorithm to dynamically determine a proper context-sensitive tree span and then a context-sensitive convolution tree kernel for relation extraction.",
                    "sid": 64,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.1 Dynamic Context-Sensitive Tree Span in. Relation Extraction A relation instance between two entities is encaps u- lated by a parse tree.",
                    "sid": 65,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, it is critical to understand which portion of a parse tree is important in the tree kernel calculation.",
                    "sid": 66,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Zhang et al (2006) systematically explored seven different tree spans , including the Shortest Path -enclosed Tree (SPT) and a Context Sensitive Path-enclosed Tree1 (CSPT), and found that SPT per formed best.",
                    "sid": 67,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is, SPT even outperforms CSPT.",
                    "sid": 68,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is contrary to our intuition.",
                    "sid": 69,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, \u201cgot married\u201d is critical to determine the relationship between \u201cJohn\u201d and \u201cMary\u201d in the sentence \u201cJohn and Mary got married\u2026 \u201d as shown in Figure 1(e), and the information contained in SPT (\u201cJohn and Mary\u201d) is not enough to determine their relationship.",
                    "sid": 70,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Obviously, context -sensitive tree spans should have the potential for better performance.",
                    "sid": 71,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One problem with the context-sensitive tree span explored in Zhang et al (2006) is that it only considers the availability of entities\u2019siblings and fails to consider following two factors: 1) Whether is the information contained in SPT enough to determine the relationship between two entities?",
                    "sid": 72,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It depends.",
                    "sid": 73,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the embedded cases, SPT is enough.",
                    "sid": 74,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, \u201cJohn\u2019s wife\u201d is enough to determine the relationship between \u201cJohn\u201d and \u201cJohn\u2019s wife\u201din the sentence \u201cJohn\u2019s wife got a good job\u2026 \u201das shown in Figure 1(a) . However, SPT is not enough in the coordinated cases, e.g. to determine the relationship between \u201cJohn\u201d and \u201cMary\u201d in the sentence \u201cJohn and Mary got married\u2026 \u201das shown in Figure 1(e).",
                    "sid": 75,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 CSPT means SPT extending with the 1st left sibling of.",
                    "sid": 76,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "st sensitive convolution tree kernel considering both the node of entity 1 and the 1 right sibling o f the nodecontext-free and context-sensitive sub-trees.",
                    "sid": 77,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Further of entity 2.",
                    "sid": 78,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the case of no available sibling, it moves to the parent of current node and repeat the same pro c ess until a sibling is avai lable or the root is reached.",
                    "sid": 79,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2) How can we extend SPT to include necessary context information if there is no enough information in SPT for relation extraction?",
                    "sid": 80,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To answer the above two questions, we randomly chose 100 positive instances from the ACE RDC 2003 training data and studied their necessary tree spans.",
                    "sid": 81,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It was observed that we can classify them into 5 categories: 1) embedded (37 instances), where one sentence \u201cJohn and Mary got married\u2026\u201das shown in Figure 1(e); Based on the above observations, we implement an algorithm to determine the necessary tree span for the relation extract task.",
                    "sid": 82,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The idea behind the algorithm is that the necessary tree span for a relation should be determined dynamically according to its tree span category and context.",
                    "sid": 83,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given a parsed tree and two entity is embedded in another entity, e.g. \u201cJohn\u201dand entities in consideration, ti first determin es the tree \u201cJohn\u2019s wife\u201das shown in Figure 1(a) ; 2) PP-linked (21 instances), where one entity is linked to another entity via PP attachment, e.g. \u201cCEO\u201dand \u201cMicrosoft\u201d in the sentence \u201cCEO of Microsoft announced \u2026 \u201das shown in Figure 1(b); 3) semi-structured (15 instances), where the sentence consists of a s equence of noun phrases (including the two given entities), e.g. \u201cJane\u201d and \u201cABC news\u201din the sentence \u201cJane, ABC news, California .\u201d as shown in Figure 1(c); 4) descriptive (7 instances), e.g. the citizenship between \u201chis mother\u201d and \u201cLebanese\u201d in the sentence \u201chis mother Lebanese landed at \u2026\u201das shown in Figure 1(d); 5) predicate-linked and others (19 instances, including coordinated cases), where the predicate information is necessary to determine the relationship between two entities, e.g. \u201cJohn\u201d and \u201cMary\u201d in the S span category and then extends the tree span accor d- ingly.",
                    "sid": 84,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By default, we adopt the Shortest Path- enclosed Tree (SPT) as our tree span.",
                    "sid": 85,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We only expand the tree span when the tree span belongs to the \u201cpredicate-linked\u201dcategory.",
                    "sid": 86,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is based on our observation that the tree spans belonging to the \u201cpredicate-linked\u201d category vary much syntactically and majority (~70%) of them need information outside SPT while it is quite safe (>90%) to use SPT as the tree span for the remaining categories.",
                    "sid": 87,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our alg o- rithm, the expansion is done by first moving up until a predicate-headed phrase is found and then moving down along the predicated-headed path to the predicate terminal node.",
                    "sid": 88,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 1(e) shows an example for the \u201cpredicate-linked\u201d category where the lines with arrows indicate the expansion path.",
                    "sid": 89,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "S PP(IN)-subtoot NPE2-PER VP NP PP VP NPE2-ORG IN NNP NPE1-PER NP N P E 1 P E R NPE2-ORG of Microsoft NNP PO S NN V DT JJ NN NN NNP VBD \u2026 NP(NN) a) context -free John \u2019s wife found a a) embedded NP good job CEO of Microsoft a nnounced b) PP -linked S PP(IN)-subroot NPE2-ORG NPE1-PER NPE2-ORG NP NP VP IN NNP of Microsoft , , . NPE1-PER NPE2-GPE PP b ) context -sensitive NNP , NNP S , N PRP$ NN NNP VBD \u2026 S(VBD) Jane , ABC news , California . c) semi struct ured His mother Leba nese landed at d ) d e s c r i p t i v e S NP(NN)PP(IN) subroot N P E 2 O R G NP VP NPE1-PER NPE2-PER VP \u2026 NNP CC NNP VBD NP NPE1-PER NPE2-PER VP NNP CC NNP VBD VP \u2026 VBN \u2026 IN NNP of Microsoft c) context -sensitiveFigure 2: Examples of contextfree and context-sensitive sub John and Mary got married John and Mary got married trees related with Figure 1(b).",
                    "sid": 90,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "e) predicate-linked: SPT and the dynamic context-sensitive tree span Figure 1: Different tree span categories with SPT (dotted circle) and an example of the dynamic context-sensitive tree span (solid circle) Note: the bold node is the root for a sub-tree.",
                    "sid": 91,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A problem with our algorithm is how to determine whether an entity pair belongs to the \u201cpredicate -linked\u201d category.",
                    "sid": 92,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, a simple method is applied by regarding the \u201cpredicate- linked\u201d category as the default category.",
                    "sid": 93,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is, those entity pairs, which do not belong to the four well defined and easily detected categories (i.e. embedded, PP-liked, semi-structured and descriptive), are classified into the \u201cpredicate -linked\u201dcategory.",
                    "sid": 94,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since \u201cpredicate -linked\u201d instances only occupy ~20% of cases, this explains why SPT performs better than the Context-Sensitive Path-enclosed Tree (CSPT) as described in Zhang et al (2006): consistently adopting CSPT may introduce too much noise/unnecessary information in the tree kernel.",
                    "sid": 95,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.2 Context-Sensitive Convolution Tree Kernel.",
                    "sid": 96,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "the tree kernel proposed in Culota and Sorensen (2004) which is c ontext-sensitive, that is, it considers the path from the tree root node to the sub-tree root node.",
                    "sid": 97,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to integrate the advantages of both tree kernels and resolve the problem in Collins and Duffy\u2019s convolution tree kernel, this paper proposes a context-sensitive convolution tree kernel.",
                    "sid": 98,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It works by taking ancestral information (i.e. the root node path) of sub-trees into consideration: mGiven any tree span, e.g. the dynamic context K (T [1], T [2]) (n i [1], n i [2]) (3) sensitive tree span in the last subsection, we now C 1 1 i 1 ni [1] N i [1], ni [2] N i [ 2] study how to measure the similarity between two Where 1 1 1 1 trees, using a convolution tree kernel.A convolution kernel (Haussler D., 1999 ) aims to capture structured information in terms of substructures . As a specialized convolution kernel, Collins and Duffy\u2019s convolu N i [ j] is the set of root node paths with length i in tree T[j] while the maximal length of a root node path is defined by m. i tion tree kernel KC (T1,T2 ) (\u2018C\u2019 for convolution) n1 [ j] (n1 n2 ...ni )[ j] is a root node path with counts the number of common sub-trees (substructures) as the syntactic structure similarity be tween two parse trees T1 and T2 (Collins and Duffy length i in tree T[j] , which takes into account the i-1 ancestr al nodes n i [j] of n [j] in T[j].",
                    "sid": 99,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Here, 2 1 2001): n k 1[ j] is the parent of n k [ j ]and n1[ j] is the K C (T1, T2 ) n1 N1 ,n2 (n1 , n2 ) N 2 (1) root node of a context-free sub-tree in T[j].",
                    "sid": 100,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For better differentiation , the label of each ancestral ni where Nj is the set of nodes in tree Tj , and (n1 ,n2 ) node in 1 [j] is augmented with the POS tag of evaluates the common sub-trees rooted at n1 and n2 2 its head word.",
                    "sid": 101,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "i i and is computed recursive ly as follows : (n1 [1], n1 [2])measures the common context 1) If the context -free productio ns (Context -Free sensitive sub-trees rooted at root node paths Grammar(CFG) rules) at n1 and n2 are different, n1 [1]and n1 [2] . In our tree kernel, a sub tree (n1, n2 ) 0 ; Otherwise go to 2.",
                    "sid": 102,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "becomes context-sensitive with its dependence on the root node path instead of the root node itself.",
                    "sid": 103,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2) If both n1 and n2 Otherwise go to 3.",
                    "sid": 104,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "are POS tags, (n1, n2) 1 A ; Figure 2 shows a few examples of context - sensitive sub-trees with comparison to context 3) Calculate (n1 ,n2 ) recursively as: #ch( n1 )free sub trees.",
                    "sid": 105,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Similar to Collins and Duffy (2001), our tree ker (n1 , n2 ) A (1 (ch(n1 , k ),ch(n2 , k )) (2) nel computes ( 1 [1], 1 [2]) n i n i recursively as follows: k 1 where # ch(n) is the number of children of node n , ch(n, k ) is the k th child of node n and A (0< A <1) is 1) If the context -sensitive productions (Context- Sensitive Grammar (CSG) rules with root node paths as their left hand sides) rooted at n i [1] and the decay factor in order to make the kernel value less ni are different, return (ni [1], ni [2]) =0; variable with respect to different sub-tree sizes.",
                    "sid": 106,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This convolution tree kernel has been successfully 1[2] 1 1 Otherwise go to Step 2.",
                    "sid": 107,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "applied by Zhang et al (2006) in relation extraction.",
                    "sid": 108,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2) If both n1 [1] and n1[2] are POS tags, However, there is one problem with this tree kernel: (ni [1], ni [2]) A ; Otherwise go to Step 3.",
                    "sid": 109,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "the sub-trees involved in the tree ker nel computation 1 1 are context-free (That is, they do not consider the information outside the sub-trees).",
                    "sid": 110,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is contrast to 3 That is, each root node path.",
                    "sid": 111,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 encodes the identity 2 That is, each node n encodes the identity of a sub-.",
                    "sid": 112,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "tree rooted at n and, if there are two nodes in the tree with the same label, the summation will go over both of them.",
                    "sid": 113,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "of a context-sensitive sub-tree rooted at n i and, if there are two root node paths in the tree with the same label sequence, the summation will go over both of them.",
                    "sid": 114,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "i i major relation types and 24 relation subtypes.",
                    "sid": 115,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All the 3) Calculate (n1 [1], n1 [2]) recursively as: reported performances in this paper on the ACE RDC (n1 [1], n1 [2]) #ch(n1 [1]) A (1 (4) (ch(n1 [1], k ), ch(n1[2], k )) 2003 corpus are evaluated on the test data.",
                    "sid": 116,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The 2004 corpus contains 451 documents and 5702 positive relation instances.",
                    "sid": 117,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It redefines 7 entity types, 7 major i i k 1 i th relation types and 23 relation subtypes.",
                    "sid": 118,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For compari son, we use the same setting as Zhang et al (2006) by where ch(n1 [ j], k ]) is the k context-sensitiveapply ing a 5-fold cross validation on a subset of the i in1[ j] with # ch(n1[ j]) the number of the con text-sensitive children.",
                    "sid": 119,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Here, A (0< A <1) is the decay factor in order to make the kernel value less variable with respect to different sizes of the context-sensitive sub-trees.",
                    "sid": 120,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is worth comparing our tree kernel with previous tree kernels.",
                    "sid": 121,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Obviously, our tree kernel is an extension of Collins and Duffy\u2019s convolution tree kernel, which is a special case of our tree kernel (if m=1 in Equation (3)).",
                    "sid": 122,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our tree kernel not only counts the occurrence of each context-free sub-tree, which does not consider its ances tors, but also counts the occurrence of each context-sensitive sub-tree, which considers its ancestors.",
                    "sid": 123,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a result, our tree kernel is not limited by the constraints in previous tree kernels (as discussed in Sec tion 2), such as Collins and Duffy tion instances.",
                    "sid": 124,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is, all the reported performances in this paper on the ACE RDC 2004 corpus are evalu ated using 5-fold cross validation on the entire corpus . Both corpo ra are parsed using Charniak\u2019s parser (Charniak, 2001) with the boundaries of all the entity mentions kept 4 . We iterate over all pairs of entity mentions occurring in the same sentence to generate potential relation instances5 . In our experimentation, SVM (SVMLight, Joachims(1998)) is selected as our cla ssifier.",
                    "sid": 125,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For efficiency, we apply the one vs. others strategy, which builds K classifiers so as to separate one class from all others.",
                    "sid": 126,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The training parameters are chosen using cross-validation on the ACE RDC 2003 training data.",
                    "sid": 127,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, A in our tree kernel is fine-tuned to 0.5.",
                    "sid": 128,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This suggests that about 50% discount is done as our tree kernel moves down one (2001), Zhang et al (2006), Culotta and Sorensen level in computing ( 1 [1], 1 [2]) (2004) and Bunescu and Mooney (2005a).",
                    "sid": 129,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, let\u2019s study the computational issue with our tree kernel.",
                    "sid": 130,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Although our tree kernel takes the context- sensitive sub-trees into consideration, it only slightly increases the computational burden, compared with Collins and Duffy\u2019s convolution tree kernel.",
                    "sid": 131,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is n i n i . 4.2 Experimental Results.",
                    "sid": 132,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First, we systematically evaluate the context-sensitive convolution tree kernel and the dynamic context - sensitive tree span proposed in this paper.Then, we evaluate the complementary nature be due to that (n1[1], n1[2]) 0 holds for the major tween our tree kernel and a state of-the-art linear ker ity of context-free sub-tree pairs (Collins and Duffy2001) and that computation for context-sensitive sub tree pairs is necessary only when nel via a composite kernel.",
                    "sid": 133,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Generally different feature-based methods and tree kernel-based methods have their own merits.",
                    "sid": 134,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is usually easy to build a (n1[1], n1[2]) 0 and the context-sensitive sub system using a feature-based method and achieve the tree pairs have the same root node path(i.e. state-of-the-art performance, while tree kernel-based n i [1] n i [2] in Equatio n (3)).",
                    "sid": 135,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "method s hold the potenti al for further perfor mance improv ement.",
                    "sid": 136,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Theref ore, it is always a good idea to",
                    "sid": 137,
                    "ssid": 74,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "experimentation. ",
            "number": "4",
            "sents": [
                {
                    "text": "integrate them via a composite kernel.",
                    "sid": 138,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This paper uses the ACE RDC 2003 and 2004 corpora provided by LDC in all our experiments.",
                    "sid": 139,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.1 Experimental Setting.",
                    "sid": 140,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The ACE RDC corpora are gathered from various newspapers, newswire and broadcasts.",
                    "sid": 141,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the 2003 corpus , the training set consists of 674 documents and9683 positive relation instances w hile the test set con sists of 97 documents and 1386 positive relation instances.",
                    "sid": 142,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The 2003 corpus defines 5 entity types, 5 4 This can be done by first representing all entity me n-.",
                    "sid": 143,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "tions with their head words and then restoring all the entity mentions after parsing.",
                    "sid": 144,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, please note that the final performance of relation extraction may change much with different range of parsing errors.",
                    "sid": 145,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We will study this issue in the near future.tion extraction on \u201ctrue\u201d mentions wit h \u201ctrue\u201dchain ing of co-reference (i.e. as annotated by LDC annotators ).",
                    "sid": 146,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, we only model explicit relations and explicitly model the argument order of the two mentions involved.",
                    "sid": 147,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, we compare our system with the state-of- the-art systems in the literature.",
                    "sid": 148,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Context-Sensitive Convolution Tree Kernel In this paper, the m parameter of our context-sensitive convolution tree kernel as shown in Equation (3) indicates the maximal length of root node paths and is optimized to 3 using 5-fold cross validation on the ACE RDC 2003 training data.",
                    "sid": 149,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 1 compares the impact of different m in context -sensitive convolution tree kernels using the Shortest Path-enclosed Tree (SPT) (as described in Zhang et al (2006)) on the major relation types of the ACE RDC 2003 and 2004 corpora, in details.",
                    "sid": 150,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It also shows that our tree kernel achieves best performance on the test data using SPT with m = 3, which outperforms the one with m = 1 by ~2.3 in F-measure.",
                    "sid": 151,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This suggests the parent and grandparent nodes of a sub-tree contains much information for relation extraction while considering more ancestral nodes may not help.",
                    "sid": 152,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This may be due m P(%) R(%) F 1 72.3(72.7) 56.6(53.8) 63.5(61.8) 2 74.9(75.2) 57.9(54.7) 65.3(63.5) 3 75.7(76.1) 58.3(55.1) 65.9(64.0) 4 76.0(75.9) 58.3(55.3) 66.0(63.9) a) without entity-related information b) with entity-related information Table 1: Evaluation of context-sensitive convolution tree kernels using SPT on the major relation types of the ACE RDC 2003 (inside the parentheses) and 2004 (outside the parentheses) corpora.",
                    "sid": 153,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Tree Span P(%) R(%) F to that, although our experimentation on the training data indicates that more than 80% (on average) of subtrees has a root node path longer than 3 (since most of the subtrees are deep from theShortest Path enclosed Tree Dynamic Context- Sensitive Tee 79.6 (79.4) 81.1 (80.1) 65.6 (62.5) 66.7 (63.8) 71.9 (69.9) 73.2 (71.0) root node and more than 90% of the parsed trees in the training data are deeper than 6 levels), including a root node path longer than 3 may be vulnerable to the full parsing errors and have negative impact.",
                    "sid": 154,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 1 also evaluates the impact of entity-related information in our tree kernel by attaching entity type information (e.g. \u201cPER\u201din the entity node 1 of Figure 1(b)) into both entity nodes.",
                    "sid": 155,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It shows that such information can significantly improve the performance by ~6.0 in F-measure.",
                    "sid": 156,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In all the following experiments, we will apply our tree kernel with m=3 and entity-related information by default.",
                    "sid": 157,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 2 compares the dynamic context-sensitive tree span with SPT using our tree kernel.",
                    "sid": 158,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It shows that the dynamic tree span can futher improve theTable 2: Comparison of dynamic contextsensitive tree span with SPT using our context sensitive convolution tree kernel on the major relation types of the ACE RDC 2003 (inside the parentheses) and 2004 (outside the parentheses) corpora.",
                    "sid": 159,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "18% of positive instances in the ACE RDC 2003 test data belong to the predicate-linked category.",
                    "sid": 160,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Composite Kernel In this paper, a composite kernel via polynomial interpolation, as described Zhang et al (2006), is applied to integrate the proposed c ontextsensitive convolution tree kernel with a state -of the-art linear kernel (Zhou et al 2005) 7 : P per formance by ~1.2 in F-measure6 . This suggests the K1 ( , ) a K L ( , ) (1 a ) K C ( , ) (5) usefulness of extending the tree span beyond SPT for the \u201cpredicate-linked\u201d tree span category.",
                    "sid": 161,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the Here, K L ( , ) and K C ( , )indicates the normal future work, we will further explore expanding the ized linear kernel and context -sensitive convolution dynamic tree span beyond SPT for the remaining tree tree kernel respectively whileK p ( , ) is the poly span categories.",
                    "sid": 162,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "nomial expansion of K ( , ) with degree d=2, i.e. 6 Significance test shows that the dynamic tree span per-.",
                    "sid": 163,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "forms s tatistically significantly better than SPT with p- values smaller than 0.05.",
                    "sid": 164,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "K p ( , ) ( K( , ) 1)2 and a is the coefficient (a is set to 0.3 using cross -validation).",
                    "sid": 165,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "7 Here, we use the same set of flat features (i.e. word,.",
                    "sid": 166,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "entity type, mention level, overlap, base phrase chunk- ing, dependency tree, parse tree and semantic information) as Zhou et al (20 05).",
                    "sid": 167,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 3 evaluates the performance of the ACE RDC 2004 P(%) R(%) F composite kernel.",
                    "sid": 168,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It shows that the composite kernel much further improves the performance beyond that of either the state-of-the-art linear kernel or our tree kernel and achieves the F-measures of 74.1 and 75.8 on the major relation types of the ACE RDC 2003 and 2004 corpora respectively.",
                    "sid": 169,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This suggests that our tree kernel and the state-of-the-art linear kernel are quite complementary, and that our composite kernel can effectively integrate both flat and structured f eatures.",
                    "sid": 170,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Ours: composite kernel Zhang et al (2006): composite kernel Zhao et al (2005):8 composite ke rnel Ours: context-sensitive convolution tree kernel Zhang et al (2006): convolution tree kernel 82.2 (70.3) 76.1 (68.6) 69.2 (-) 81.1 (68.8) 72.5 (-) 70.2 (62.2 ) 68.4 (59.3) 70.5 (-) 66.7 (60.3 ) 56.7 (-) 75.8 (66.0) 72.1 (63.6) 70.4 (-) 73.2 (64.3) 63.6 (-) System P(%) R(%) F Table 5: Comparison of difference systems on the Linear Kernel 78.2 (77.2) 63.4 (60.7) 70.1 (68.0) ACE RDC 2004 corpus over both 7 types (outside the parentheses ) and 23 subtypes ( inside the parentheses) Context-Sensitive Convolution Tree Kernel 81.1 (80.1) 66.7 (63.8) 73.2 (71.0) Finally, Tables 4 and 5 comp are our system with other state-of-the-art systems9 on the ACE RDC 2003 Composite Kernel 82.2 (80.8) 70.2 (68.4) 75.8 (74.1) and 2004 corpora, respectively.",
                    "sid": 171,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They show that our tree kernel based system outperforms previous tree Table 3: Performance of the compos ite kernel via polynomial interpolation on the major relation types of the ACE RDC 2003 (inside the parentheses) and 2004 (outside the parentheses) corpora Comparison with Other Systems ACE RDC 2003 P(%) R(%) F kernel-based systems.",
                    "sid": 172,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is largely due to the context-sensitive nature of our tree kernel which resolves the limitations of the previous tree kernels.",
                    "sid": 173,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They also show that our tree kernel-based system outperforms the state-of-the-art feature-based system.",
                    "sid": 174,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This proves the great potential inherent in the parse tree structure for relation extraction and our tree kernel takes a big stride towards the right direction.",
                    "sid": 175,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, they also Ours: composite kernel Zhang et al (2006): composite kernel Ours: context -sensitive convolution tree ke rnel Zhang et al (2006): convolution tree ke rnel Bunescu et al (2005): shortest path dependency kernel Culotta et al (2004): dependency kernel Zhou et al.",
                    "sid": 176,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2005): feature-based Kambhatla (2004): feature-based 80.8 (65.2) 77.3 (64.9) 80.1 (63.4) 76.1 (62.4) 65.5 (-) 67.1 (-) 77.2 (63.1) - (63.5) 68.4 (54.9 ) 65.6 (51.2) 63.8 (51.9 ) 62.6 (48.5) 43.8 (-) 35.0 (-) 60.7 (49.5) - (45.2) 74.1 (59.6) 70.9 (57.2) 71.0 (57.1) 68.7 (54.6) 52.5 (-) 45.8 (-) 68.0 (55.5) - (52.8) show that our composite kernel-based system outper forms other composite ke rnel-based systems.",
                    "sid": 177,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 C o n c l u s i o n Structured parse tree information holds great potential for relation extraction.",
                    "sid": 178,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This paper proposes a context- sensitive convolution tree kernel to resolve two critical problems in previous tree kernels for relation extraction by first automatically determining a dynamic context-sensitive tree span and then applying a context-sensitive convolution tree kernel.",
                    "sid": 179,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, this paper evaluates the complementary nature between our tree kernel and a state-of-the-art linear kernel.",
                    "sid": 180,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Evaluation on the ACE RDC corpora shows that our dynamic context sensitive tree span is much more suitable for relation extraction than the widely -used Shortest Path-enclosed Tree and our tree kernel out Table 4: Comparison of difference systems on the ACE RDC 2003 corpus over both 5 types ( outside the parentheses ) and 24 subtypes (inside the parentheses ) performs the state-of-the-art Collins and Duffy\u2019s convolution tree kernel.",
                    "sid": 181,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It also shows that feature-based 8 There might be some typing errors for the performance.",
                    "sid": 182,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "reported in Zhao and Grishman(2005) since P, R and F do not match.",
                    "sid": 183,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "9 All the state-of-the -art systems apply the entity-related.",
                    "sid": 184,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "information.",
                    "sid": 185,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is not supervising: our experiments show that using the entity-related information gives a large performance improvement.",
                    "sid": 186,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "and tree kernel-based methods well complement each other and the composite kernel can effectively integrate both flat and structured features.",
                    "sid": 187,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To our knowledge, this is the first research to demonstrate that, without extensive feature enginee r ing, an individual tree kernel can achieve much better performance than the state-of-the-art linear kernel in relation extraction.",
                    "sid": 188,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This shows the great potential of structured parse tree information for relation extraction and our tree kernel takes a big stride towards the right direc tion.",
                    "sid": 189,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the future work, we will focus on improving the context-sensitive convolution tree kernel by exploring more useful context information.",
                    "sid": 190,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, we will explore more entity-related information in the parse tree.",
                    "sid": 191,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our preliminary work of including the entity type information significantly improves the performance.",
                    "sid": 192,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally , we will study how to resolve the data imbalance and sparseness issues from the learning algorithm view point.",
                    "sid": 193,
                    "ssid": 56,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgement",
            "number": "",
            "sents": [
                {
                    "text": "This research is supported by Project 60673041 under the National Natural Science Foundation of China and Project 2006AA01Z147 under the \u201c863\u201dNational High-Tech Research and Develo pment of China.",
                    "sid": 194,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We would also like to thank the critical and insightful comments from the four anonymous reviewers.",
                    "sid": 195,
                    "ssid": 58,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}