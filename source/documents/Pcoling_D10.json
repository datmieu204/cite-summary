{
    "ID": "Pcoling_D10",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "We present a new Bayesian HMM word alignment model for statistical machine translation.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model is a mixture of an alignment model and a language model.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The alignment component is a Bayesian extension of the standard HMM.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The language model component is responsible for the generation of words needed for source fluency reasons from source language context.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This allows for untranslatable source words to remain unaligned and at the same time avoids the introduction of artificial NULL words which introduces unusually long alignment jumps.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Existing Bayesian word alignment models are unpractically slow because they consider each target position when resampling a given alignment link.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The sampling complexity therefore grows linearly in the target sentence length.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to make our model useful in practice, we devise an auxiliary variable Gibbs sampler that allows us to resample alignment links in constant time independently of the target sentence length.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This leads to considerable speed improvements.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Experimental results show that our model performs as well as existing word alignment toolkits in terms of resulting BLEU score.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Word alignment is one of the basic problems in statistical machine translation (SMT).",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The IBM models were originally devised for translation by Brown et al.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1993).",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Later, when SMT started to employ entire phrases instead of single words (Koehn et al., 2003), the IBM models were repurposed as word alignment models.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The alignments they produce guide the phrase extraction heuristics that are used in many modern SMT systems.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There are several extensions of the classical IBM models that try to weaken their independence assumptions.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notably, Vogel et al.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1996) introduced Markovian dependencies between individual alignment links.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Those links were treated as independent events in IBM models 1, 2 and 3.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model of Vogel et al.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1996) can be viewed as a Hidden Markov Model (HMM) in which the hidden Markov Chain induces a probability distribution over latent alignment links.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Besides weakening the independence assumptions of the simpler IBM models, the HMM alignment model has the additional benefit of being tractable.",
                    "sid": 22,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This means that expectations under the HMM aligner can be computed exactly using the forward-backward algorithm.",
                    "sid": 23,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These expectations are then used in the Baum-Welch algorithm (Baum et al., 1970) to compute parameter updates for the model.",
                    "sid": 24,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Crucially, the Baum-Welch algorithm is a special case of the EM algorithm and thus guaranteed to never decrease the model\u2019s likelihood at each parameter update (Dempster et al., 1977).",
                    "sid": 25,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Tractability and convergence (at least to a local optimum) are clear advantages of the HMM aligner over IBM models 3 to 5 which are all intractable.",
                    "sid": 26,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In practice, hill-climbing heuristics are employed to approximate expectations in these more complex models.",
                    "sid": 27,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unfortunately, all convergence guarantees of the learning algorithm are lost this way.",
                    "sid": 28,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A major problem for the HMM aligner is the handling of NULL words.1 The NULL word is a special This work is licensed under a Creative Commons Attribution 4.0 International Licence.",
                    "sid": 29,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Licence details: http:// creativecommons.org/licenses/by/4.0/ 1 The original work of Vogel et al.",
                    "sid": 30,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1996) did not use NULL words and instead aligned all source words.",
                    "sid": 31,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Later work by Och and Ney (2003) and Liang et al.",
                    "sid": 32,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2006) has shown that using NULL words to allow for unaligned words improves performance.",
                    "sid": 33,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "lexical item that is hypothesised to stand at the beginning of every target (English) sentence.",
                    "sid": 34,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since in word alignment the source (French) side is generated given the target side, the NULL word is used to generate source words that do not have lexical translations on the target side.",
                    "sid": 35,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Such untranslatable words are often idiosyncratic to the source language.",
                    "sid": 36,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Examples are prepositions such as de in French.",
                    "sid": 37,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The translation of the English orange juice is jus d\u2019 orange.",
                    "sid": 38,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In that case the (clitic) preposition de would be generated from the NULL word on the English side.",
                    "sid": 39,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the HMM alignment model the NULL word is troublesome since it stands in the 0th English position and thus induces unusually long jumps which have to be captured by the jump distribution of the HMM.",
                    "sid": 40,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this work we present a Bayesian HMM aligner that does not make use of artificial NULL words.",
                    "sid": 41,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Instead, untranslatable source words are generated from the words preceding them.",
                    "sid": 42,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This way, our proposed model only needs to account for lexically motivated alignment links.",
                    "sid": 43,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, since our model is a hierarchical Bayesian model we can bias it towards inducing sparse lexical distributions.",
                    "sid": 44,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This in turn leads to significantly better translation distributions (Mermer and Sarac\u00b8lar, 2011).",
                    "sid": 45,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, we can even perform inference on the model\u2019s hyperparameters, freeing us of having to choose arbitrary prior distributions.",
                    "sid": 46,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Existing Bayesian word aligners are often too slow to be useful in practice.",
                    "sid": 47,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We overcome this problem by designing an auxiliary variable Gibbs sampler that reduces sampling complexity by an order of magnitude.",
                    "sid": 48,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also provide a formal proof that this sampler works correctly.",
                    "sid": 49,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We provide several detailed experiments which show that our model performs on par with or better than standardly used alignment toolkits in terms of BLEU score.",
                    "sid": 50,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notation Throughout this paper we will denote random variables (RVs) by upper case Roman letters.",
                    "sid": 51,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If we want to express the probability of a specific outcome for the RV X we write P (X = x).",
                    "sid": 52,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If we want to leave the value of X underspecified, we simply write P (x).",
                    "sid": 53,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We abbreviate a sequence of RVs X1 to Xn as X n and a sequence of outcomes x1 to xn as xn.",
                    "sid": 54,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also distinguish notationally between 1 1 probability mass functions (pmfs) and probability density functions (pdfs).",
                    "sid": 55,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We denote pmfs by P (\u00b7) and pdfs by p(\u00b7).",
                    "sid": 56,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, we use vF and vE to denote the French (source) and English (target) vocabulary sizes.",
                    "sid": 57,
                    "ssid": 57,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "the hmm word alignment model. ",
            "number": "2",
            "sents": [
                {
                    "text": "The HMM model of Vogel et al.",
                    "sid": 58,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1996) defines a joint distribution over alignments and source words given a target sentence.2 The source words are observed as part of the parallel corpus whereas the alignments are hidden.",
                    "sid": 59,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An alignment consists of as many alignment links as there are source words.",
                    "sid": 60,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unlike the IBM models 1 and 2, which assume independence between alignment links, the HMM model assumes a first-order Markov dependency between them.",
                    "sid": 61,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This means that each alignment link depends on its predecessor.",
                    "sid": 62,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We define random variables E ranging over the target vocabulary E , variables F ranging over the source vocabulary F , and variables A modelling alignment links.",
                    "sid": 63,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use Fj for the variable associated with the source word occupying position j in the source sentence f m. Consequently, Aj is the random variable for the alignment link associated with position j. This random variable ranges over word positions in the target sentence el , where 0 is a special position occupied by the hypothetical NULL word.",
                    "sid": 64,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, we use eaj to denote the target word that position j is aligned to.",
                    "sid": 65,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We can then express the likelihood of the HMM model for a single sentence pair as shown in Equation 1.",
                    "sid": 66,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "m l P (f m|el ) = n ) P (Aj = i|aj 1)P (f |e ) (1) 1 0 j=1 i=0 \u2212 j i Here, the Markovian dependency of the alignment links is captured by a distribution over alignment jumps.",
                    "sid": 67,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The distance between the current and the previous link can be thought of as a jump from one position to the next.",
                    "sid": 68,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The jump width is then given by i \u2212 it where i is the current value of Aj and it 2 The extension to a corpus of parallel sentences is trivial because independence between sentence pairs is assumed.",
                    "sid": 69,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To keep the notation simple we describe all models on the sentence level.",
                    "sid": 70,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "is the value of the previous alignment link Aj\u22121.",
                    "sid": 71,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The distribution over alignment jumps is then simply P (Aj = i|Aj\u22121 = it) = P (i \u2212 it).",
                    "sid": 72,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In practice, we set a0 to a special start token, so as to provide a conditioning event for the first alignment decision.",
                    "sid": 73,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A severe problem for the HMM alignment model is the handling of NULL words.",
                    "sid": 74,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If we did not treat alignments to the NULL position in a special way, those alignments would distort the alignment distribution because they induce unusually long jumps.",
                    "sid": 75,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To solve this problem, we introduce a special jump value for NULL alignments.3 This has the effect that jumps to and from NULL are modelled explicitly and behave just like other jump values.",
                    "sid": 76,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On the other hand, if the preceding alignment is an alignment to NULL, the distribution over jumps becomes uniform.",
                    "sid": 77,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is because when jumping from NULL a special jump value gets invoked that does not depend on the position that the next jump leads to.",
                    "sid": 78,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This behaviour obviously restricts the expressive power of the model somewhat but provides a clean handling of NULL alignments.",
                    "sid": 79,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The parameters of the standard HMM of Vogel et al.",
                    "sid": 80,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1996) are estimated through likelihood maximization.",
                    "sid": 81,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Here, we extend their model with prior distributions over parameters.",
                    "sid": 82,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This means that we are turning it into a Bayesian model.",
                    "sid": 83,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The parameters of the alignment HMM are categorical parameters of the following distributions: \u2022 A distribution over the source lexicon for each target word.",
                    "sid": 84,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We call this the translation distribution and use \u0398e as a variable over the corresponding parameter vector.",
                    "sid": 85,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 A distribution over alignment jumps.",
                    "sid": 86,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We call this the alignment distribution and use \u0398a as a variable over the corresponding parameter vector.",
                    "sid": 87,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since the model\u2019s distributions are categorical, we impose (symmetric) Dirichlet priors on their parameters.",
                    "sid": 88,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The Dirichlet is a standard choice in this case as it is conjugate to the categorical.4 The variables in the Bayesian HMM aligner are thus generated as follows: Aj |aj\u22121 \u223c \u03b8a \u0398a \u223c Dir(\u03b1) Fj |eaj \u223c \u03b8eaj \u0398e \u223c Dir(\u03b2) We describe how to do inference in this model in Section 4.",
                    "sid": 89,
                    "ssid": 32,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "an hmm aligner with a language model component. ",
            "number": "3",
            "sents": [
                {
                    "text": "Our model is a mixture between a Bayesian HMM aligner and a Bayesian source language model.",
                    "sid": 90,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It differs from the Bayesian HMM aligner of Section 2 in that the language model component is the one responsible for generating source words from (source) context when those do not have a target translation.",
                    "sid": 91,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These are the words that would otherwise be aligned to NULL under the IBM models and our own Bayesian HMM (Section 2).",
                    "sid": 92,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Formally, we extend the Bayesian HMM alignment model with binary choice variables Z which we are used to indicate collocations.",
                    "sid": 93,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There is one such variable for each source position, thus Zj is the choice variable for position j. We use this variable as an indicator for whether the language model is used.",
                    "sid": 94,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, if Zj = 1, the source word fj is generated from fj\u22121.",
                    "sid": 95,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Otherwise, if Zj = 0, fj is generated from the target word it is aligned to (eaj ).",
                    "sid": 96,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since our model is Bayesian, we put priors on all parameters.",
                    "sid": 97,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, the translation parameters (\u03b8e), language model parameters (\u03b8f ) and jump parameters (\u03b8a) are drawn from Dirichlet distributions with parameter vectors \u03b1, \u03b2 and \u03b3.",
                    "sid": 98,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The binary choice variables Z only have one parameter qf which depends on the previous source word and follows a Beta distribution with parameters s and r. Since it is hard to guess reasonable values for the parameters s and r, we further assume that they are independently drawn from a Gamma distribution whose shape and rate parameters we set to 1.",
                    "sid": 99,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This extra level of hierarchy frees us from having to choose arbitrary values for s and r. Empirically, it also improves the performance of our model.",
                    "sid": 100,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3 Conceptually, we add a categorical event TONULL and another FROMNULL to the distribution over alignment jumps..",
                    "sid": 101,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4 Conjugacy in this case means that the posterior over parameters will again be a Dirichlet.",
                    "sid": 102,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This has the advantage that we can analytically integrate with respect to the posterior.",
                    "sid": 103,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To better understand our model, we formulate a generative story: \u2022 Draw values for s and r independently from Gamma(1, 1) \u2022 Generate qf from Beta(s, r) for each source word f \u2022 Draw values for \u03b8a, \u03b8e and \u03b8f from their respective Dirichlet priors \u2022 For each source position j 1.",
                    "sid": 104,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Generate an alignment link aj conditional on aj\u22121.",
                    "sid": 105,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2. Choose a value for Zj conditional on the previous source word fj\u22121.",
                    "sid": 106,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(a) If Zj = 0, generate source word fj from target word eaj (b) If Zj = 1, generate source word fj from source word fj\u22121 In terms of variable generation we have to adjust the model description from Section 2.",
                    "sid": 107,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For reasons of clarity, we condition all variables only on those events that they depend on.",
                    "sid": 108,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "S \u223c Gamma(1, 1) R \u223c Gamma(1, 1) Zj |fj\u22121 \u223c Bernoulli(qfj\u22121 ) Qf \u223c Beta(s, r) Aj |aj\u22121 \u223c Cat(\u03b8a) \u0398a \u223c Dir(\u03b1) Fj |aj , Zj = 0, eaj \u223c Cat(\u03b8eaj ) \u0398e \u223c Dir(\u03b2) Fj |aj , Zj = 1, fj\u22121 \u223c Cat(\u03b8fj\u22121 ) \u0398f \u223c Dir(\u03b3) Our model as described above defines a joint distribution over French words, collocation and alignment variables and parameters given an English sentence and the hyperparameters.",
                    "sid": 109,
                    "ssid": 20,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "inference. ",
            "number": "4",
            "sents": [
                {
                    "text": "In this section we derive a Gibbs sampler for our collocation-based model (Section 3).",
                    "sid": 110,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The sampler for the Bayesian HMM with NULL words (Section 2) follows from that.",
                    "sid": 111,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also describe how to sample the hyperparameters of the Beta prior on the collocation distributions.",
                    "sid": 112,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.1 Dirichlet Predictive Posterior.",
                    "sid": 113,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let us first establish a general useful fact about the Dirichlet distribution.5 Let us call the posterior Dirichlet parameter vector \u03b7.6 Then the posterior predictive distribution for a categorical outcome x is given by the following integral: P (x|\u03b7) = P (x|\u03b8)p(\u03b8|\u03b7)d\u03b8 = \u03b8xp(\u03b8|\u03b7)d\u03b8 .",
                    "sid": 114,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "( 2) Here, we use \u03b8x to denote the categorical parameter for outcome x. Note that the last integral in Equation (2) is in fact equal to the expectation of \u03b8x under Dir(\u03b7).",
                    "sid": 115,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is well known that for a k- dimensional Dirichlet distribution this expectation is E[\u03b8x|\u03b7] = \u03b7x . Thus, the predictive posteriors i=1 for the alignment and collocation variables after integrating over the categorical or Beta parameters take the form of this expectation.",
                    "sid": 116,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.2 Gibbs Sampling the Hidden Variables.",
                    "sid": 117,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since we are only interested in the assignments of the alignment and collocation variables, we integrate over the model parameters \u03b8e, \u03b8a, \u03b8f and qf . This gives us a collapsed Gibbs sampler.In general, a Gibbs sampler resamples one variable at a time while conditioning on the current assign ments of all other variables.",
                    "sid": 118,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our case we are interested in resampling Aj and Zj . This means that we 5 This fact immediately carries over to the Beta distribution which can be viewed as a 2-dimensional Dirichlet distribution..",
                    "sid": 119,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6 Since the categorical is in the exponential family and the Dirichlet is conjugate to it, the posterior Dirichlet parameter \u03b7 is simply the sum of the prior Dirichlet parameter (which we will call E here) and the sufficient statistics of the categorical likelihood.",
                    "sid": 120,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our concrete case, these sufficient statistics are simply the number of times an outcome has been observed in the data.",
                    "sid": 121,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let us denote these counts by c(x) for an outcome x. Thus, for this outcome x, we have \u03b7x = Ex + c(x).",
                    "sid": 122,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "will need to derive posterior predictive distributions for these variables.",
                    "sid": 123,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let us first deal with the posterior predictive for the collocation variables where we assume the Beta parameters r and s as given.",
                    "sid": 124,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To ease notation we introduce the set C = {r, s, \u03b1, \u03b2, \u03b3} which contains all remaining (hyper-)parameters.",
                    "sid": 125,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "th We use xj to denote the set of all outcomes x except the j one.",
                    "sid": 126,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also introduce the function c(\u00b7) as a (conditional) count function for an outcome across the entire corpus, excluding the jth such outcome if necessary.",
                    "sid": 127,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Proportionality in the following equations comes about because we eliminate normalization constants that do not depend on the value of the variable that we sample.",
                    "sid": 128,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "m l P (Zj = 0|zj , a1 , fj , e1, C) \u221d P (Zj = 0|fj\u22121, s, r) \u00d7 P (fj |aj , eaj , \u03b2) = c(z = 0|fj\u22121) + r c(fj\u22121) + r + s c(fj |eaj ) + \u03b2 \u00d7 c(eaj ) + vF \u03b2 c(fj |eaj ) + \u03b2 (3) \u221d (c(z = 0|fj\u22121) + r) \u00d7 c(e ) + vF \u03b2 m l P (Zj = 1|zj , a1 , fj , e1, C) \u221d P (Zj = 1|fj\u22121, s, r) \u00d7 P (fj |fj\u22121, \u03b3) = c(z = 1|fj\u22121) + s c(fj\u22121) + r + s \u00d7 c(fj |fj\u22121) + \u03b3 c(z = 1|fj\u22121) + vF \u03b3 c(fj |fj\u22121) + \u03b3 (4) \u221d (c(z = 1|fj\u22121) + s) \u00d7 c(z = 1|f j\u22121 ) + vF \u03b3 When resampling the alignment variables, we need to distinguish between the two cases where the collocation variable is active or not.",
                    "sid": 129,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In case the collocation variable is switched off, inference for the alignment variable is similar to that in the Bayesian HMM aligner.",
                    "sid": 130,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The crucial difference, however, is that in the standard case, the values of the alignment variable range from 0, the NULL position, to the target sentence length l. In our model, however, the possible values for the alignment variable start at 1 as there is no NULL position.",
                    "sid": 131,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "m l P (aj |Zj = 0, aj , f1 , e1, C) \u221d P (aj |aj\u22121, \u03b1) \u00d7 P (aj+1|aj , \u03b1) \u00d7 P (fj |eaj , \u03b2) c(aj \u2212 aj\u22121) + \u03b1 c(aj+1 \u2212 aj ) + \u03b1 c(fj |eaj ) + \u03b2 = i=1 (c(i \u2212 aj\u22121) + \u03b1) \u00d7 i=1 (c(aj+1 \u2212 i) + \u03b1) \u00d7 c(ea ) + vF \u03b2 (5) c(fj |eaj ) + \u03b2 \u221d (c(aj \u2212 aj\u22121) + \u03b1) \u00d7 (c(aj+1 \u2212 aj ) + \u03b1) \u00d7 c(e ) + vF \u03b2 Again, let us point out that the predictive posterior in (5) is the one we use for inference in the Bayesian HMM model described in Section 2 with difference that the alignment positions include 0 in that case.",
                    "sid": 132,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the collocation variable is switched on, i.e. if the jth French word is generated from its predecessor, there is no lexical influence on the alignment posterior and the new link is simply sampled from the alignment distribution.",
                    "sid": 133,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "P (aj |Zj = 1, a , f , el , C) \u221d P (a |a , \u03b1) \u00d7 P (a |a , \u03b1) = l c(aj \u2212 aj\u22121) + \u03b1 \u00d7 l c(aj+1 \u2212 aj ) + \u03b1 (6) i=1 (c(i \u2212 aj\u22121) + \u03b1) i=1 (c(aj+1 \u2212 i) + \u03b1) \u221d (c(aj \u2212 aj\u22121) + \u03b1) \u00d7 (c(aj+1 \u2212 aj ) + \u03b1) At this point it is important to note that the na\u00a8\u0131ve Gibbs sampler described here considers all target positions as candidate alignment points for a given source position j. This means that the time it takes to re-sample an alignment link grows linearly with the length of the target sentence.",
                    "sid": 134,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In practice this makes the sampler unpractically slow.",
                    "sid": 135,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We address this problem in the following section.",
                    "sid": 136,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.3 Sampling Alignments Efficiently.",
                    "sid": 137,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We are interested in sampling from P (aj |aj , C), where we conflate all other variables in C to avoid clutter.",
                    "sid": 138,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that we know P (aj |aj , C) up to a normalisation constant, thus sampling requires evaluating Equation 5 (or 6) for all 1 \u2264 i \u2264 l. Naturally, this procedure runs in time proportional to O(l).",
                    "sid": 139,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this section we present an auxiliary variable sampler that brings this down to constant time.",
                    "sid": 140,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The idea is to evaluate P (aj |aj , C) only for assignments in a subset of target positions.",
                    "sid": 141,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This subset must include at least 2 candidates and it must be such that it contains the current assignment of the variable we are resampling.",
                    "sid": 142,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is, if we let (a(t), a(t) denote the current state of the Markov chain, j j then we need to select a(t) as well as at least one random candidate from the remaining available positions {1, . . .",
                    "sid": 143,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", l} \\ {aj }.",
                    "sid": 144,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We denote a selection of target positions by a vector k \u2286 {0, 1}l such that ki = 1 signifies that i is a reachable candidate.",
                    "sid": 145,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then, once a selection is made, we sample the next state of the Markov chain, i.e.",
                    "sid": 146,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(a(t), a(t+1) , from a distribution proportional to P (A(t+1) = i|a(t), C(t)) \u00d7 ki.",
                    "sid": 147,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note j j j j that, under this distribution, only selected positions have nonzero probability.",
                    "sid": 148,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This makes sampling the next state run in constant time independent of the target sentence length.",
                    "sid": 149,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Formally, this is a case of sampling by data augmentation (Tanner and Wong, 1987).",
                    "sid": 150,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let K be a random variable taking values in K \u2282 {0, 1}l . We interpret an assignment of K as a random selection of at most l target positions.",
                    "sid": 151,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We define the joint distribution P (aj , k|aj , C) = P (aj |aj , C)\u00d7P (k|aj , aj ), ki where we take the conditional P (k|Aj = i, aj ) = k \u2208K k to distribute uniformly over all selections in K that contain i. This guarantees that the current state of the Markov chain is part of the selection, a condition necessary for irreducibility.",
                    "sid": 152,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then, the conditional P (Aj = it|k, aj , C) follows directly: P (Aj = it|k, aj , C) \u221d P (Aj = it|aj , C) \u00d7 P (k|Aj = it, aj ) \u221d P (Aj = it|aj , C) \u00d7 ki (7) Claim If K includes at least all subsets of size 2 where one of the elements is the previous state of the Markov chain, then the transition kernel \u03ba(it|i) = k\u2208K P (it|k) \u00d7 P (k|i) is strictly positive for every i, it \u2208 {1, . . .",
                    "sid": 153,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", l} and, therefore, the resulting Markov chain is Harris ergodic.",
                    "sid": 154,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Proof.",
                    "sid": 155,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "t t ) ki k ki \u00d7 k \u2208K k \u03ba(it|i) = ) P (it|k) \u00d7 P (k|i) = ) P (i ) \u00d7 P (k|i ) \u00d7 P (k|i) = P (it) k \u2208K i i P (k) k\u2208K k\u2208K k\u2208K (8) In the last term of Equation 8, P (it) is strictly positive because it \u2208 {1, . . .",
                    "sid": 156,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", l} by construction, and the sum is strictly positive when K includes at least one subset containing both i and it.",
                    "sid": 157,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is why we can (t) (t) start the candidate set with {aj } and enlarge it by sampling uniformly from {1, . . .",
                    "sid": 158,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", l} \\ {aj } without replacement.",
                    "sid": 159,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We need to do it at least once, but we can also repeat it a fixed number of times.",
                    "sid": 160,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The complete algorithm consists of 2 simulations, K (t+1) \u223c P (\u00b7|a(t), a(t)) and A(t+1) \u223c j j j P (\u00b7|k(t+1), a(t), C(t)), each feasible in isolation.",
                    "sid": 161,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With this improved sampler we can resample alignment links in constant time whereas the na\u00a8\u0131ve sampler would require time linear in target sentence length.",
                    "sid": 162,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is easy to see that to resample all alignment links in a source sentence with m words, the na\u00a8\u0131ve sampler would take time O(l \u00d7 m) \u2248 O(l2), whereas our improved auxiliary variable sampler does the same in O(l).",
                    "sid": 163,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This improvement makes our model competitive with maximum-likelihood models.",
                    "sid": 164,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.4 Sampling of the Beta Parameters.",
                    "sid": 165,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The parameters s and r of the Beta distribution which serves as a prior on the decision variables are random variables in our model.",
                    "sid": 166,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since there is no easily computable conjugate distribution for these parameters, we can not integrate them out analytically.",
                    "sid": 167,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Instead, we choose to approximate the integral 7 Recall that l is the target sentence length..",
                    "sid": 168,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "through repeated sampling of these variables.",
                    "sid": 169,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since both these variables take on values in the positive reals, we impose a Gamma prior on them as described in Section 3.",
                    "sid": 170,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There are several ways of sampling variables in non-conjugate Bayesian models.",
                    "sid": 171,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Here we use slice sampling (Neal, 2003) as it is fast and easy to implement.",
                    "sid": 172,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The idea of slice sampling is that we augment our sampling distribution with an auxiliary variable U such that the marginal distribution of S (or R) stays unchanged.8 Simulation then follows by Gibbs sampling, whereby we sample U conditioned on S, and S conditioned on U in turn.",
                    "sid": 173,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It can be shown that, with conditionals as shown in (9), the transition kernel underlying this Gibbs sampling procedure is Harris ergodic (Neal, 2003).",
                    "sid": 174,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, the procedure is not only correct but also very efficient as we only sample from uniform distributions.",
                    "sid": 175,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "p(u|s) = 1( u < p( s) ) p(s u) p ( s ) 1 if p(s) u (9) 0 ot herwi se The posterior that we slice sample from is simply proportional to the product of likelihood and prior of the Beta distribution: p(s|f m, zm, r) \u221d P (zm|f m, s, r) \u00d7 p(s).",
                    "sid": 176,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 1 1 1 Notice that the conditions in Equation (9) guarantee that at least the current point will be in the slice.",
                    "sid": 177,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We will therefore always be able to obtain a new sample.",
                    "sid": 178,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Intuitively, slice sampling works because the marginal distribution p(s) stays unchanged.",
                    "sid": 179,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.5 Decoding.",
                    "sid": 180,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After we have taken a number of samples, we are ready to decode.",
                    "sid": 181,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use a version of maximum marginal decoding (Johnson and Goldwater, 2009) in which we assign to each source position j the target position that was most often sampled as a value for Aj . If most of the time the collocation variable Zj was active, however, we leave that source position unaligned.",
                    "sid": 182,
                    "ssid": 73,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "experiments and results. ",
            "number": "5",
            "sents": [
                {
                    "text": "All experiments were run using the Moses phrase-based system (Koehn et al., 2007) with lexicalized reordering.",
                    "sid": 183,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to speed up our experiments we used cube pruning with a pop limit of 1000 in both tuning and evaluation.",
                    "sid": 184,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Symmetrised alignments were obtained with the grow-diag-final-and heuristic.",
                    "sid": 185,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Data We used the WMT 2014 news commentary data9 to train our models and the corresponding dev (newstest2013) and test (newstest2014) sets for tuning and evaluation.",
                    "sid": 186,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use all available monolingual data to train 5-gram language models with KenLM (Heafield, 2011).",
                    "sid": 187,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Models We report results for the Bayesian HMM described in Section 2 (BHMM) and our collocation- based model described in Section 3 (BHMM-Z).",
                    "sid": 188,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To enable comparison with standard alignment toolkits, we also report results with Giza++ and fastAlign (Dyer et al., 2013).",
                    "sid": 189,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, we make a comparison with the collocation-based IBM2 model of Schulz et al.",
                    "sid": 190,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2016) (BIBM2-Z).",
                    "sid": 191,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hyperparameters The hyperparameters of our model were set to \u03b2 = \u03b3 = 0.0001 to obtain sparse lexical distributions.",
                    "sid": 192,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the jump prior we chose \u03b1 = 1, not giving preference to any particular distribution.",
                    "sid": 193,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The same choices apply for the BIBM2-Z.",
                    "sid": 194,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, that model does not employ hyperparameter inference and we therefore set s = 1, r = 0.01.",
                    "sid": 195,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, the BHMM uses the same parameters as the previous two models, except those associated with the collocation variable.",
                    "sid": 196,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All samplers were run for 1000 iterations without burn-in and samples were taken after each 25th iteration.",
                    "sid": 197,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The initial state was chosen to be the Viterbi decoding of IBM model 1.",
                    "sid": 198,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For our auxiliary variable sampler we select exactly 2 candidates, thus making inference as fast as possible.",
                    "sid": 199,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Giza++ and fastAlign were run under their standard parameter settings.",
                    "sid": 200,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For Giza++ this means that we ran EM for IBM model 1 and the HMM (5 iterations each) and for IBM models 3 and 4 (3 iterations each).",
                    "sid": 201,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since 8 In the following exposition we will describe the resampling of S and assume a fixed value r. Resampling R works analogously with a fixed value s. 9 http://statmt.org/wmt14/translation-task.html 21.5 21 20.5 16 15.5 CS-EN \u2190 \u2194 EN-CS 21 20.5 20 19.5 16 15.8 15.6 DEEN \u2190 \u2194 ENDE 29 28 27 28.5 28 FREN \u2190 \u2194 ENFR 23 22.5 22 21.5 21 21 20 R U E N \u2190 \u2194 E N R U 15 14.5 14 15.4 15.2 15 27.5 2 7 1 9 26.5 18 \u2190 \u2194 \u2190 \u2194 \u2190 \u2194 \u2190 \u2194 G i z a Fa st Ali gn BI B M2 -Z BH M M B H MM Z Figure 1: BLEU scores for each translation direction trained on (\u2190) directional (condition on target and generate source) and (\u2194) symmetrised alignments (grow-diag-final-and).",
                    "sid": 202,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Observe that the plots are on different scales.",
                    "sid": 203,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This means that results cannot directly be compared across plots.",
                    "sid": 204,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "the maximum likelihood HMM is incorporated in the Giza++ pipeline, we do not report separate results for it.",
                    "sid": 205,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Results Figure 1 shows translation quality results in terms of BLEU for different aligners, where BHMM is the Bayesian HMM (Section 2) and BHMM-Z is our novel collocation-based model (Section 3).",
                    "sid": 206,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, BIBM2-Z is the model of Schulz et al.",
                    "sid": 207,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2016).",
                    "sid": 208,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To account for optimiser instability (MERT in this case), we plot average and standard deviation across 5 independent runs.",
                    "sid": 209,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that our Bayesian models perform mostly on par with maximum-likelihood models.",
                    "sid": 210,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the directional case, our Bayesian models lose to Giza++ only in DEEN by a very slim margin.",
                    "sid": 211,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Except for ENDE (symmetrised) our models are never worse than fastAlign.",
                    "sid": 212,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, our models perform notably well on Czech and Russian outperforming the maximum-likelihood models.",
                    "sid": 213,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, except for ENFR (directional), our collocation-based BHMM-Z improves upon the more basic BHMM.",
                    "sid": 214,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It also often improves upon the BIBM2-Z.",
                    "sid": 215,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That model is only better on the symmetrised English-French data where it outperforms all other models.",
                    "sid": 216,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also analysed the number of alignment links that our systems set.",
                    "sid": 217,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is noteworthy that the Bayesian HMM with NULL words consistently sets much fewer links than all other systems.",
                    "sid": 218,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Taking BHMM as baseline other models set additionally (on average across languages and translation direction) 39.5% (our collocation-based model), 39.2% (Giza++), and 36.2% (fastAlign) more links.",
                    "sid": 219,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Setting more links constrains phrase extraction heuristics more and leads to smaller phrase tables.",
                    "sid": 220,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Empirically, the phrase tables of the collocation-based model are roughly three times smaller than those of the Bayesian HMM.",
                    "sid": 221,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, the collocation-based system is at an advantage here.",
                    "sid": 222,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, in terms of speed, Giza++ takes on average (across languages and translation directions) 202 minutes on 2 CPUs, while BHMM and BHMM-Z take respectively 81 and 267 minutes in 1 CPU.10 The slower performance of BHMM-Z in relation to BHMM is not per se due to the sampling of collocation variables, but rather due to hyperparameter inference (see Section 4.4).",
                    "sid": 223,
                    "ssid": 41,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "related work. ",
            "number": "6",
            "sents": [
                {
                    "text": "There are several extensions of the classical IBM models.",
                    "sid": 224,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Dyer et al.",
                    "sid": 225,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2013) use a log-linear model for the distortion distribution.",
                    "sid": 226,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While they keep the independence assumptions for alignment links, they bias 10 The run times for our models include the computation of the initial state of the sampler with IBM model 1.",
                    "sid": 227,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The run time of the sampler itself is thus slightly lower than the reported times.",
                    "sid": 228,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Also notice that due to its highly optimised posterior computations, fastAlign finishes in under 10 minutes on average.",
                    "sid": 229,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "their model to preferably align positions which are close to each other.",
                    "sid": 230,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Using standard results for series, they manage to make the posterior computations in their model extremely fast.",
                    "sid": 231,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Another interesting extension of the HMM alignment is presented in Zhao and Gildea (2010) who added a fertility distribution to the HMM.",
                    "sid": 232,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This made posterior computations in their model intractable, however, they avoided the use of heuristics and instead approximated the posterior using MCMC.",
                    "sid": 233,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The idea of using Bayesian inference together with a Gibbs sampler for word alignment was first presented for IBM model 1 by Mermer and Sarac\u00b8lar (2011).",
                    "sid": 234,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They also gave a more detailed analysis of their method and extended it to IBM model 2 in Mermer et al.",
                    "sid": 235,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2013).",
                    "sid": 236,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model presented here is also similar in spirit to Schulz et al.",
                    "sid": 237,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2016) who proposed to use a language model component together with an alignment model.",
                    "sid": 238,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, they used IBM models 1 and 2 as alignment components.",
                    "sid": 239,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Apart from the present work, the only other work on Bayesian word alignment that we know of that performed as well as or better than Giza++ was presented in Gal and Blunsom (2013).",
                    "sid": 240,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These authors reformulated IBM models 14 as hierarchical PitmanYor processes.",
                    "sid": 241,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While their models are highly expressive, the Gibbs sampler based on Chinese Restaurant processes that they used is very slow and thus their models are unfortunately not useful in practice.",
                    "sid": 242,
                    "ssid": 19,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "discussion and future work. ",
            "number": "7",
            "sents": [
                {
                    "text": "We envision several useful extensions of our model for the future.",
                    "sid": 243,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Firstly, we plan to turn the language model distribution into a hierarchical distribution.",
                    "sid": 244,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We plan to use either a hierarchical Dirichlet process or PitmanYor process for this.",
                    "sid": 245,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The advantage of this technique is that information about untranslatable source words can be shared across preceding source words.",
                    "sid": 246,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Sampling from such a distribution using a Chinese Restaurant Process is potentially time-consuming.",
                    "sid": 247,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, we are confident that we can maintain a good speed if we apply our auxiliary variable technique and employ efficient samplers as described by Blei and Frazier (2011).",
                    "sid": 248,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since our model aligns many words and thus restricts the amount of phrases that can be extracted, it may also be a good alignment model for hierarchical phrase-based SMT.",
                    "sid": 249,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We plan to apply our model to this scenario in the future.",
                    "sid": 250,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The code used in our experiments is freely available at https://github.com/philschulz/ Aligner.",
                    "sid": 251,
                    "ssid": 9,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgements",
            "number": "",
            "sents": [
                {
                    "text": "We would like to thank Stella Frank for helpful discussions about hyperparameter inference.",
                    "sid": 252,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also thank our reviewers for their excellent feedback.",
                    "sid": 253,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This work was supported by the Dutch Organization for Scientific Research (NWO) VICI Grant nr.",
                    "sid": 254,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "27789-002.",
                    "sid": 255,
                    "ssid": 13,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}