{
    "ID": "W07-0802-parscit130908",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "The numeral system of Arabic is rich in its morphosyntactic variety yet suffers from the lack of a good computational resource that describes it in a reusable way.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This implies that applications that require the use of rules of the Arabic numeral system have to either reimplement them each time, which implieswasted resources, or use simplified, imprecise rules that result in low quality applications.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A solution has been devised withGrammatical Framework (GF) to use language constructs and grammars as librariesthat can be written once and reused in various applications.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we describe our implementation of the Arabic numeralsystem, as an example of a bigger implementation of a grammar library for Arabic.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We show that users can reuse our system by accessing a simple language-independent API rule.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "1.1 Problem.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Language technology and software localization con sume a significant share of many companies\u2019 timeand work.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Translating an operating system or an application to different languages involves, in the tra ditional approach, translating out-of-context strings into different languages.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This requires a languageexpert for each new language, and will still involve language-related problems because of the difficulty in translating out-of-context strings and tak ing care of morphological and syntactic variations at the same time.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We illustrate this with an example.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A mail reader application wants to display messages like You have 1 new message You have 2 new messages You have 3 new messages You have 100 new messagesIf these are to be translated into Arabic, special mor phological and syntactic considerations should bemade, which include inflecting \u201cmessage\u201d in num ber: \u2746 \u261b\u2777P\u261b ris\u00afalatun \u2720 \u2746\u261b\u270f\u274f\u261b 2 messages \u00e0\u2750\u2746 \u261b\u2777P\u261b ris\u00afalat\u00afani \u261b \u261b (310) messages \u27b1\u270c\u2751\u261b\u2746\u261b\u2777\u261bPras\u00afaVa (1199) messages \u00e9\u2750 \u270f\u2713\u261b \u2746 \u261b\u2777P\u261b ris\u00afalatan x100 messages \u00e9\u270f\u2713\u2750\u2746 \u261b\u2777P\u261b ris\u00afalatin \u261bSo the word \u201cmessages\u201d is translated into dif ferent words in Arabic, depending on the numeral counting it.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Counted nouns are an extreme example of how varied case inflection can be: The case of thesingular and the dual is determined by their syntac tic function (nominative in the example above).",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thisis not the case for plurals, which assume the geni tive case from three to ten ( \u27b1\u270c\u2751\u261b\u2746\u261b\u2777\u261bP is diptote, thus the \u261b \u261b\u2720 to nighty-nine, and genitive again for plurals that aremultiples of hundred.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is not to mention noun adjective agreement which should be taken care of when translating \u201cnew messages\u201d into Arabic.The aforementioned details should not be the responsibility of the application programmer, and hav 1 message \u270f\u2714\u00e9\u2750\u261b \u270f \u00e9\u2765\u261b\u274f \u270f\u27a5 marker), then accusative (singular) from eleven 9 Proceedings of the 5th Workshop on Important Unresolved Matters, pages 9\u201316, Prague, Czech Republic, June 2007.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "c\ufffd2007 Association for Computational Linguistics ing translators do this work over and over again for each application can be costly and lead to repeated work and/or poor results.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1.2 Solution and Contributions.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We reviewed in other works (Dada and Ranta, 2007) an approach that addresses problems in language technology similar but not limited to the above.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We applied this approach to Arabic, thus developing aresource grammar for Arabic in which we imple ment rules that cover the orthography, morphology,and syntax.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In short, this approach is based on de veloping libraries of natural language constructs andrules, which can be used by an application programmer who is not knowledgeable in a specific language.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The core programming language is Grammatical Framework (GF) (Ranta, 2004).",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The lan guage library, called a resource grammar (Khegai and Ranta, 2004) and comprising the linguistic rules, can be reused in applications through an Application Programming Interface (API) by programmers thatare unaware of the details of the specific natural language.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Such a programmer uses a resource gram mar assuming it will take care of morphological andsyntactic rules.",
                    "sid": 22,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "So far, we have implemented significant parts of the Arabic morphology, syntax, ortho graphic rules, and provided a sample lexicon of 300 words based on the Swadesh list (Hymes, 1960).",
                    "sid": 23,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we only describe part of the work, namely the numeral system of Arabic and its syntax.",
                    "sid": 24,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the next section we elaborate on the approach, the programming language that implements it, and on Resource Grammars.",
                    "sid": 25,
                    "ssid": 25,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "gf and the resource library. ",
            "number": "2",
            "sents": [
                {
                    "text": "GF is a special-purpose functional programminglanguage for defining grammars of (formal or natural) languages.",
                    "sid": 26,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A common API and resource gram mars for various natural languages accompany GFwith a purpose similar to that of libraries in gen eral programming languages: implementing piecesof code that can be reused by the application pro grammer.GF makes a distinction between abstract and con crete syntaxes.",
                    "sid": 27,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The common API specifies a set ofsyntactic rules that are language independent (abstract syntax), and the resource grammar imple ments each rule according to the particular rules of the language (concrete syntax).",
                    "sid": 28,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This latter involvesword order, agreement, case inflection, etc. This distinction can abstract over language-dependent fea tures and enables an application programmer to write sentences in a language only by describing their abstract syntax trees or by translating themfrom another language, preferably in a limited do main.",
                    "sid": 29,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The abstract representation would then act as interlingua.",
                    "sid": 30,
                    "ssid": 5,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "the numerals. ",
            "number": "3",
            "sents": [
                {
                    "text": "We give here an explanation of our treatment of the Arabic number system, namely the numerals and their counted nouns.",
                    "sid": 31,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our implementation is based on the work done by Hammarstr\u00a8om and Ranta (2004) in defining the cardinal numerals in GF.",
                    "sid": 32,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We will gradually give the governing grammar rules along with their our formal description in GF.",
                    "sid": 33,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The numbers from one to nineteen in Arabic have two forms, a masculine form and a feminine one, so in general we will take gender to be one of the inflecting attributes of numbers.",
                    "sid": 34,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Which of these two forms to use depends on the counted noun and the counting number: \u2022 The numerals 1 and 2 show gender agreement with the counted noun (their grammatical role is an adjective modifying this noun).",
                    "sid": 35,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Numerals 310 show gender polarity with the counted noun, so a masculine noun is counted with a number in its feminine form and vice \u261b versa, e.g. \u27ae\u2746 \u261b\u2763\u2733 P \u270f\u00e9\u2711\u2751\u2748\u2711\u2751 (three [+FEM] men \u261b [+MASC]) but \u2769\u2746 \u261b\u2776\u2720\u2722 \u2711\u274d\u2748\u2711\u2751 (three [+MASC] their first constituent an d the counted noun.",
                    "sid": 36,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(eleven [+MASC] men [+MASC]).",
                    "sid": 37,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Numbers 1319 show gender polarity between \u2022 Numbers further on, except those ending in 01 and 02, show no gender distinction.",
                    "sid": 38,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Numerals dictate the number of the counted noun is a way different to what is the case in other lan guages: \u2022 Numeral One: The noun is in the singular form.",
                    "sid": 39,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "women [+FEM]).",
                    "sid": 40,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Numbers 11 and 12 have two constituents which show gender agreement with each other \u2713 \u261b\u2745 and with the counted noun, e.g. \u2748\u2763\u2733 P \u25d7\u00e5\u2711\u261b\u2778 \u27a0 \u261b \u2768\u2763 10 \u2022 Numeral Two: The noun is in the dual form.",
                    "sid": 41,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Numerals 310: The noun is in the plural form, \u261b e.g. \u27ae\u2746 \u261b\u2763\u2733 P \u270f\u00e9\u2711\u2751\u2748\u2711\u2751 (three men [+PLUR]).",
                    "sid": 42,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Numerals &gt; 10: The noun is in singular form \u2713\u2720\u261e \u261b again, e.g. \u2748\u2763\u2733 P \u00e0The numbers inflect also in case, so in the gen eral case the number can have different forms forthe three cases: nominative, accusative, and geni tive.",
                    "sid": 43,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "But again, as with gender, this will depend on the particular range of numerals:\u2022 Numeral 1: full case distinction (it is an adjec tive) \u2022 Number 2: usually the noun in dual is used alone, and if the number 2 is specified then it is usually only for emphasis.",
                    "sid": 44,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this case it\u2019s an adjective in the dual form, thus it has two cases: nominative and oblique, e.g. \u2720\u00e0\u2746\u261b\u2720\u274f\u2711\u2751\u2745 \u2720\u00e0\u2745 \u261b\u2768\u2750\u00f0 [+NOM] and\u2720\u00e1\u2723\u2721\u274f\u261b\u2720\u2751\u2745 \u2720\u00e1\u2751\u2721 \u261b\u2768\u2750\u00f0 [+OBL].",
                    "sid": 45,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2711 \u2022 Numerals 310 : full case distinction for the numbers; the counted noun is always genitive, e.g.\u25a0\u2733\u274f\u27ba \u261e\u270f\u00e9\u2776\u00d4\u2763\u2720 (five [+NOM] books [+GEN]), \u270f \u270f\u2713 \u25a0\u274f\u27ba \u261b\u270f\u00e9\u2776\u00d4 \u2763\u2720(five [+ACC] books [+GEN]), \u2733 \u25a0\u2713 \u270f \u2733\u274f\u27ba\u270f\u00e9\u261b\u2776\u00d4 \u2763\u2720 (five [+GEN] books [+GEN]).",
                    "sid": 46,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2713 \u2022 Numerals 11 and 1319: only accusative, same as their counted noun, e.g. \u2746\u2713\u00d2\u2703\u270f\u27a5 \u261b\u25d7\u00e5\u2711\u2778\u261b\u27a0 \u270f\u261b \u261b\u00e9\u279f\u2751\u2733P\u2745 (fourteen [+ACC] pens [+ACC]).",
                    "sid": 47,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 12: same as 2, but the counted noun is always accusative \u2022 The tens (20, 30, ...",
                    "sid": 48,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "90): nominative and oblique cases, the counted noun is accusative \u2022 multiples of 100 or 1000: the counted noun is genitive.",
                    "sid": 49,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 composites: the case distinction of the number is the same as each of its constituent parts, and the case of the counted noun is determined bythe rule of the last part of the compound con struction.",
                    "sid": 50,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, 23: the three follows the rule of 310, the 20 follows the rule of the tens, and the counted noun is accusative as inthe rule of the tens, the last part of the construc tion twenty three (three and twenty in Arabic).",
                    "sid": 51,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The rules above only treat the indefinite state of the numerals, since the numerals in the definite state will be an adjective modifying the noun.",
                    "sid": 52,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The case of such a noun will not then follow the rules above but will assume the case dictated by its syntactic role in the sentence.",
                    "sid": 53,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We do however give below the typeof the numerals inflection table including all the at tributes that a number can inflect in: gender, state, and case.",
                    "sid": 54,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "lincat Numeral = { s Gender =&gt; State =&gt; Case =&gt; Str ; n Size } ; param Size = One |Two |ThreeTen |Teen |NonTeen |Hundreds |None ; param Gender = Masc |Fem ; State = Def |Indef |Const ; Case = Nom |Acc |Gen ; The lincat (linearize category) statement defines the type of a numeral in Arabic.",
                    "sid": 55,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It states that in GF, an Arabic numeral is a record that comprises two fields.",
                    "sid": 56,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first is a string s which is in this case an inflection table specifying that a numeral is inflected in gender, state, and case.",
                    "sid": 57,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The =&gt; operator is the table operator in GF, so having three inputs to the table means that a Numeral is inflected in these three attributes.",
                    "sid": 58,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The three inflectional attributes are defined as parameters that take one of predefined values: gender can be masculine or feminine, case can be nominative, accusative, or genitive, and statecan be definite with al, definite with a genitive con struction ( \u270f\u00e9\u27a5\u2746 \u261b\u2720\u2787\u2745\u261b) or indefinite.",
                    "sid": 59,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The second field is n \u261b\u2720 of type Size, which is also defined as a parameter with several possible values.",
                    "sid": 60,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These values specify which range of numbers does the numeral belong to.",
                    "sid": 61,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is needed to be able to apply the rules above properly at all stages, including the formation of the number and the formation of the noun phrase from the number and the counted noun.",
                    "sid": 62,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As mentioned earlier, GF differentiates betweenabstract and concrete syntaxes, and this differentia tion also applies for the numeral system.",
                    "sid": 63,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "So first an abstract syntax defines how numbers are formed ina language-independent way.",
                    "sid": 64,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The numbers are de fined in a way that draws similarities found across languages in the formation of compound numbers.",
                    "sid": 65,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We linearize the rules into Arabic thus making use of this division but making distinctions because of the special rules that govern numerals in Arabic.",
                    "sid": 66,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Atypical example of such numbers is the special treat \u00f1 \u2751 \u2711 \u2748\u2711\u2751 (thirty men [+SING]).",
                    "sid": 67,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "11 ment that numbers ending in 2 have in Arabic due to the notion of the dual.",
                    "sid": 68,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We give here the rules for the first division ofnumbers and show how we implement them for Ara bic.",
                    "sid": 69,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The API specifies the following categories and rules for numbers less than ten: cat Digit ; -- 2..9 Sub10 ; -- 1..9 fun n2, n3, n4, n5, n6, n7, n8, n9 : Digit ; pot01 : Sub10 ; -- 1 pot0 : Digit -&gt; Sub10 ; -- d * 1So the number 1 is treated separately from the re maining digits.",
                    "sid": 70,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We want to preserve a difference inour Arabic implementation between n2 and the re maining digits because of the different way the digit 2 combines in compound numbers later on.",
                    "sid": 71,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is the motivation between the division seen in Size between Two and ThreeTen.",
                    "sid": 72,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Following is the type of the categories above in Arabic (the concrete syntax): lincat Digit = { s : DForm =&gt; Gender =&gt; State =&gt; Case =&gt; Str; n : Size } ; lincat Sub10 = { s : DForm =&gt; Gender =&gt; State =&gt; Case =&gt; Str; n : Size } ; param DForm = unit |ten ; The inflection table shows what we discussed earlier, that Arabic numbers get in the general case inflected in gender, state, and case.",
                    "sid": 73,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The DForm is used to calculate both the digit and its multiple of ten.",
                    "sid": 74,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We write functions that form the inflection tables of the digits: one function for numeral 2 (num2, notshown here) and one function for the rest of the dig its, including 1 (num1_10, shown below).",
                    "sid": 75,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 oper num1_10 : Str -&gt; { s : DForm =&gt; Gender =&gt; State =&gt; Case =&gt; Str } = \\xams -&gt; let xamsa = xams + &amp;quot;ap&amp;quot; in { s= table { unit =&gt; table { Masc =&gt; \\\\s,c =&gt; (sing xams) ! s ! c; 1Our grammar files are in unicode, but the example codesshown here are written using the Buckwalter (2003) translitera tion with a few changes that suit our needs.",
                    "sid": 76,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We note our use of \u2018c\u2019 to denote the sayn.",
                    "sid": 77,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Fem =&gt; \\\\s,c =&gt; Al ! s + xamsa + dec1sg ! s ! c }; ten =&gt; \\\\_,s,c =&gt; Al ! s + xams + m_pl ! Indef ! c } };Note the following GF syntax notations: The keyword oper defines a GF function.",
                    "sid": 78,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An oper judg ment includes the name of the defined operation (e.g. num1_10 in the example above), its type (e.g. Str -&gt; { s : DForm =&gt; Gender=&gt; State =&gt; Case =&gt; Str }), and an expression defining it (everything after the = opera tor).",
                    "sid": 79,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As for the syntax of the defining expression, notice the lambda abstraction form \\x -&gt; t of the function.",
                    "sid": 80,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Inflection tables are either specified by the table keyword or using the shorthand \\\\...",
                    "sid": 81,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "=&gt; notation.",
                    "sid": 82,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, + is the character concatenation operator and ! is the table selection operator.",
                    "sid": 83,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The num1_10 function takes a string which can be any of the stems of the numerals from one to ten excluding two, e.g. \u02d8hams.",
                    "sid": 84,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "From this stem, andusing helping functions from the nominal morphology modules, we build the inflection table of the nu meral.",
                    "sid": 85,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, for the case where DForm is unit and the Gender is feminine (e.g. \u02d8hamsah),the actual numeral string would be the concatena tion of a possible definite marker (al), the stem, and a suffix determined by the state and the case of the numeral, s and c respectively.",
                    "sid": 86,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The helping function that determines if the definite marker is needed is the following: Al : State =&gt; Str = table { Def =&gt; &amp;quot;Al&amp;quot;; =&gt; &amp;quot;&amp;quot; _ }; The second helping function defines the suffixes that attach to singular or broken plurals of the first (strong) declension of Arabic nominal words (Rets\u00a8o, 1984).",
                    "sid": 87,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It calculates, given the state of the word and its case, what its suffix will be.",
                    "sid": 88,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that N, F, andK are the nominative, accusative, and genitive nuna tion diacritics.",
                    "sid": 89,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "dec1sg : State =&gt; Case =&gt; Str = table { Indef =&gt; table { Nom =&gt; &amp;quot;N&amp;quot;; Acc =&gt; &amp;quot;F&amp;quot;; 12 Gen =&gt; &amp;quot;K&amp;quot; other categories don\u2019t show any different logic and }; will not be detailed here.",
                    "sid": 90,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first rule we give is for _ =&gt; the special cases of numeral 11: table { fun Nom =&gt; &amp;quot;u&amp;quot;; pot111 : Sub100 ; Acc =&gt; &amp;quot;a&amp;quot;; Gen =&gt; &amp;quot;i&amp;quot; } lin pot111 = { }; s = \\\\g,d,_ =&gt; As expected, only words with indefinite state take case g of { double diacritics (nunation), where as the rest (alMasc =&gt; Al ! d + &amp;quot;&gt;aHada&amp;quot; ++ teen ! Masc; definite or construct-definite words) take simple diFem =&gt; Al ! d + &amp;quot;&lt;iHdaY&amp;quot; ++ teen ! Fem acritics.",
                    "sid": 91,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The remaining helping functions will not be }; all explained here as they follow similar logic.",
                    "sid": 92,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "n = NonTeen The num1_10 and num2 produce only the inflec- }; tion tables (the s field of the digit record).",
                    "sid": 93,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We simoper teen : Gender =&gt; Str = ply add the correct Size parameter to each digit as table { follows: Masc =&gt; &amp;quot;ca$ara&amp;quot;; oper num3_10 : Str -&gt; { s : DForm =&gt; Gender Fem =&gt; &amp;quot;ca$rapa&amp;quot; =&gt; State =&gt; Case =&gt; Str ; n : Size } = }; \\xams -&gt; The implementation shows how the qualitative num1_10 xams ** { n = ThreeTen } ; rules stated at the beginning are described formally.",
                    "sid": 94,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "lin n2 = num2 ** {n = Two }; The inflection table doesn\u2019t give different forms for lin n3 = num3_10 &amp;quot;valAv&amp;quot;; the three cases, and the accusative is used whatever lin n4 = num3_10 &amp;quot;&gt;arbac&amp;quot;; the context case is. Both parts of the construction lin n5 = num3_10 &amp;quot;xams&amp;quot;; show gender agreement.",
                    "sid": 95,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "lin n6 = num3_10 &amp;quot;sit\u02dc&amp;quot;; The numbers 1219 have a common rule in thelin n7 = num3_10 &amp;quot;sabc&amp;quot;; API but we should differentiate in the Arabic linlin n8 = num3_10 &amp;quot;vamAnI&amp;quot;; earization between 12 and 1319 because of the spe lin n9 = num3_10 &amp;quot;tisc&amp;quot;; cial status of the dual in Arabic and the different rules that these numbers assume in Arabic (see rules above).",
                    "sid": 96,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "lin pot01 = num1_10 &amp;quot;wAHid&amp;quot; ** { n = One } ; fun lin pot0 d = d ; pot1to19 : Digit -&gt; Sub100 ; -- 10 + d The last function in the linearization shown above, pot0, is used to promote a Digit into a Sub10 in order to use it later on as any numeralless that ten.",
                    "sid": 97,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is the way the API specifies dif ferent numerals, dividing them into categories based on the decimal system.",
                    "sid": 98,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We give here the rest of the API categories and their linearization in Arabic: cat Sub100 ; -- 1..99 Sub1000 ; -- 1..999 Sub1000000 ; -- 1..999999 lincat Sub100 = { s : Gender =&gt; State =&gt; Case =&gt; Str ; n : Size } ;We will now show only a few implementation ex amples of the rules that specify the formation of the Sub100 category.",
                    "sid": 99,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The rest of the rules for this and lin pot1to19 dig = { s = \\\\g,d,c =&gt; case dig.n of { Two =&gt; Al ! d + num2.s ! unit ! g ! Const ! c ++ teen ! g ; _ =&gt; dig.s ! unit ! g ! Const ! Acc ++ teen !",
                    "sid": 100,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(genPolarity ! g) }; n = case dig.n of { Two =&gt; NonTeen; _ =&gt; Teen } }; oper genPolarity : Gender =&gt; Gender = table { Masc =&gt; Fem; Fem =&gt; Masc };The pot1to19 function takes a Digit as argu ment.",
                    "sid": 101,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our implementation we take cases for the 13 Size of the digit.",
                    "sid": 102,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When the Size is Two, i.e. the number will be 12, we apply the rules for number12 as given in the beginning: gender agreement be tween the two constituents, the first constituent is inflected in case (it is basically number 2 in the Const state).",
                    "sid": 103,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Otherwise (when the digit size is ThreeTen), we apply the rules of numbers 1319: gender polarity between the two constituents and the first constituent is the digit inflected for the construct state and accusative case.",
                    "sid": 104,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The second constituent for all the numbers 1119 is always accusative as shown in the teen helping function before.",
                    "sid": 105,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The rest of the rules for forming numbers will not be detailed here.",
                    "sid": 106,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Instead we will explain how all these numbers will combine with nouns to formnoun phrases.",
                    "sid": 107,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The different number ranges as defined by the Size parameter will be now used ex tensively in applying the proper rules.",
                    "sid": 108,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Following is the rule that takes that takes a Determiner (which can, among others, be a numeral) and a common noun to give a noun phrase.",
                    "sid": 109,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "fun DetCN : Det -&gt; CN -&gt; NP ; The rule above has the same type in all languagessince it\u2019s part of the language-independent API (ab stract syntax).",
                    "sid": 110,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The advantage of this is that a user of our system can access the Arabic numerals at thishigh level of abstraction, without being knowledge able about the details of our implementation.",
                    "sid": 111,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When determiners combine with common nouns in the general case, it will make a difference whether or not the determiner was a numeral, and if it werethen the range of the numeral will probably deter mine the case of the noun in the resulting NP.",
                    "sid": 112,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus the type of the determiner category should include a Size field which is taken directly from the size of the number if that determiner is a numeral: lincat Det = { s : Species =&gt; Gender =&gt; Case =&gt; Str ; d : State; n : Size } ; param Species = NoHum |Hum ; If the determiner is not a numeral, then this will be denoted by n = None.",
                    "sid": 113,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first determiner-noun modification we will introduce is the determiner\u2019s gender.",
                    "sid": 114,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If we don\u2019tconsider numerals, then a determiner\u2019s gender is di rectly deduced from that of the noun.",
                    "sid": 115,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "But, as we saw in the rules for Arabic counted nouns, if the numeral was in the range 310 or 1319 (Size is ThreeTenor Teen), then the numeral will show gender po larity instead of agreement.",
                    "sid": 116,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The rest of the cases continue to show agreement.",
                    "sid": 117,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is described in detGender: oper detGender : Gender -&gt; Size -&gt; Gender = \\g,s -&gt; case s of { ThreeTen |Teen =&gt; genPolarity ! g; _ =&gt; g }; The arguments are the gender of the noun and thesize of the determiner.",
                    "sid": 118,
                    "ssid": 88,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The correct gender of the de terminer is calculated after taking cases of the Size.",
                    "sid": 119,
                    "ssid": 89,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Again, if we were not to consider numerals, the number in which we should inflect the commonnoun (singular, dual, or plural) would be directly de termined by the number of the determiner.",
                    "sid": 120,
                    "ssid": 90,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Now with the consideration of numerals and their special rules that dictate the number of the counted noun, we have to specify a correcting function: oper sizeToNumber : Size -&gt; Number = \\s -&gt; case s of { ThreeTen |None =&gt; Pl; Two =&gt; Dl; _ =&gt;Sg } ; param Number = Sg |Dl |Pl;This function converts from the Size of the de terminer to a number in which the noun should beinflected in.",
                    "sid": 121,
                    "ssid": 91,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As the rules of Arabic numerals spec ify, only the 310 numeral range dictate a noun in the plural form.",
                    "sid": 122,
                    "ssid": 92,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Apart from the dual, the remaining numeral ranges take a singular noun.",
                    "sid": 123,
                    "ssid": 93,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The last way that a numeral will affect the noun it counts is by specifying its case as we have already seen in the rules.",
                    "sid": 124,
                    "ssid": 94,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Without considering numerals, the case of the noun would always be determined by its grammatical role in the sentence.",
                    "sid": 125,
                    "ssid": 95,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Again, this changes with the introduction of numerals.",
                    "sid": 126,
                    "ssid": 96,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We write now a function that takes the case from the sentence, along with the size and state of the determiner, and modifies the case if required: oper nounCase : Case -&gt; Size -&gt; State -&gt; Case = \\c,size,s -&gt; 14 lin DetCN det cn = let number = sizeToNumber det.n in { s = \\\\c =&gt; det.s ! cn.h !",
                    "sid": 127,
                    "ssid": 97,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(detGender cn.g det.n) ! c ++ cn.s ! number !",
                    "sid": 128,
                    "ssid": 98,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(nounState det.d number) !",
                    "sid": 129,
                    "ssid": 99,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(nounCase c det.n det.d); a = agrP3 cn.h cn.g number }; case &lt;size,s&gt; of { &lt;Teen,_&gt; =&gt; Acc; &lt;NonTeen,_&gt; =&gt; Acc; &lt;ThreeTen,_&gt; =&gt; Gen; &lt;Hundreds,_&gt; =&gt; Gen; &lt;_,Const&gt; =&gt; Gen; =&gt; c }; Numbers from 11 to 99 dictate the accusative case on the nouns they count, numbers from 3 to 10 and multiples of hundred dictate the genitive case of the nouns they count, and the remaining numbers (1 and 2) don\u2019t change the case determined by the context.",
                    "sid": 130,
                    "ssid": 100,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The remaining case of State = Const takes care of the id. \u00afafah genitive constructions.",
                    "sid": 131,
                    "ssid": 101,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, after applying all the \u201ccorrection\u201d functions above, we get the following implementation of the noun determination rule: oper agrP3 : Species -&gt; Gender -&gt; Number -&gt; PerGenNum= \\h,g,n -&gt; case &lt;h,n&gt; of { &lt;NoHum,Pl&gt; =&gt; Per3 Fem Sg; _ =&gt; Per3 g n }; The agrP3 helping function tests for the case when the species and number are nonhuman andplural.",
                    "sid": 132,
                    "ssid": 102,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This case is treated in agreement as the fem inine singular.",
                    "sid": 133,
                    "ssid": 103,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "related work. ",
            "number": "4",
            "sents": [
                {
                    "text": "A large-scale implementation of the Arabic morphological system is the Xerox Arabic Morphologi cal Analyzer and Generator (Beesley and Karttunen,2000; Beesley, 2001).",
                    "sid": 134,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This system is developed us ing only the Xerox Finite State Technology tools(Beesley and Karttunen, 2003) from which an Arabic Finite State Lexical Transducer is written.",
                    "sid": 135,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A re search version is available for online testing, and an expanded and updated version can be obtained witha commercial license.",
                    "sid": 136,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Another notable computational model of the Arabic morphology is Tim Buckwalter\u2019s Arabic Morphological Analyzer (Buckwal ter, 2004b,a).",
                    "sid": 137,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Buckwalter\u2019s analyzer parses Arabicwords and gives all their possible morphological in terpretations, each solution having a unique lemma ID, different word constituents, the part-of-speech, and English glosses.",
                    "sid": 138,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Other works that also use functional languages forthe treatment of Arabic include a morphology system by Smr\u02c7z (in prep.).",
                    "sid": 139,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This work is based on Func tional Morphology (Forsberg and Ranta, 2004), a methodology for building morphological systems in the Haskell programming language.",
                    "sid": 140,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our treatment of Arabic shares similarities with that of Functional Morphology.",
                    "sid": 141,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Both approaches use typed languages, making use of finite algebraic datatypes to define linguistic categories.",
                    "sid": 142,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Both languages are functional,so the approaches use functions to realize linguis tic abstractions.",
                    "sid": 143,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A large-scale implementation ofthis approach, in which a typed functional program ming language is used to build a morphology, isHuet\u2019s Sanskrit dictionary and morphological sys tem (Huet, 2006) upon which the Zen computational linguistics toolkit is based (Huet, 2005).Of the available works in Arabic syntax, we mention ElShishiny (1990) who developed a formal description of Arabic syntax in Definite Clause Gram mar. We also make note of the work in Othman et al.",
                    "sid": 144,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2003), where the authors describe a parser they wrote in Prolog to parse and disambiguate the Arabic sentence.",
                    "sid": 145,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Shaalan (2005) builds on this workto develop a syntax-based grammar checker for Ara bic called Arabic GramCheck.",
                    "sid": 146,
                    "ssid": 13,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "discussion. ",
            "number": "5",
            "sents": [
                {
                    "text": "Our implementation of the Arabic numerals covers all natural numbers in the range 1999,999.",
                    "sid": 147,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thiswas accomplished by implementing only a few functions, thanks to the repetitive way in which numer als are composed to form larger numerals.",
                    "sid": 148,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As forperformance, Arabic grammars are slower to compile than comparable GF grammars of other lan guages, partly because of the additional complexity of Arabic and partly because of the general way in which our lexicon is specified.",
                    "sid": 149,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our implementation stresses more on elegance and generality rather than efficiency, thus more work needs to be done on the latter.",
                    "sid": 150,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "_ 15",
                    "sid": 151,
                    "ssid": 5,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "conclusion. ",
            "number": "6",
            "sents": [
                {
                    "text": "We discussed in this paper the details of implement ing the Arabic numeral system in GF.",
                    "sid": 152,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We motivated our work by taking an example that shows the value of having the necessary language rules implementedin a reusable fashion.",
                    "sid": 153,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We built up our implementa tion towards a single language-independent rule that a user can call to access our system.",
                    "sid": 154,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We show howthe grammar formalism we use in our implementa tion parallels the way linguists think.",
                    "sid": 155,
                    "ssid": 4,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgments",
            "number": "",
            "sents": [
                {
                    "text": "Most of the work was done at Chalmers Univer sity of Technology.",
                    "sid": 156,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thanks to Prof. Aarne Ranta for supervising this work and providing constanthelp.",
                    "sid": 157,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Also thanks to Bj\u00a8orn Bringert, Harald Ham marstr\u00a8om, and Otakar Smr\u02c7z for giving valuable comments.",
                    "sid": 158,
                    "ssid": 7,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}