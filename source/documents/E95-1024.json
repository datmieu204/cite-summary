{
    "ID": "E95-1024",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "A novel approach to HPSG based natural language processing is described that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing, and inputs the primed grammar to an advanced Earley-style processor.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This way we provide an elegant solution to the problems with empty heads and efficient bidirectional processing which is illustrated for the special case of HPSG generation.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Extensive testing with a large HPSG grammar revealed some important constraints on the form of the grammar.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Bidirectionality of grammar is a research topic in natural language processing that is enjoying increasing attention (Strzalkowski, 1993a).",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is mainly due to the clear theoretical and practical advantages of bidirectional grammar use (see, among others, Appelt, 1987).",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We address this topic in describing a novel approach to HPSG (Pollard and Sag, 1994) based language processing that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing, and hands the primed grammar to an advanced Earley processor.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The developed techniques are direction independent in the sense that they can be used for both generation and parsing with HPSG grammars.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we focus on the application of the developed techniques in the context of the comparatively neglected area of HPSG generation.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Shieber (1988) gave the first use of Earley's algorithm for generation, but this algorithm does not *The presented research was sponsored by 'l~eilprojekt B4 \"Constraints on Grammar for Efficient Generation\" of the Sonderforschungsbereich 340 \"Sprachtheoretische Grundlagen fiir die Computerllnguistik\" of the Deutsche Forschungsgemeinschaft.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The authors wish to thank Paul King, Detmar Meurers and Shuly Wintner for valuable comments and discussion.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Of course, the authors are responsible for all remaining errors.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "use the prediction step to restrict feature instantiations on the predicted phrases, and thus lacks goal- directedness.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Though Gerdemann (1991) showed how to modify the restriction function to make top- down information available for the bottom-up completion step, Earley generation with top-down prediction still has a problem in that generating the sub- parts of a construction in the wrong order might lead to massive nondeterminacy or even nontermination.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Gerdemann (1991) partly overcame this problem by incorpQrating a head-driven strategy into Earley's algorithm.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, evaluating the head of a construction prior to its dependent subparts still suffers from efficiency problems when the head of a construction is either missing, displaced or underspecified.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, Martinovid and Strzalkowski (1992) and others have observed that a simple headfirst reordering of the grammar rules may still make insufficient restricting information available for generation unless the form of the grammar is restricted to unary or binary rules.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Strzalkowski's Essential Arguments Approach (Ehh; 1993b) is a top-down approach to generation and parsing with logic grammars that uses off-line compilation to automatically invert parser-oriented logic grammars.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The inversion process consists of both the automatic static reordering of nodes in the grammar, and the interchanging of arguments in rules with recursively defined heads.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is based on the notion of essential arguments, arguments which must be instantiated to ensure the efficient and terminating execution of a node.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Minnen et al.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1995) observe that the EAA is computationally infeasible, because it demands the investigation of almost all possible permutations of a grammar.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, the interchanging of arguments in recursive procedures as proposed by Strzalkowski fails to guarantee that input and output grammars are semantically equivalent.",
                    "sid": 22,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The Direct Inversion Approach (DI,~) of Minnen et al.",
                    "sid": 23,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1995) overcomes these problems by making the reordering process more goal-directed and developing a reformulation technique that allows the successful treatment of rules which exhibit head-recursion.",
                    "sid": 24,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Both the EAA and the DIA were presented as approaches to the inversion of parser- 2.1 Optimizations oriented grammars into grammars suitable for generation.",
                    "sid": 25,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, both approaches can just as well take a declarative grammar specification as input to produce generator and/or parser-oriented grammars as in Dymetman et al.",
                    "sid": 26,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1990).",
                    "sid": 27,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper we adopt the latter theoretically more interesting perspective.",
                    "sid": 28,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We developed a compiler for off-line optimization of phrase structure rule-based typed feature structure grammars which generalizes the techniques developed in the context of the DIA, and we advanced a typed extension of the Earley-style generator of Gerdemann (1991).",
                    "sid": 29,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Off-line compilation (section 3) is used to produce grammars for the Earley-style generator (section 2).",
                    "sid": 30,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We show that our use of off- line grammar optimization overcomes problems with empty or displaced heads.",
                    "sid": 31,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The developed techniques are extensively tested with a large HPSG grammar for partial vP topicallzation in German (iiinrichs et al., 1994).",
                    "sid": 32,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This uncovered some important constraints on the form of the phrase structure rules (phrase structure rules) in a grammar imposed by the compiler (section 4).",
                    "sid": 33,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Advanced Earley Generation As Shieber (1988) noted, the main shortcoming of Earley generation is a lack of goal-directedness that results in a proliferation of edges.",
                    "sid": 34,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Gerdemann (1991) tackled this shortcoming by modifying the restriction function to make top-down information available for the bottom-up completion step.",
                    "sid": 35,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Gerdemann's generator follows a head-driven strategy in order to avoid inefficient evaluation orders.",
                    "sid": 36,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "More specifically, the head of the right-hand side of each grammar rule is distinguished, and distinguished categories are scanned or predicted upon first.",
                    "sid": 37,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The resulting evaluation strategy is similar to that of the head-corner approach (Shieber et al., 1990; Gerdemann and IIinrichs, in press): prediction follows the main flow of semantic information until a lexical pivot is reached, and only then are the head- dependent subparts of the construction built up in a bottom-up fashion.",
                    "sid": 38,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This mixture of top-down and bottom-up information flow is crucial since the top- down semantic information from the goal category must be integrated with the bottom-up subcategorization information from the lexicon.",
                    "sid": 39,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A strict top- down evaluation strategy suffers from what may be called head-recursion,i.e. the generation analog of left recursion in parsing.",
                    "sid": 40,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Shieber et al.",
                    "sid": 41,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1990) show that a top-down evaluation strategy will fail for rules such as vP --* vp x, irrespective of the order of evaluation of the right-hand side categories in the rule.",
                    "sid": 42,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By combining the off-line optimization process with a mixed bottom-up/top-down evaluation strategy, we can refrain from a complete reformulation of the grammar as, for example, in Minnen et al.",
                    "sid": 43,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1995).",
                    "sid": 44,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We further improved a typed extension of Gerdemann's Earley generator with a number of techniques that reduce the number of edges created during generation.",
                    "sid": 45,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Three optimizations were especially helpful.",
                    "sid": 46,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first supplies each edge in the chart with two indices, a backward index pointing to the state in the chart that the edge is predicted from, and a forward index poinfing to the states that are predicted from the edge.",
                    "sid": 47,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By matching forward and backward indices, the edges that must be combined for completion can be located faster.",
                    "sid": 48,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This indexing technique, as illustrated below, improves upon the more complex indices in Gerdemann (1991) and is closely related to OLDT-resolution (Tamaki and Sato, 1986).",
                    "sid": 49,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1) active(Xo---~Xl*X2,1~2~ 2) active(X:--~.Y1Y2,~3)) 3) active(X2---*Y1.Y2, i,y 4) passive(X2--+ Y1 I/2 o, 2) Active edge 2 resulted from active edge 1 through prediction.",
                    "sid": 50,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The backward index of edge 2 is therefore identified with the forward index of edge 1.",
                    "sid": 51,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Completion of an active edge results in an edge with identical backward index.",
                    "sid": 52,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the case of our example, this would be the steps from edge 2 to edge 3 and edge 3 to edge 4.",
                    "sid": 53,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As nothing gets predicted from a passive edge (4), it does not have a forward index.",
                    "sid": 54,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to use passive edge 4 for completion of an active edge, we only need to consider those edges which have a forward index identical to the backward index of 4.",
                    "sid": 55,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The second optimization creates a table of the categories which have been used to make predictions from.",
                    "sid": 56,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As discussed in Gerdemann (1991), such a table can be used to avoid redundant predictions without a full and expensive subsumption test.",
                    "sid": 57,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The third indexes lexical entries which is necessary to obtain constant-time lexical access.",
                    "sid": 58,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The optimizations of our Earley-generator lead to significant gains in efficiency.",
                    "sid": 59,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, despite these heuristic improvements, the problem of goal- directedness is not solved.",
                    "sid": 60,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Empty or displaced heads present the principal goal- directedness problem for any head-driven generation approach (Shieber et al., 1990; K6nig, 1994; Gerdemann and IIinrichs, in press), where empty head refers not just to a construction in which the head has an empty phonology, but to any construction in which the head is partially unspecified.",
                    "sid": 61,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since 174 phonology does not guide generation, the phonological realization of the head of a construction plays no part in the generation of that construction.",
                    "sid": 62,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To better illustrate the problem that underspecified heads pose, consider the sentence: Hal Karl Marie geki~'flt f Has Karl Marie kissed?",
                    "sid": 63,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\"Did Karl kiss Mary?\" for which we adopt the argument composition analysis presented in Hinrichs and Nakazawa (1989): the subeat list of the auxiliary verb is partially instantiated in the lexicon and only becomes fully instantiated upon its combination with its verbal complement, the main verb.",
                    "sid": 64,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The phrase structure rule that describes this construction is 1 cat subcat 0]] cont cat v cat v lJ fin + aux + subcat ( ['3\"1l r\u00a51 ) L, ub\u00a2~t [EI [] I I Lcont [] Though a head-driven generator must generate first the head of the rule, nothing prescribes the order of generation of the complements of the head.",
                    "sid": 65,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the generator generates second the main verb then the subcat list of the main verb instantiates the subcat list of the head, and generation becomes a deterministic procedure in which complements are generated in sequence.",
                    "sid": 66,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, if the generator generates second some complement other than the main verb, then the subcat list of the head contains no restricting information to guide deterministic generation, and generation becomes a generate-and-test procedure in which complements are generated at random, only to be eliminated by further unifications.",
                    "sid": 67,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Clearly then, the order of evaluation of the complements in a rule can profoundly influence the efficiency of generation, and an efficient head-driven generator must order the evaluation of the complements in a rule accordingly.",
                    "sid": 68,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Dynamic, online reordering can solve the ordering problem discussed in the previous subsection, but is rather unattractive: interpreting grammar rules at 1For expository reasons, we refrain from a division between the subject and the other complements of a verb as in chapter 9 of Pollard and Sag (1994).",
                    "sid": 69,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The test-grammar does make this division and always guarantees the correct order of the complements on the comps list with respect to the obliqueness hierarchy.",
                    "sid": 70,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, we use abbreviations of paths, such as coat for syasemlloc[coat , and assume that the semantics principle is encoded in the phrase structure rule.",
                    "sid": 71,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "run time creates much overhead, and locally determining the optimal evaluation order is often impossible.",
                    "sid": 72,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Goal-freezing can also overcome the ordering problem, but is equally unappealing: goal-freezing is computationally expensive, it demands the procedural annotation of an otherwise declarative grammar specification, and it presupposes that a grammar writer possesses substantial computational processing expertise.",
                    "sid": 73,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We chose instead to deal with the ordering problem by using off-line compilation to automatically optimize a grammar such that it can be used for generation, without additional provision for dealing with the evaluation order, by our Earley generator.",
                    "sid": 74,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3 Off-line Grammar Optimization.",
                    "sid": 75,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our off-line grammar optimization is based on a generalization of the dataflow analysis employed in the DIA to a dataflow analysis for typed feature structure grammars.",
                    "sid": 76,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This dataflow analysis takes as input a specification of the paths of the start category that are considered fully instantiated.",
                    "sid": 77,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In case of generation, this means that the user annotates the path specifying the logical form, i.e., the path cont (or some of its subpaths), as bound.",
                    "sid": 78,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use the type hierarchy and an extension of the unification and generalization operations such that path annotations are preserved, to determine the flow of (semantic) information between the rules and the lexical entries in a grammar.",
                    "sid": 79,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Structure sharing determines the dataflow within the rules of the grammar.",
                    "sid": 80,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The dataflow analysis is used to determine the relative efficiency of a particular evaluation order of the right-hand side categories in a phrase structure rule by computing the maximal degree of nondeterminacy introduced by the evaluation of each of these categories.",
                    "sid": 81,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The maximal degree of nondeterminacy introduced by a right-hand side category equals the maximal number of rules and/or lexical entries with which this category unifies given its binding annotations.",
                    "sid": 82,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The optimal evaluation order of the right- hand side categories is found by comparing the maximal degree of nondeterminacy introduced by the evaluation of the individual categories with the degree of nondeterminacy the grammar is allowed to introduce: if the degree of nondeterminacy introduced by the evaluation of one of the right-hand side categories in a rule exceeds the admissible degree of nondeterminacy the ordering at hand is rejected.",
                    "sid": 83,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The degree of nondeterminacy the grammar is allowed to introduce is originally set to one and consecutively incremented until the optimal evaluation order for all rules in the grammar is found.",
                    "sid": 84,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.1 Example.",
                    "sid": 85,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The compilation process is illustrated on the basis of the phrase structure rule for argument composition discussed in 2.2.",
                    "sid": 86,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Space limitations force us to abstract over the recursive optimization of the rules defining the right-hand side categories through considering only the defining lexical entries.",
                    "sid": 87,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unifying the user annotated start category with the left-hand side of this phrase structure rule leads to the annotation of the path specifying the logical form of the construction as bound (see below).",
                    "sid": 88,
                    "ssid": 88,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a result of the structure-sharing between the left-hand side of the rule and the auxiliary verb category, the cont-value of the auxiliary verb can be treated as bound, as well.",
                    "sid": 89,
                    "ssid": 89,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, the paths with a value of a maximal specific type for which there are no appropriate features specified, for example, the path cat, can be considered bound: subcatbo..a cont b o ~.",
                    "sid": 90,
                    "ssid": 90,
                    "kind_of_tag": "s"
                },
                {
                    "text": "a ~llb\u00b0~nd + [ flnbound8.UXbound + , 53 , [2] , []l.UXbo.nd ~ ~ub~t (~I El', L, ub\u00a2~t []3157 LcOntbo~.a [] On the basis of this annotated rule, we investigate the lexical entries defining its right-hand side categories.",
                    "sid": 91,
                    "ssid": 91,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The auxiliary verb category is unified with its defining lexical entries (under preservation of the binding annotations).",
                    "sid": 92,
                    "ssid": 92,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The following is an example of such a lexical entry.",
                    "sid": 93,
                    "ssid": 93,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(Note that subpaths of a path marked as bound are considered bound too.)",
                    "sid": 94,
                    "ssid": 94,
                    "kind_of_tag": "s"
                },
                {
                    "text": "c~ttbound V finbou.4 + ~.UXbo,.~nd -I subcat <[contbou.4 ~> contbo..aInucleusbo~.aI argbo..a The binding annotations of the lexical entries defining the auxiliary verb are used to determine with how many lexical entries the right-hand side category of the rule maximally unifies, i.e., its maximal degree of nondeterminacy.",
                    "sid": 95,
                    "ssid": 95,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this case, the maximal degree of nondeterminacy that the evaluation of the auxiliary verb introduces is very low as the logical form of the auxiliary verb is considered fully instantiated.",
                    "sid": 96,
                    "ssid": 96,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Now we mark the paths of the defining lexical entries whose instantiation can be deduced from the type hierarchy.",
                    "sid": 97,
                    "ssid": 97,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To mimic the evaluation of the auxiliary verb, we determine the information common to all defining lexical entries by taking their generalization, i.e., the most specific feature structure subsuming all, and unify the result with the original right-hand side category in the phrase structure rule.",
                    "sid": 98,
                    "ssid": 98,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because both the generalization and the unification operations preserve binding annotations, this leads (via structure-sharing) to the annotation that the logical form of the verbal complement can be considered instantiated.",
                    "sid": 99,
                    "ssid": 99,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that the nonverbal complements do not become further instantiated.",
                    "sid": 100,
                    "ssid": 100,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By subsequent investigation of the maximal degree of nondeterminacy introduced by the evaluation of the complements in various permutations, we find that the logical form of a sentence only restricts the evaluation of the nonverbal complements after the evaluation of the verbal complement.",
                    "sid": 101,
                    "ssid": 101,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This can be verified on the basis of a sample lexical entry for a main verb.",
                    "sid": 102,
                    "ssid": 102,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\"phon lieben cat v fin aux subcat < [coat ['6]] ![cont rT]] , r,o o, c\u00b0nt ' numeus [loved r-#] j The relative efficiency of this evaluation leads our compiler to choose cat {}[~] subcat -----, [ cont cat vfin 4 ~UX ~L , [] aUX [i],[] L,ub\u00a2~t 531 [] Lcont [] as the optimal evaluation order of our phrase structure rule for argument composition.",
                    "sid": 103,
                    "ssid": 103,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.2 Processing Head.",
                    "sid": 104,
                    "ssid": 104,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The optimal evaluation order for a phrase structure rule need not necessarily be headfirst.",
                    "sid": 105,
                    "ssid": 105,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our dataflow anMysis treats heads and complements alike, and includes the head in the calculation of the optimal evaluation order of a rule.",
                    "sid": 106,
                    "ssid": 106,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the evaluation of the head of a rule introduces much nondeterminacy or provides insufficient restricting information for the evaluation of its complements, our dataflow analysis might not select the head as the first category to be evaluated, and choose instead subcat -----+ cont pat v >] It at v4 fin [] aux ~ux + , N, [] Lsubeat Fill [] L ~\u00b0nt [] ' as the optimal evaluation order.",
                    "sid": 107,
                    "ssid": 107,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This clearly demonstrates an extremely important consequence of using our dataflow analysis to compile a declarative grammar into a grammar optimized for generation.",
                    "sid": 108,
                    "ssid": 108,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Empty or displaced heads pose us no problem, since the optimal evaluation order of the right-hand side of a rule is determined regardless of the head.",
                    "sid": 109,
                    "ssid": 109,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our dataflow analysis ignores the grammatical head, but identifies instead the 'processing head', and (no less 176 importantly) the 'first processing complement', the 'second processing complement', and so on.",
                    "sid": 110,
                    "ssid": 110,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4 Constraints on Grammar.",
                    "sid": 111,
                    "ssid": 111,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our Earley generator and the described compiler for off-line grammar optimization have been extensively tested with a large HPSG grammar.",
                    "sid": 112,
                    "ssid": 112,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This test- grammar is based on the implementation of an analysis of partial vP topicalization in German (Hinrichs et al., 1994) in the Troll system (Gerdemann and King, 1994).",
                    "sid": 113,
                    "ssid": 113,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Testing the developed techniques uncovered important constraints on the form of the phrase structure rules in a grammar imposed by the compiler.",
                    "sid": 114,
                    "ssid": 114,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.1 Complement Displacement.",
                    "sid": 115,
                    "ssid": 115,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The compiler is not able to find an evaluation order such that the Earley generator has sufficient restricting information to generate all subparts of the construction efficiently in particular cases of complement displacement.",
                    "sid": 116,
                    "ssid": 116,
                    "kind_of_tag": "s"
                },
                {
                    "text": "More specifically, this problem arises when a complement receives essential restricting information from the head of the construction from which it has been extracted, while, at the same time, it provides essential restricting information for the complements that stayed behind.",
                    "sid": 117,
                    "ssid": 117,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Such a case is represented schematically in figure 1 (see next page).",
                    "sid": 118,
                    "ssid": 118,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first processing complement (el) of the head (H) has been displaced.",
                    "sid": 119,
                    "ssid": 119,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is problematic in case cl provides essential bindings for the successful evaluation of the complement c2.",
                    "sid": 120,
                    "ssid": 120,
                    "kind_of_tag": "s"
                },
                {
                    "text": "cl can not be evaluated prior to the head and once H is evaluated it is no longer possible to evaluate cl prior to c2.",
                    "sid": 121,
                    "ssid": 121,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An example of problematic complement displacement taken from our test-grammar is given in figure 2 (see next page).",
                    "sid": 122,
                    "ssid": 122,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The topicalized partial vP \"Anna lichen\" receives its restricting semantic information from the auxiliary verb and upon its evaluation provides essential bindings not only for the direct object, but also for the subject that stayed behind in the Mittelfeld together with the auxiliary verb.",
                    "sid": 123,
                    "ssid": 123,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These mutual dependencies between the sub- constituents of two different local trees lead either to the unrestricted generation of the partial vP, or to the unrestricted generation of the subject in the Mittelfeld.",
                    "sid": 124,
                    "ssid": 124,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We handled this problem by partial execution (Pereira and Shieber, 1987) of the filler-head rule.",
                    "sid": 125,
                    "ssid": 125,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This allows the evaluation of the filler right after the evaluation of the auxiliary verb, but prior to the subject.",
                    "sid": 126,
                    "ssid": 126,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A head-driven generator has to rely on a similar solution, as it will not be able to find a successful ordering for the local trees either, simply because it does not exist.",
                    "sid": 127,
                    "ssid": 127,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.2 Generalization.",
                    "sid": 128,
                    "ssid": 128,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A potential problem for our approach constitutes the requirement that the phrase structure rules in the grammar need to have a particular degree of specificity for the generalization operation to be used successfully to mimic its evaluation.",
                    "sid": 129,
                    "ssid": 129,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is best illustrated on the basis of the following, more 'schematic', phrase structure rule: [cat (}l~.]] [i at fin ~->1 v subcat _....",
                    "sid": 130,
                    "ssid": 130,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(~ ,ff]NN ubcat ,~],[~ ' ' Lcont [cont Underspecification of the head of the rule allows it to unify with both finite auxiliaries and finite ditransitive main verbs.",
                    "sid": 131,
                    "ssid": 131,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In combination with the underspecification of the complements, this allows the rule not only to be used for argument composition constructions, as discussed above, but also for constructions in which a finite main verb becomes saturated.",
                    "sid": 132,
                    "ssid": 132,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This means that the logical form of the nonverbal complements (if] and [~) becomes available either upon the evaluation of the complement tagged [] (in case of argument composition), or upon the evaluation of the finite verb (in case the head of the rule is a ditransitive main verb).",
                    "sid": 133,
                    "ssid": 133,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a result, the use of generalization does not suffice to mimic the evaluation of the respective right-hand side categories.",
                    "sid": 134,
                    "ssid": 134,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because both verbal categories have defining lexical entries which do not instantiate the logical form of the nonverbal arguments, the dataflow analysis leads to the conclusion that the logical form of the nonverbal complements never becomes instantiated.",
                    "sid": 135,
                    "ssid": 135,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This causes the rejection of all possible evaluation orders for this rule, as the evaluation of an unrestricted nonverbal complement clearly exceeds the allowed maximal degree of nondeterminacy of the grammar.",
                    "sid": 136,
                    "ssid": 136,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We are therefore forced to split this schematic phrase structure rule into two more specific rules at least during the optimization process.",
                    "sid": 137,
                    "ssid": 137,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is important to note that this is a consequence of a general limitation of dataflow analysis (see also Mellish, 1981).",
                    "sid": 138,
                    "ssid": 138,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 Concluding Remarks.",
                    "sid": 139,
                    "ssid": 139,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An innovative approach to HPSG processing is described that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing, and inputs the primed grammar to an advanced Earley processor.",
                    "sid": 140,
                    "ssid": 140,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our off-line compiler extends the techniques developed in the context of the DIA in that it compiles typed feature structure grammars, rather than simple logic grammars.",
                    "sid": 141,
                    "ssid": 141,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The approach allows efficient bidirectional processing with similar generation and parsing times.",
                    "sid": 142,
                    "ssid": 142,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is shown that combining off-line techniques with an advanced Earley-style generator provides an elegant solution to the general problem that empty or displaced heads pose for conventional head-driven generation.",
                    "sid": 143,
                    "ssid": 143,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The developed off-line compilation techniques make crucial use of the fundamental properties of the HPSG formalism.",
                    "sid": 144,
                    "ssid": 144,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The monostratal, uniform treatment of syntax, semantics and phonology supports H ] C2 l Figure 1: Complement displacement.",
                    "sid": 145,
                    "ssid": 145,
                    "kind_of_tag": "s"
                },
                {
                    "text": "c at v subcat () lover ...karl'...",
                    "sid": 146,
                    "ssid": 146,
                    "kind_of_tag": "s"
                },
                {
                    "text": "]] cont[~'[[ nucleus I arg[ nucleus loved anna' . Fcat ( )[~ll is:L, ~ F~/subcat Lcont slash cont [] \"cat v [] fin fin + aux + Fat n Fat n subcat ['g'] lease ~m [~] [case subcat ([~]) cont cont sl,.,h {D} slash {} eont I~llnueleuslarg [] lover cont [] nucleus [loved ~N-'I] Anna lieben wird Karl.",
                    "sid": 147,
                    "ssid": 147,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Anna love will Karl.",
                    "sid": 148,
                    "ssid": 148,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\"Karl will love Anna\" Figure 2: Example of problematic complement displacement.",
                    "sid": 149,
                    "ssid": 149,
                    "kind_of_tag": "s"
                },
                {
                    "text": "178.",
                    "sid": 150,
                    "ssid": 150,
                    "kind_of_tag": "s"
                },
                {
                    "text": "dataflow analysis, which is used extensively to provide the information upon which off-line compilation is based.",
                    "sid": 151,
                    "ssid": 151,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our compiler uses the type hierarchy to determine paths with a value of a minimal type without appropriate features as bound.",
                    "sid": 152,
                    "ssid": 152,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, the equivalent of this kind of minimal types in untyped feature structure grammars are constants which can be used in a similar fashion for off-line optimization.",
                    "sid": 153,
                    "ssid": 153,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}