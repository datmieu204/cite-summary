{
    "ID": "H91-1046",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "The paper presents a new algorithm for estimating the parameters of a hidden stochastic context-free grammar.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In contrast to the Inside/Outside (I/O) algorithm it does not require the grammar to be expressed in Chomsky normal form, and thus can operate directly on more natural representations of a grammar.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The algorithm uses a trellis-based structure as opposed to the binary branching tree structure used by the I/O algorithm.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The form of the trellis is an extension of that used by the Forward/Backward algorithm, and as a result the algorithm reduces to the latter for components that can be modeled as finite-state networks.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the same way that a hidden Markov model (HMM) is a stochastic analogue of a finlte-state network, the representation used by the new algorithm is a stochastic analogue of a recursive transition network, in which a state may be simple or itself contain an underlying structure.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "The algorithm described in this paper is concerned with using hidden Markov methods for estimation of the parameters of a stochastic context-free grammar from free text.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The Forward/Backward (F/B) algorithm (Baum, 1972) is capable of estimating the parameters of a hidden Markov model (i.e. a hidden stochastic regular grammar) and has been used with success to train text taggers (Jehnek, 1985).",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the tagging apphcation the observed symbols are words and their underlying lexical categories are the hidden states of the model.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A context-free grammar comprises both lexical (terminai) categories and grammatical (nonterminai) categories.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One iterative method of estimation in this case involves parsing each sentence in the training corpus and for each derivation, accumulating counts of the number of times each rule is used.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This method has been used by Fujisald et ai.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1989), and Chitrao & Grishman (1990).",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A more efficient method is the Inside/Outside algorithm, devised by Baker (1979) for grammars that are expressed in Chomsky normal form.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The algorithm described in this paper relaxes the requirement for a grammar to be expressed in a normal form, and it is based on a trellis representation that is closely related to the F/B algorithm, and which reduces to it for finite-state networks.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The development of the algorithm has various motivations.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Grammars must provide a large coverage to accommodate the diversity of expression present in large collections of unrestricted text.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a result they become more ambiguous.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A stochastic grammar provides the capability to resolve ambiguity on a probabilistic basis, providing a practical approach to the problem.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It also provides a way of modeling conditional dependence for incomplete grammars, or in the absence of any specific structural information.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The latter is exemplified by the approach taken in many current taggers, which have a uniform model of second-order dependency between word categories.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Kupiec (1989) has experimented with the inclusion of networks to model mixed-order dependencies.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The use of hidden Markov methods is motivated by the flexibility they afford.",
                    "sid": 22,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Text corpora from any domain can be used for training, and there are no restrictions on a grammar due to conventions used during labehng.",
                    "sid": 23,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The methods also lend themselves to multihngual application.",
                    "sid": 24,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The representation used by the algorithm can be related to constituent structures used in other parsers such as chart parsers, providing a means of embedding this technique in them.",
                    "sid": 25,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "REPRESENTATION The representation of a grammar and the basic trellis structure are discussed in this section.",
                    "sid": 26,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The starting point is 241 the conventional HMM network in which symbols are generated at states (rather than on transitions) as described in Network A Levinson et al.",
                    "sid": 27,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1983).",
                    "sid": 28,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Such a network is represented by the parameter set (A, B, I) comprising the transition, out put and initial matrices.",
                    "sid": 29,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The states in this kind of network will be referred to as terminal states from now on, and Will be represented pictorially with single circles.",
                    "sid": 30,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a shorthand convenience in what follows, if the circle contains a symbol, then it is assumed that only that symbol is ever generated by the state.",
                    "sid": 31,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(The probability of generating it is then unity, and zero for all other symbols.)",
                    "sid": 32,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A single symbol is generated by a transition to a terminal state.",
                    "sid": 33,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the grammars considered here, terminal states correspond to lexical categories.",
                    "sid": 34,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To this parameter set we will add four other parameters (N, F, To2, L).",
                    "sid": 35,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The boolean Top indicates whether the network is to be considered as the top-level network.",
                    "sid": 36,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Only one network may be assigned as the top-level network, and it is analogous to the root symbol of a grammar.",
                    "sid": 37,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The parameter F is the set of final states, specifying the allowable states in which a network can be considered to have accepted a sequence of observations.",
                    "sid": 38,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A different type of state will now be introduced, called a nonterminal state.",
                    "sid": 39,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It represents a reference to another network and is indicated diagrammatically with two concentric circles.",
                    "sid": 40,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When a transition is made to a nonterminal state, the state does not generate any observations per se, but terminal nodes within the referred network do.",
                    "sid": 41,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A nonterminal state may be associated with a sequence of observation symbols, corresponding to the sequence accepted by the underlying network.",
                    "sid": 42,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The parameter N is a matrix which indicates whether a state is a terminal or nonterminal state.",
                    "sid": 43,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Terminal states have a null entry in the matrix, and nonterminal states have a reference to the network which they represent.",
                    "sid": 44,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A grammar is usually composed of several networks, so each one is referred to with a unique label L. Figure 1 shows how rules in Chomsky normal form are represented as networks using the above scheme.",
                    "sid": 45,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The lexical form of the rules is included, illustrating how the left hand side of a rule corresponds to a network label, and the network structure is associated with the right-hand side.",
                    "sid": 46,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Terminal states are labeled in lower case and nonterminals in upper case.",
                    "sid": 47,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The numbers associated with the states are their initial probabilities which are also rule probabilities.",
                    "sid": 48,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For terminal nodes in the top-level network, initial probabilities have the same meaning as in the F/B algorithm.",
                    "sid": 49,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For all other networks, an initial probabihty corresponds to a production probability.",
                    "sid": 50,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "States which have a nonzero initial probability will be termed \"Initial states\" from now on.",
                    "sid": 51,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Any sequence recognized by a network must start on an initial state and end on a final state.",
                    "sid": 52,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Figure 1, final states are designated with the annotation \"F'.",
                    "sid": 53,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 2 shows how the terminal symbols in Figure 1 may be represented in a more compact style, by a single state having different B matrix probabilities for the symbols x and y. A-> BC (\u2022) -~~)F0.5 A -> x ~F 0.3 G A -> y F 0.2 Figure 1: Network and Rules for Chomsky Normal Form \u00a9F 0.5 Figure 2: Representation for Terminal Symbols Terminology A grammar is represented as a set A/\" of networks, and a component network labeled n is composed of parameters (A, B, I, N,F, Top, n).",
                    "sid": 54,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To strictly identify an element in the parameter set each element must be a function of its associated network (e.g. A(n), I(n) etc.).",
                    "sid": 55,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the following sections however, where the reference is obvious this notation has been omitted to make formulae less cumbersome.",
                    "sid": 56,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, given a network n E A[, an element of its transition matrix A, from state i to state j is written a(i, j).",
                    "sid": 57,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Likewise the initial probability for state i is I(i).",
                    "sid": 58,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Assuming that sentences are used as text units, an observation sequence may consist of Y + 1 words, indexed from 0 to Y: (WO, ~/)1, ~/)2...'tOY) Network State: 1 State: 2 Trellis Diagram start 1 end Figure 3: An Example Network and Trellis Diagram It is useful to define a lookup function W(y) which returns the index k of the vocabulary entry vk matching the word Wy at positioh y in the sentence.",
                    "sid": 59,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The vocabulary entry may be a word or an equivalence class based on categories (Kupiec, 1989).",
                    "sid": 60,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An element of the output matrix B, representing the the probability of seeing word wy in terminal state j is then b(j,W(y)).",
                    "sid": 61,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, three sets will be mentioned: 1.",
                    "sid": 62,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Term(n) The set of terminal states in network n. 2.",
                    "sid": 63,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Nonterm(n) This is the set of nonterminal states in network n. 3.",
                    "sid": 64,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Final(n) The set F of final states in network n. The predicate Top(n) indicates that n is a top-level network, and ~ Top(n) indicates it isn't.",
                    "sid": 65,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, the function N(p, n) returns the network to which state p in network n refers to.",
                    "sid": 66,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(If p is a terminal state it returns a null value).",
                    "sid": 67,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "TRELLIS DIAGRAM Figure 3 shows the form of the trellis diagrams that are used for the computation of probabilities.",
                    "sid": 68,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the F/B algorithm a single trellis is used, whose dimensions are the number of states in the network and the length of the sentence.",
                    "sid": 69,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A single trellis spans the whole sentence.",
                    "sid": 70,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the new algorithm each network has an associated set of trellises, for subsequences starting at different positions in a sentence and ending at subsequent ones.",
                    "sid": 71,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(Only a single trellis starting at w0 is shown in Figure 3.)",
                    "sid": 72,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It can be seen that terminal state 2 has corresponding nodes in the trellis diagram, but nonterminal state 1 is represented by pairs of nodes.",
                    "sid": 73,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One node of the pair is called the start node and the other is termed the end node.",
                    "sid": 74,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Paths exist in the trellis for possible state transitions between successive words.",
                    "sid": 75,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, it is also implicitly understood that paths also exist between the start node and subsequent end nodes for each nonterminal state.",
                    "sid": 76,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These implicit paths are shown as broken lines in Figure 3 and correspond to paths that enter network A at some time, and return from it at the same or a later time.",
                    "sid": 77,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The probabilities associated with the implicit paths are assigned by reference to the trellis diagrams of the appropriate network.",
                    "sid": 78,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An implicit path from a start node at position x to an end node at position y for a nonterminal state p can be thought of as a constituent labeled p, that dominates the words from positions x through to y (inclusive) in a sentence.",
                    "sid": 79,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A network n is deemed to include the sequence wx ...w~ if paths exists through the network which will generate this sequence or a longer one which includes it as a prefix.",
                    "sid": 80,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus it is not necessary to be at a final state of n at word w, to include w .... wy. The algorithm makes use of one set of trellis diagrams to compute \"alpha\" probabilities, and another for \"beta\" probabilities.",
                    "sid": 81,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These are both sprit into terminal, nonterminal- start and nonterminal-end probabilities, corresponding to the three different types of nodes in the trellis diagram.",
                    "sid": 82,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the alpha set, these are labeled at, a,ts and a,t~ respectively.",
                    "sid": 83,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "at(x, y, j, n): The probability of generating the words w; ...wu inclusive and network n includes them, and being at the node for terminal state j at position y. ,~,(*,u,j,n) = [~/at(x,y--1, i,n)a(i,j)] b(j,W(y)) + [~cent\u00a2(z,y-l,q,n)a(q,j)]b(j,W(y)) L q 0 < y _< Y j,i 6 Term(n) o < \u2022 < u q \u2022 Non~erm(n) (1) ~,(~, ~, j, n) = x(j)b(j, w(~)) o < ~ < r j e Term(n) (2) It can be seen that if x = 0 and there are no nonterminal states, the previous expressions are as in the F/B algorithm.",
                    "sid": 84,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "a,t~(x, y,p, n): The probability of generating the words wz...w~_l inclusive and network n includes them, and being at the start node of nonterminal state p at position y. crnts(x,y,p,n) = Eat(x,y-l,i,n)a(i,p) i + ~,,~.,~(x, y -1, q, n)a(q, p) q 0 < y < Y p,q \u2022 Nonterm(n) 0 <_ x < y i \u2022 Term(n) (3) o~..(x,x,p,n) = I(p) o < x < Y p \u2022 Nonterm(n) (4) Otnte(X, y,p, n): The probability of generating the words w .... wu inclusive and network n includes them, and being at the end node of nonterminal state p at position y. ot,,t~(z,y,p,n) = E a.t~(x,v,p,n)atot,~t(v,y,N(p,n)) 0 < y < Y p \u2022 Nonterm(n) o < x < y (5) a,ot.l(v, y, n) ~,~t(,,, u, i,n) + ~-~ o,.,.(,,, u,p, n) i p O<y<Y i \u2022 Term(n) & i \u2022 Final(n) O<v<y p \u2022 Nonterm(n) & p \u2022 Final(n) (6) The quantity Oltotat(V, y, n) refers to the probability that network n generates the words w .... w u inclusive and being in a final state of n at position y. 'The OLtota!",
                    "sid": 85,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "probabilities correspond to the \"Inner\" (bottom-up) probabilities of the I/O algorithm.",
                    "sid": 86,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the network topology for Chomsky normal form shown in Figure 1 is substituted in equation (6), the reeursion for the inner probabilities of the I/O algorithm will be produced after further substitutions using equations 0)46) In the previous equations (5) and (6) it can be seen that the a,te probabilities for a network are defined in terms of other ones.",
                    "sid": 87,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They will never be self-referential if the grammar is cycle-free, (i.e. there are no derivations A ~ A for any nonterminal production A).",
                    "sid": 88,
                    "ssid": 88,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the new algorithm cycles can be detected and self-referencing avoided.",
                    "sid": 89,
                    "ssid": 89,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is a similar situation to a chart parser where once a constituent with a given label, start and end position is built, no further instances of it are added.",
                    "sid": 90,
                    "ssid": 90,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The alpha probabilities are all computed first.",
                    "sid": 91,
                    "ssid": 91,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The beta probabilities can then be calculated, which unlike the F/B algorithm involve the alpha probabilities because prefixes of a sentence must be accounted for as well as suffixes.",
                    "sid": 92,
                    "ssid": 92,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The beta probabilities are described below.",
                    "sid": 93,
                    "ssid": 93,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For convenience in later equations the following functions fl~bo,,, and B,id, are first defined: ~obo~.(x, U, n) = m6.Af r:N(r,m)=n O~v~x r \u2022 Nonterrn(m) (7) ,e,ia,(~, y, i, n) = a(l, i)Z,(., y + 1, i, n)b(i, W(y + 1)) i +E a(l'q) E atot,~,(y+ 1, v,N(q,n))fl, te(x,v,q,n) q y<v<Y i \u2022 Term(n) q \u2022 Nonterm(n) (8) Bit(x, y, j, n): The probability of generating the prefix w0 \u2022..w,-1 and suffix wu+l...wr given that network n includes wx...wy and is in terminal state j at position y. The indicator function Ind 0 is used in subsequent equations.",
                    "sid": 94,
                    "ssid": 94,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Its value is unity when its argument is true and zero otherwise.",
                    "sid": 95,
                    "ssid": 95,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, elements that are not explicitly referenced by the ranges in the equations are assumed to be zero.",
                    "sid": 96,
                    "ssid": 96,
                    "kind_of_tag": "s"
                },
                {
                    "text": "flt(x,y,j,n) = ~side(X,y,j,n) + Ind(j \u2022 Final(n))flabove(x, y, n) 0 < y < Y j \u2022 Term(n) o < x < ~ (9) ~,(~, Y, j, n) gobo~,(x, Y, n) O<x<Y j 6 Term(n) j 6 Final(n) & ,~ Top(n) (10) flt(O,Y,j,n) = 1.0 j 6 Term(n) j E Final(n) & Top(n) (11) The previous equations reduce to the definitions for fl in the F/B algorithm when x = 0 and there are no nonterminal states in the network.",
                    "sid": 97,
                    "ssid": 97,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pnte(~,y, p, n): The probability of generating the prefix WO...W,-1and suffix wy+l...WY given that network n includes wX...wyand is at the end node of state p at position Y. Pnte(x, YtPj n) = Pside(~,Y,P, n) It can be seen that the values for Pnte(x,y,p, n) are defined in terms of those in other networks which reference n via Pabove.",
                    "sid": 98,
                    "ssid": 98,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a result this computation has a topdown order.",
                    "sid": 99,
                    "ssid": 99,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In contrast, the ant,(z,y,p, n) probabilities involve other networks that are referred to by network n and so assigned in a bottom-up order.",
                    "sid": 100,
                    "ssid": 100,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the network topology for Chomsky normal form is substituted in equation (12), the recursion for the \"Outer\" probabilities of the 110 algorithm can be derived after further substitutions.",
                    "sid": 101,
                    "ssid": 101,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The p probabilities for final states then correspond to the outer probabilities.",
                    "sid": 102,
                    "ssid": 102,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pnts(x, y,p, n): The probability of generating the prefix wo...w,-1 and suffix wy...wy given that network n includes w,...wy1 and is at at the start node of state p at position Y RE-ESTIMATION FORMULAE Once the alpha and beta probabilities are available, it is straightforward to obtain new parameter estimates (A, B,0.",
                    "sid": 103,
                    "ssid": 103,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The total probability P of a sentence is found from the top level network nTop.",
                    "sid": 104,
                    "ssid": 104,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There are four different kinds of transition: 1.",
                    "sid": 105,
                    "ssid": 105,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Terminal node i to terminal node j. 2.",
                    "sid": 106,
                    "ssid": 106,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Terminal node i to nonterminal start node p. 3.",
                    "sid": 107,
                    "ssid": 107,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Nonterminal end node p to nonterminal start node q. 4.",
                    "sid": 108,
                    "ssid": 108,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Nonterminal end node p to terminal node i. The expected total number of times a transition is made from state i to state j conditioned on the observed sentence is E($i,j).",
                    "sid": 109,
                    "ssid": 109,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The following formulae give E($) for each of the above cases: 0 = x Top(n) 0 < x < Y Top(n) x<y<Y A new estimate a(;, j) for a typical transition is then: Only B matrix elements for terminal states are used, and are re-estimated as follows.",
                    "sid": 110,
                    "ssid": 110,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The expected total number of times the k'th vocabulary entry vk is generated in state a conditioned on the observed sentence is E(qi,k).",
                    "sid": 111,
                    "ssid": 111,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A new estimate for 6(i, k) can then be found: The initial state matrix I is re-estimated as follows: O-~x, i 6 Term(n) & Top(n) O<x<Y i 6 Term(n) & ~ Top(n) (24) i(p) p ~ ,~,,.(~, ~,p, n)/~.,.(~, ~:,p, n) X O=x p c Uonterm(n) ~ Top(n) O<x<Y p C Nonterm(n) & ~ Top(n) (25) IMPLEMENTATION Inspection of the preceding equations indicates that in similar fashion to the I/O algorithm, this algorithm has cubic complexity in both the length of a sentence and the number of states in the grammar.",
                    "sid": 112,
                    "ssid": 112,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It has been implemented as a computer program, and verification was conducted in four stages, to facilitate debugging: 1.",
                    "sid": 113,
                    "ssid": 113,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Using top-level networks having only terminal states, check for exact numerical agreement of re-estimated parameters with those obtained by applying the F/B algorithm to the same examples.",
                    "sid": 114,
                    "ssid": 114,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.",
                    "sid": 115,
                    "ssid": 115,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Create examples involving nonterminals, but which have finite-state equivalents, and verify as in stage 1.",
                    "sid": 116,
                    "ssid": 116,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3. Create examples with several references to a given network, then build a finite-state equivalent in which the references are supplanted by network copies having tied parameters.",
                    "sid": 117,
                    "ssid": 117,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Verify as in stage 1.",
                    "sid": 118,
                    "ssid": 118,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4. Test using examples in Chomsky normal form and compare with results from the I/O algorithm.",
                    "sid": 119,
                    "ssid": 119,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unscaled arithmetic was employed to simplify the initial implementation.",
                    "sid": 120,
                    "ssid": 120,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Subsequent versions will include logarithmic scaling to prevent inaccuracies due to arithmetic underflow.",
                    "sid": 121,
                    "ssid": 121,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The representation would also benefit from the inclusion of a probability matrix for final states, rather than their use simply as constraints.",
                    "sid": 122,
                    "ssid": 122,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As the representation used by the algorithm is a superset of that used by the F/B algorithm, it conveniently permits \"Staged Training\".",
                    "sid": 123,
                    "ssid": 123,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Components that are finite-state networks can be pre-trained using the F/B algorithm, and then inserted into a context-free superstructure.",
                    "sid": 124,
                    "ssid": 124,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This may be done to obtain improved initial estimates for the algorithm, and/or to reduce the total amount of computation involved.",
                    "sid": 125,
                    "ssid": 125,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Lari and Young (1990) describe experiments using the I/O algorithm in which such pre-training was found useful.",
                    "sid": 126,
                    "ssid": 126,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Using the algorithm, the parameters of a context-free grammar can be trained from a corpus of untagged text.",
                    "sid": 127,
                    "ssid": 127,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Values for the production probabilities are directly available, and no conversion of the rules to or from Chomsky normal form is needed.",
                    "sid": 128,
                    "ssid": 128,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Once trained, a grammar can be used to predict the most likely syntactic structure of new sentences using a corresponding analogue of the Cocke-Younger-Kasami parser.",
                    "sid": 129,
                    "ssid": 129,
                    "kind_of_tag": "s"
                },
                {
                    "text": "CONCLUSION An iterative algorithm for estimating the parameters of a hidden stochastic context-free grammar has been described, which is a generalization of the F/B algorithm and the I/O algorithm.",
                    "sid": 130,
                    "ssid": 130,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The algorithm reduces to the F/B algorithm for finite-state grammars, and to the I/O algorithm when a context-free grammar is expressed in Chomsky normal form.",
                    "sid": 131,
                    "ssid": 131,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgements",
            "number": "",
            "sents": [
                {
                    "text": "I would like to thank Phil Chou and John Maxwell of Xerox PARC, for their helpful comments on this paper.",
                    "sid": 132,
                    "ssid": 132,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}