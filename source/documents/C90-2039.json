{
    "ID": "C90-2039",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Strategic Lazy Incremental Copy Graph Unification",
                    "sid": 0,
                    "ssid": null,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The strategic lazy incremental copy graph unification method is a combination of two methods for unifying hmture structures.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One, called the lazy incremental copy graph unification method, achieves structure sharing with constant order data access time which reduces the cequired memory.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The other, called ti~e strategic incremental copy graph unification method, uses an early failure finding strategy which first tries to unify :;ubstructures tending to fail in unification; this method is; based on stochastic data on tim likelihood of failure and ,'educes unnecessary computation.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The combined method .makes each feature structure unification efficient and also reduces garbage collection and page swapping occurrences, thus increasing the total efficiency of natural language processing systems mainly based on I.yped feature structure unification such as natural language analysis and generation sysl~ems.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Various kinds of grammatical formalisms without t,ranstormation were proposed from the late 1970s I;hrough the 1980s l(]azder eL al 85, l(aplan and Bresnan 82, Kay 1~5, Pollm'd and Sag 871.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These furnmlisms were developed relatively independentIy but actually had common properties; th'~t is, they used data structures called ftmctional structures or feature structures and they were based on unilieathm operation on these data structures.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These formalisms were applied in the field of natural language processing and, based on these formalisms, ~:~ystems such as machine translation systems were developed [l<ol;u, e et a l 8gJ.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In such unification-based formalisms, feature ~trueture (FS) unification is the most fundamental and ..~ignifieant operation.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The efficiency of systems based on ..~uch formalisms, such as natural language analysis and generation systems very much depends on their FS ~lnifieatlon efficiencies.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Tiffs dependency is especially crucial for lexicon-driven approaches such as tlPSO[Pollard and Sag 861 and JPSG[Gunji 871 because rich lexieal information and phrase structure information is described in terms of FSs.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, a spoken Present.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "affiliation: Infi)rmation Science Research 1,aboratory, NTT Basic Research i.aboratories.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "lh'esenl, address: 9 11, Midori cho 3-theme, Musashinoshi, Tokyo 180, Japan.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Japanese analysis system based on llPSG[Kogure 891 uses 90% - 98% of the elapsed time in FS unification.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Several FS unificatioa methods were proposed in IKarttunen 86, l'ereira 85, Wroblewski 871.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These methods uses rooted directed graphs (DGs) to represent FSs.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These methods take two DGs as their inputs and give a unification result DG.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Previous research identified DG copying as a significant overhead.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Wroblewski claims that copying is wrong when an algorithm copies too much (over copying) or copies too soon (early copying).",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Ile proposed an incremental copy graph unification method to avoid over copying and early copying.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "itowever, the problem with his method is that a unitication result graph consists only of newly created structures.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is unnecessary because there are often input snbgraphs that can be used as part of the result graph without any modification, or as sharable parts between one of the input graphs and the result graph.",
                    "sid": 22,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Copying sharable parts is called redundant copying.",
                    "sid": 23,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A better method would nfinimize the copying of sharable varts.",
                    "sid": 24,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The redundantly copied parts are relatively large when input graphs have few common feature paths.",
                    "sid": 25,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In natural language processing, such cases are ubiquitous.",
                    "sid": 26,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "I\"or example, in unifying an FS representing constraints on phrase structures and an FS representing a daughter phrase structure, such eases occur very h'equent, ly.",
                    "sid": 27,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Kasper's disjunctive feature description unification [Kasper 861, such cases occur very h'equently in unifying definite and disjunct's definite parts.",
                    "sid": 28,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Memory is wasted by such redundant copying and this causes frequent garbage collection and page swapping which decrease the total system efficiency.",
                    "sid": 29,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "I)eveloping a method which avoids memory wastage is very important.",
                    "sid": 30,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pereira's structure sharing FS unification method can avoid this problem.",
                    "sid": 31,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The method achieves structure sharing by importing the Bayer and Moore approach for term structurestl~oyer and Moore 721.",
                    "sid": 32,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The method uses a data structure consisting of a skeleton part to represent original information and an environment part to represent updated information.",
                    "sid": 33,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3'he skeleton part is shared by one of the input FSs and the result FS.",
                    "sid": 34,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, Pereira's method needs relatively few new structures when two input FSs are difference in size and which input is larger are known before unification.",
                    "sid": 35,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, Pereira's method can create skeleton-enviromnent structures that are deeply embedded, for example, in reeursively constructing large phrase structure fl'om their parts.",
                    "sid": 36,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This causes O(log d) graph node access time overhead in assembling the whole DG from the skeleton and environments where d is the number of nodes in the DG.",
                    "sid": 37,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Avoiding this problem in his method requires a special operation of merging a skeleton-environment structure into a skeleton structure, but this prevents structure sharing.",
                    "sid": 38,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This paper proposes an FS unification method that allows structure sharing with constant m'der node access time.",
                    "sid": 39,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This method achieves structure sharing by introducing lazy copying to Wroblewski's incremental copy graph unification method.",
                    "sid": 40,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The method is called the lazy i2!cremental copy IFaph unification reel, hod (the LING unifieation method for short).",
                    "sid": 41,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In a natural language proeessing system that uses deelarative constraint rules in terms of FSs, FS unification provides constraint-checking and structure- building mechanisms.",
                    "sid": 42,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The advantages of such a system include: (1)rule writers are not required to describe control infimnation such as eonstraiut application order in a rule, and (12)rule descriptions can be used iu different processing directions, i.e., analysis and general,ion.",
                    "sid": 43,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, these advantages in describing rules are disadvantages in applying them because of tt~e lack of control information.",
                    "sid": 44,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, when constructing a phrase structure from its parts (e.g., a sentence fi'om a subject NP and VP), unueeessary computation can be reduced if the semantic representation is assembled after checking constraints such as grammatical agreements, which can fail.",
                    "sid": 45,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is impossible in straightforward unification-based formalisms.",
                    "sid": 46,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In contrast, in a procedure-based system which uses IF-TItEN style rules (i.e., consisting of explicit test and structure-building operations), it is possible to construct the semantic representation (TIIEN par'g) after checking the agreement (IF part).",
                    "sid": 47,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Such a system has the advantage of processing efficiency but the disadvantage of lacking multidirectionality.",
                    "sid": 48,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, some of the efficiency of the procedure- based system is introduced into an FS unification-based system.",
                    "sid": 49,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is, an FS unification method is proposed that introduces a strategy called the e_arly failure \u00a3inding strategy (the EFF strategy) to make FS unification efficient, in this method, FS unification orders are not specified explicitly by rule wril.ers, but are controlled by learned information on tendencies of FS constraint application failures.",
                    "sid": 50,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This method is called the strategic ij!~crementaI copy graph unification method (the SING unification method).",
                    "sid": 51,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These two methods can be combined into a single method called the strategic lazy ijAcremeatal copy g~raph unification method (the SLING unification method).",
                    "sid": 52,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Section 2 explains typed feature structures (TFSs) and unification on them.",
                    "sid": 53,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Section 3 explains a TFS unification method based on Wroblewski's method and then explains the problem with his method.",
                    "sid": 54,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The section also introduces the key idea of the EFF strategy wlfich comes from observations of his method.",
                    "sid": 55,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Section 3 and 4 introduce the LING method and the SING method, respectively.",
                    "sid": 56,
                    "ssid": 56,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "typed feature structures. ",
            "number": "2",
            "sents": [
                {
                    "text": "Ordinary FSs used in unification-based grammar formalisms such as PAT].{[Shieher 851 arc classified into two classes, namely, atomic leSs and complex FSs.",
                    "sid": 57,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An atomic FS is represented by an atomic symbol and a complex FS is represented by a set of feature-value pairs.",
                    "sid": 58,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Complex FSs are used to partially describe objects by specifying values for certain features or attributes of described objects.",
                    "sid": 59,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Complex FSs can have complex FSs as their feature values and can share certain values among features.",
                    "sid": 60,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For ordinary FSs, unification is defined by using partial ordering based on subsumption relationships.",
                    "sid": 61,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These properties enable flexible descriptions.",
                    "sid": 62,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An extension allows complex FSs to have type symbols which define a lattice structure on them, for example, as in [Pollard and Sag 8\"11.",
                    "sid": 63,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The type symbol lattice contains the greatest type symbol Top, which subsumes every type symbol, and the least type symbol Bottom, which is subsumed by every I.ype symbol.",
                    "sid": 64,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An example of a type symbol lattice is shown in Fig.",
                    "sid": 65,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1.",
                    "sid": 66,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An extended complex FS is represented by a type symbol and a set of feature-value pairs.",
                    "sid": 67,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Once complex IeSs are extended as above, an atomic FS can be seen as an extended complex FS whose type symbol has only Top as its greater type symbol and only Bottom as its lesser type symbol and which has an empty set of feature value pairs.",
                    "sid": 68,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Extended complex FSs are called typed feature structures (TFSs).",
                    "sid": 69,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "TFSs are denoted by feature-value pair matrices or rooted directed graphs as shown in Fig.",
                    "sid": 70,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.",
                    "sid": 71,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Among such structures, unification c'm be defined IAP,- Kaci 861 by using the following order; ATFS tl is less than or equal to a TFS t2 if and only if: \u0095 the type symbol of tl is less than or equal to the type syn'bol of/2; and \u0095 each of the features of t2 exists in t1 and.",
                    "sid": 72,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "has as its value a TFS which is not less than its counterpart in tl ; and each of the coreference relationships in t2 is also held in tl.",
                    "sid": 73,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Top Sign Syn Head List POS /77 Lexical Phrase Sign NonEmpty Empty V N P ADV Slgn Li.",
                    "sid": 74,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Lis~ ust I I I I NonEmpty Emply I I i I Sign Sign I I/ / List List 5/ /5 ....",
                    "sid": 75,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "U_ Bottom Figure 1: Exainple of a type symbol lattice --2-- peSymb\u00b010 eaturel TypeSymboll ] ]] I feature2 TypeSymbol2 I feature3 ?Tag T ypeSymbol3 ] ]feature4 TypeSymbol4 L [.feature5 TypeSymbol5 TIeature3 7Tag (a) feature-value matrix notation \"?\" i~ the prefix for a tag and TFSs with the same tag are token-identical.",
                    "sid": 76,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "TypeSym bol/~ feo~.,o/ I TypeSymboll ~ [.",
                    "sid": 77,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "TypeSymbol2 4\u00a2\" '~\u00b0~'~/.~ypeSymbol3 featury \"X~ature5 TypeSymbol4 4r \"~TypeSymbol5 (b) directed graph notation Figure 2: TFS notations Phrase [sub(at ?X2 SignList ] dtrs CHconst Sign U Syn i'oo I syn I head ?Xl . ] ubcat NonEmptySignLIst | ['first ]1 ?\u00d73 Lrest ?X2 J j Phrase -dtrs CHconst hdtr LexicalSignsyn Syn -head Head pos P orm Ga subcat NonEmptySignList Sign ,11 yn Synead Head L~,os N] Irest EmptySignkist Phrase \"syn Syn head ?X1 Head Fpos P Lform Ga ] Lsubcat ?X2 Empl.ySignList dtrs CHconst ccltr ?X3 Sign syn iyn head Head _ [pos N hdtr LexicalSign l-syn Syn l I F head :x~ 7/ Lsubcat [ NonEinptySignList l l P\"\" ~\u00d7~ llll Lrest ?X2 JJjJ Figure 3: Example of TFS unification Then, the unification of tl anti t2 is defined as their greatest lower bound or the meet.",
                    "sid": 78,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A unification example is shown in Fig.",
                    "sid": 79,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.",
                    "sid": 80,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In tile directed graph notation, TFS unification corresponds to graph mergi ng.",
                    "sid": 81,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "TFSs are very convenient for describing linguistic information in unlfication-based formalisms.",
                    "sid": 82,
                    "ssid": 26,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "wroblewski's incremental copy graph unifitation method and its problems. ",
            "number": "3",
            "sents": [
                {
                    "text": "In TFS unification based on Wrobtewski's method, a DG is represented by tile NODE and ARC structures corresponding to a TFS and a feature-value pair respectively, as shown in Fig.",
                    "sid": 83,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.",
                    "sid": 84,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The NODE structure has the slots TYPESYMBOL to represent a type symbol, ARCS to represent a set of feature-value pairs, GENERATION to specify the unification process in which the structure has been created, FORWARD, and COPY.",
                    "sid": 85,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When a NODE's GENERATION value is equal to the global value specifying the current unit]cation process, the structure has been created in the current process or that the structure is currel~l. The characteristics which allow nondestructive incremental copy are the NODE's two different slots, FORWARD and COPY, for representing forwarding relationships.",
                    "sid": 86,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A FORWARD slot value represents an eternal relationship while a COPY slot value represents a temporary relationship.",
                    "sid": 87,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When a NODE node1 has a NODE node2 as its FORWARD value, the other contents of tile node1 are ignored and tim contents of node2 are used.",
                    "sid": 88,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "t{owever, when a NODE has another NODE as its COPY value, the contents of the COPY value are used only when the COPY value is cub:rent.",
                    "sid": 89,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After the process finishes, all COPY slot values are ignored and thus original structures are not destroyed.",
                    "sid": 90,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The unification procedure based on this method takes as its input two nodes which are roots of the DGs to be unified.",
                    "sid": 91,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The procedure incrementally copies nodes and ares on the subgraphs of each input 1)G until a node with an empty ARCS value is found.",
                    "sid": 92,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The procedure first dereferences both root nodes of the input DGs (i.e., it follows up FORWARD and COPY slot values).",
                    "sid": 93,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the dereferenee result nodes arc identical, the procedure finishes and returns one of the dereference result nodes.",
                    "sid": 94,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Next, the procedure calculates the meet of their type symbol.",
                    "sid": 95,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the meet is Bottom, which means inconsistency, the procedure finishes and returns Bottom.",
                    "sid": 96,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Otherwise, the procedure obtains the output node with the meet as its TYPESYMBOL.",
                    "sid": 97,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The output node has been created only when neither input node is current; or otherwise the output node is an existing current node.",
                    "sid": 98,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Next, the procedure treats arcs.",
                    "sid": 99,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The procedure assumes the existence of two procedures, namely, SharedArcs and ComplementArcs.",
                    "sid": 100,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The SharedArcs procedure takes two lists of arcs as its arguments and gives two lists of arcs each of which contains arcs whose labels exists in both lists with the same arc label order.",
                    "sid": 101,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The ComplementArcs procedure takes two lists of arcs as NODE TYPESYMBOL: <symbol> [ ARCS: <a list of ARC structures > FORWARD: \"<aNODEstructure orNIL> / COPY: < a NODEstructure or Nil, > GENERATION: <an integer> ARC LABEL: <symbol> VALUE: <:a NODEstructure> Figure 4: Data Structures for Wroblewski's method Input graph GI Input graph 62 \u00a2 .......'77 ........ i : Sobg,'aphs not required to be copied L ...........................................",
                    "sid": 102,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Output graph G3 Figure 5: Incremental copy graph unification In this figure, type symbols are omitted.",
                    "sid": 103,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "its arguments and gives one list of arcs whose labels are unique to one input list.",
                    "sid": 104,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The unification procedure first treats arc pairs obtained by SharedArcs.",
                    "sid": 105,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The procedure applies itself ,'ecursively to each such arc pair values and adds to the output node every arc with the same label as its label and the unification result of their values unless the tmification result is Bottom.",
                    "sid": 106,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Next, the procedure treats arcs obtained by ComplementArcs.",
                    "sid": 107,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each arc value is copied and an arc with the same label and the copied value is added to the output node.",
                    "sid": 108,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, consider the case when feature a is first treated at the root nodes of G1 and G2 in Fig.",
                    "sid": 109,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5.",
                    "sid": 110,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The unification procedure is applied recursively to feature a values of the input nodes.",
                    "sid": 111,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The node specified by the feature path <a> fi'om input graph G1 (Gl/<a>) has an arc with the label c and the corresponding node of input graph G2 does not.",
                    "sid": 112,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The whole subgraph rooted by 6 l/<a c> is then copied.",
                    "sid": 113,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is because such subgraphs can be modified later.",
                    "sid": 114,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, the node Y(G3/<o c g>) will be modified to be the unification result of G 1/<a c g> (or G1/<b d>) and G2/<b d> when the feature path <b d> will be treated.",
                    "sid": 115,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Incremental Copy Graph Unification PROCEDURE Unify(node1, node2) node1 = Dereference(nodel).",
                    "sid": 116,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "node2 = Dereferencelnode2).",
                    "sid": 117,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "IF Eq?(nodel, node2) THEN Return(node1).",
                    "sid": 118,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ELSE meet = Meet(nodel.typesymbol, node2.typesymbol) IF Equal?(meet, Bottom) THEN Return(Bottom).",
                    "sid": 119,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ELSE outnode = GetOutNode(nodel, node2, meet).",
                    "sid": 120,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(sharedst, shareds2) = SharedArcs(nodel.arcs, node2.arcs).",
                    "sid": 121,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "complements1 = ComplementArcs(node|.arcs, node2.arcs).",
                    "sid": 122,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "complements2 = ComplementArcs(node2.arcs, nodel.arcs).",
                    "sid": 123,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "FOR ALL (sharedt, shared2) IN (sharedsl, shareds2) DO arcnode = Unify(sharedl.value, shared2.value).",
                    "sid": 124,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "IF Equal?(arcnode, Bottom) ]HEN Return(Bottom).",
                    "sid": 125,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ELSE AddArc(outnode, sharedl.label, arcnode).",
                    "sid": 126,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ENDIF IF Eq?(outnode, node1) THEN coi'nplements = complement2.",
                    "sid": 127,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ELSE IF Eq?(outnode, node2) THEN complements = complementL ELSE complements = Append(complements1, complements2].",
                    "sid": 128,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ENDIF FORALL complement IN complements DO newnode = CopyNode(complement.value).",
                    "sid": 129,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "AddArc(outnode, complement.label, newnode).",
                    "sid": 130,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Return(outnode).",
                    "sid": 131,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ENDIF ENDIE ENDPROCEDURE Figure 6: Incremental copy graph unification procedure The problem with Wroblewski's method is that tile whole result DG is created by using only newly created structures.",
                    "sid": 132,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the example in Fig.",
                    "sid": 133,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5, the subgraphs of the result DG surrounded by the dashed rectangle can be shared with subgraphs of input structures G1 and G2, Section 4 proposes a method t.hat avoids this problem, Wroblewski's method first treats arcs with labels that exist in both input nodes and then treats arcs with unique labels.",
                    "sid": 134,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This order is related to the unification failure tendency.",
                    "sid": 135,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unification fails in treating arcs with common labels more often than in treating arcs with unique labels.",
                    "sid": 136,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finding a failure can stop further computation as previously described, and thus finding failures first reduces unnecessary computation.",
                    "sid": 137,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This order strategy can be generalized to the EFF and applied to the ordering of arcs with common labels.",
                    "sid": 138,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Section 5, a method which uses this generalized strategy is proposed.",
                    "sid": 139,
                    "ssid": 57,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "the lazy incremental copy graph unification method. ",
            "number": "4",
            "sents": [
                {
                    "text": "In Wroblewski's method, copying unique label arc values whole in order to treat cases like ]Pig.",
                    "sid": 140,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 disables structure sharing, ttowever, this whole copying is not necessary if a lazy evaluation method is used.",
                    "sid": 141,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With such a method, it is possible to delay copying a node until either its own contents need to change (e.g., node G3/Ka c !7>) or until it is found to have an arc (sequence) to a node t, hat needs to be copied (e.g., node X G3/<a c> in Fig.",
                    "sid": 142,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 due to a change of node Y G3/<a c g>).",
                    "sid": 143,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To achieve this, I, he LING unification method, which uses copy dependency information, was developed.",
                    "sid": 144,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The LING unification procedure uses a revised CopyNode procedure which does not copy structures immediately.",
                    "sid": 145,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The revised procedure uses a newly introduced slot COPY-DEPENDENCY.",
                    "sid": 146,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The slot has pairs consisting of nodes and arcs as its value.",
                    "sid": 147,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The revised CopyNode procedure takes as its inputs the node to be copied node I and the arc arc I with node I as its value and node2 as its immediate ancestor node (i.e., the arc's initial node), and does the following (set Fig.",
                    "sid": 148,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "7): (1) if nodel ', the dereference result of node/, is current, then CopyNode returns node l\" to indicate that the ancestor node node2 must be coiffed immediately; (2)otherwise, CopyArcs is applied to node1\" and if it returns ,~;everal arc copies, CopyNode creates a new copy node.",
                    "sid": 149,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It then adds the arc copies and arcs of node/' that are not copied to the new node, and returns the new node; (3) otherwise, CopyNode adds the pair consisting of the ancestor node node2 and the are arcl into the COPY- DEPENDENCY slot of node 1\" and returns Nil_.",
                    "sid": 150,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": ",',:opyArcs applies CopyNode to each arc value with node l' as the new ancestor node and returns the set of new arcs for non-Nil_ CopyNode results.",
                    "sid": 151,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When a new copy of a node is needed later, the LING unification procedure will actually copy structures using the COPY-DEPENDENCY slot value of the node (in GetOutNode procedure in lJ'ig.",
                    "sid": 152,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6).",
                    "sid": 153,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It substitutes arcs with newly copied nodes for existing arcs.",
                    "sid": 154,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is, antecedent nodes in the COPY-DEPENDENCY values are also copied.",
                    "sid": 155,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the above explanation, both COPY-DEPENDENCY and COPY slots are used for the sake of simplicity.",
                    "sid": 156,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "]lowever, this method can be achieved with only the COPY slot because a node does not have non-NIL COPY-I)EPENDENCY and COPY values simultaneously.",
                    "sid": 157,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The data in the COPY-DEPENDENCY slot are I;emporary and they are discarded during an extensive process such as analyzing a sentence, ttowever, this does not result in any incompleteness or in any partial analysis structure being test.",
                    "sid": 158,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, data can be accessed in a constant order time relative to the number of DG nodes and need not be reconstructed because this method does not use a data structure consisl, ing of ,';keleton and environments as does Pereira's method.",
                    "sid": 159,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The efficiency of the LING unification method depends on the proportion of newly created structures in the unification result structures.",
                    "sid": 160,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Two worst eases can be considered: (t) If there are no arcs whose labels are unique to an input node witlh respect to each other, the procedure in LING unification method behaves in the same way as the procedure in the Wroblewski's method.",
                    "sid": 161,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2) In the worst eases, in which there are unique label arcs but all result structures are newly created, the method CopyNode PROCEDURE CopyNode(node, arc, ancestor) node = Dereference(node).",
                    "sid": 162,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "IF Current?(node) THEN Return(node).",
                    "sid": 163,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ELSE IF NotEmpty?(newarcs = CopyArcs(node)) THEN newnode = Create(node.typesymbol).",
                    "sid": 164,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "node.copy = newnode.",
                    "sid": 165,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "FOR ALL arc IN node.arcs DO IF NotNIL?(newarc = FindArc(arc.label, newarcs)) THEN AddArc(newnode, newarc.label, newarc.value}.",
                    "sid": 166,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ELSE AddArc(newnode, arc.label, arc.value).",
                    "sid": 167,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ENDIF Returo(newnode).",
                    "sid": 168,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ELSE node.copy-dependency = node.copy-dependency U {Cons(ancestor, arc)}.",
                    "sid": 169,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Return(Nil_).",
                    "sid": 170,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ENDIF ENDPROCEDURE CopyArcs PROCEDURE AlcsCopied(node) newarcs = O- FOR ALL arc IN node.arcs DO newnode = CopyNode(arc.value, arc, node).",
                    "sid": 171,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "IF NotNIL?(newnode) THEN newarc = CreateArc(arc.label, newnode).",
                    "sid": 172,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "newarcs = {newarc} U newarcs.",
                    "sid": 173,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ENDIF Return(newarcs).",
                    "sid": 174,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ENDPROCEDURE Figure 7: The revised CopyNode procedure has the disadvantage of treating copy dependency information.",
                    "sid": 175,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, these two cases are very rare.",
                    "sid": 176,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Usually, the number of features in two input structures is relatively small and the sizes of the two input structures are often very different.",
                    "sid": 177,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, in Kasper's disjunctive feature description unification, a definite part [\"S is larger than a disjunet definite part t\"S.",
                    "sid": 178,
                    "ssid": 39,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "the strategic incremental copy graph unification. ",
            "number": "5",
            "sents": [
                {
                    "text": "Method In a system where FS unification is applied, there are features whose values fail relatively often in unification with other values and there are features whose values do not fail so often.",
                    "sid": 179,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, in Japanese sentence analysis, unification of features for conjugation forms, case markers, and semantic selectional restrictions tends to fail but unification of features for semantic representations does not fail.",
                    "sid": 180,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In such cases, application of the EFF strategy, that is, treating features tending to fall in unification first, reduces unnecessary computation when the unification finally fails.",
                    "sid": 181,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, when unification of features for case markers does fail, treating these features first avoids treating features for senmntic representations.",
                    "sid": 182,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The SING unification method uses this failure tendency infornmtion.",
                    "sid": 183,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These unification failure tendencies depend on systems such as analysis systems or generation systems.",
                    "sid": 184,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unlike the analysis case, unification of features for semantic representations tends to fail.",
                    "sid": 185,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "in this method, theretbre, the failure tendency information is acquired by a learning process.",
                    "sid": 186,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is, the SING unification method applied in an analysis system uses the failure tendency information acquired by a learning analysis process.",
                    "sid": 187,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "in the learning process, when FS unification is applied, feature treatment orders are randomized for the sake of random extraction.",
                    "sid": 188,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As in TFS unification, failure tendency information is recorded in terms of a triplet consisting of the greatest lower bound type symbol of the input TFSs' type symbols, a feature and success/failure flag.",
                    "sid": 189,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is because the type symbol of a 'rFS represents salient information on the whole TFS.",
                    "sid": 190,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By using learned failure tendency information, feature value unification is applied in an order that first treats features with the greatest tendency to fail.",
                    "sid": 191,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is achieved by the sorting procedure of common label arc pairs attached to the meet type symbol.",
                    "sid": 192,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The arc pairs obtained by the SharedArcs procedure are sorted before treating arcs.",
                    "sid": 193,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The efficiency of the SING unification method depends on the following factors: (1) The overall FS unification failure rate of the process: in extreme cases, if Go unification failure occurs, the method has no advantages except the overhead of feature unification order sorting.",
                    "sid": 194,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, such cases do not occur in practice.",
                    "sid": 195,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2) Number of features FSs have: if each FS has only a small number of features, the efficiency gain from the SING unification method is small.",
                    "sid": 196,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(3) Unevenness of FS unification failure tendency: in extreme cases, if every feature has the same unification failure tendency, this method has no advantage.",
                    "sid": 197,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, such cases do not occur or are very rare, and for example, in many cases of natural language analysis, FS unification failures occur in treating only limited kinds of features related to grammatical agreement such as number and/or person agreement and semantic selectional constraints.",
                    "sid": 198,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In such cases, the SING unification method obtains efl]ciency gains.",
                    "sid": 199,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The above factors can be examined by inspecting failure tendency information, from which the efficiency gain from the SING method can be predicted.",
                    "sid": 200,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, it is possible for each type symbol to select whether to apply feature unification order sorting or not.",
                    "sid": 201,
                    "ssid": 23,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "conclusion. ",
            "number": "6",
            "sents": [
                {
                    "text": "The strategic lazy incremental copy graph (SLING) unification method combines two incremental copy graph unification methods: the lazy incremental copy graph (LING) unification method and the strategic incremental copy graph (SING) unification method.",
                    "sid": 202,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The LING unification method achieves structure sharing without the O(log d) data access overhead of Pereira's method.",
                    "sid": 203,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Structure sharing avoids memory wastage'.",
                    "sid": 204,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, structure sharing increases the portion of token identical substructures of FSs which makes it efficient to keep unification results of substructures of FSs and reuse them.",
                    "sid": 205,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This reduces repeated calculation of substructures.",
                    "sid": 206,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The SING unification method introduces the concept of feature unification strategy.",
                    "sid": 207,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'the method treats features tending to fail in unification first.",
                    "sid": 208,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, the efficiency gain fi'om this method is high when the overall FS unification failure rate of the application process is high.",
                    "sid": 209,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The combined method Inakes each FS unification efficient and also reduces garbage collection and page swapping occurrences by avoiding memory wastage, thus increasing the total efficiency of li'S unification-based natural language processing systems such aa analysis and generation systems based on IlI'SG.",
                    "sid": 210,
                    "ssid": 9,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}