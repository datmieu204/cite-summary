{
    "ID": "W13-2101",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Statistical natural language generation from abstract meaning representations presupposes large corpora consisting of text\u2013meaning pairs.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Even though such corpora exist nowadays, or could be constructed using robust semantic parsing, the simple alignment between text and meaning representation is too coarse for developing robust (statistical) NLG systems.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By reformatting semantic representations as graphs, fine-grained alignment can be obtained.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given a precise alignment at the word level, the complete surface form of a meaning representations can be deduced using a simple declarative rule.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Surface Realization is the task of producing fluent text from some kind of formal, abstract representation of meaning (Reiter and Dale, 2000).",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, while it is obvious what the output of a natural language generation component should be, namely text, there is little to no agreement on what its input formalism should be (Evans et al., 2002).",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since open-domain semantic parsers are able to produce formal semantic representations nowadays (Bos, 2008; Butler and Yoshimoto, 2012), it would be natural to see generation as a reversed process, and consider such semantic representations as input of a surface realization component.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The idea of using large text corpora annotated with formal semantic representations for robust generation has been presented recently (Basile and Bos, 2011; Wanner et al., 2012).",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The need for formal semantic representations as a basis for NLG was expressed already much earlier by Power (1999), who derives semantic networks enriched with scope information from knowledge representations for content planning.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper we take a further step towards the goal of generating text from deep semantic representations, and consider the issue of aligning the representations with surface strings that capture their meaning.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First we describe the basic idea of aligning semantic representations (logical forms) with surface strings in a formalism-independent way (Section 2).",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then we apply our method to a well-known and widely-used semantic formalism, namely Discourse Representation Theory (DRT), first demonstrating how to represent Discourse Representation Structures (DRSs) as graphs (Section 3) and showing that the resulting Discourse Representation Graphs (DRGs) are equivalent to DRSs but are more convenient to fulfill word- level alignment (Section 4).",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, in Section 5 we present a method that generates partial surface strings for each discourse referent occurring in the semantic representation of a text, and composes them into a complete surface form.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All in all, we think this would be a first and important step in surface realization from formal semantic representations.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "aligning logic with text. ",
            "number": "2",
            "sents": [
                {
                    "text": "Several different formal semantic representations have been proposed in the literature, and although they might differ in various aspects, they also have a lot in common.",
                    "sid": 15,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Many semantic representations (or logical forms as they are sometimes referred to) are variants of first-order logic and share basic building blocks such as entities, properties, and relations, complemented with quantifiers, negation and further scope operators.",
                    "sid": 16,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A simple snapshot of a formal meaning representation is the following (with symbols composed out of WordNet (Fellbaum, 1998) synset identifiers to abstract away from natural language): blue#a#1(x) \u2227 cup#n#1(x) How could this logical form be expressed in natural language?",
                    "sid": 17,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Or put differently, how could we 1 Proceedings of the 14th European Workshop on Natural Language Generation, pages 1\u20139, Sofia, Bulgaria, August 89 2013.",
                    "sid": 18,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Qc 2013 Association for Computational Linguistics realize the variable x in text?",
                    "sid": 19,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As simple as it is, x describes \u201ca blue cup\u201d, or if your target language is Italian, \u201cuna tazza blu\u201d, or variants hereof, e.g. \u201cevery blue cup\u201d (if x happens to be bound by universally quantified) or perhaps as \u201cuna tazza azzurra\u201d, using a different adjective to express blue- ness.",
                    "sid": 20,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This works for simple examples, but how does it scale up to larger and more complex semantic representations?",
                    "sid": 21,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In a way, NLG can be viewed as a machine translation (MT) task, but unlike translating from one natural language into another, the task is here to translate a formal (unambiguous) language into a natural language like English or Italian.",
                    "sid": 22,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Current statistical MT techniques are based on large parallel corpora of aligned source and target text.",
                    "sid": 23,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper we introduce a method for precise alignment of formal semantic representations and text, with the purpose of creating a large corpus that could be used in NLG research, and one that opens the way for statistical approaches, perhaps similar to those used in MT. Broadly speaking, alignments between semantic representations and surface strings can be made in three different ways.",
                    "sid": 24,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The simplest strategy, but also the least informative, is to align a semantic representation with a sentence or complete text without further information on which part of the representation produces what part of the surface form.",
                    "sid": 25,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This might be enough to develop statistical NLG systems for small sentences, but probably does not scale up to handle larger texts.",
                    "sid": 26,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Alternatively, one could devise more complex schemes that allow for a more fine-grained alignment between parts of the semantic representation and sur a better starting point for the development of a statistical NLG component.",
                    "sid": 27,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With sufficient data in the form of aligned texts with semantic representations, these alignments can be automatically learned, thus creating a model to generate surface forms from abstract, logical representations.",
                    "sid": 28,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, aligning semantic representations with words is a difficult enterprise, primarily because formal semantic representations are not flat like a string of words and often form complex structures.",
                    "sid": 29,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To overcome this issue we represent formal semantic representations as a set of tuples.",
                    "sid": 30,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For instance, returning to our earlier example representation for \u201cblue cup\u201d, we could repre sent part of it by the tuples (blue#a#1,arg,x) and (cup#n#1,arg,x).",
                    "sid": 31,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For convenience we can display this as a graph (Figure 1).",
                    "sid": 32,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "blue#a#1 x cup#n#1 Figure 1: Logical form graph.",
                    "sid": 33,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that in this example several tuples are not shown for clarity (such as conjunction and the quantifier).",
                    "sid": 34,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We show below that we can indeed represent every bit of semantic information in this format without sacrificing the capability of alignment with the text.",
                    "sid": 35,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The important thing now is to show how alignments between tuples and words can be realized, which is done by adding an element to each tuple denoting the surface string, for instance (cup#n#1,arg,x,\u201dtazza\u201d), as in Figure 2.",
                    "sid": 36,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "face strings (words and phrases).",
                    "sid": 37,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Here there are two routes to follow, which we call the minimal and maximal alignment.",
                    "sid": 38,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In maximal alignment, each single piece of the blue#a#1 cup#n#1 \"blue\" \"a\" x \"cup\" blue#a#1 cup#n#1 \"blu\" \"una\" x \"tazza\" semantic representation corresponds to the words that express that part of the meaning.",
                    "sid": 39,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Possible problems with this approach are that perhaps not every bit of the semantic representation corresponds to a surface form, and a single word could also correspond to various pieces in the semantic representation.",
                    "sid": 40,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is an interesting option to explore, but in this paper we present the alternative approach, minimal alignment, which is a method where every word in the surface string points to exactly one part of the semantic representation.",
                    "sid": 41,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We think this alignment method forms Figure 2: Logical form graphs aligned with surface forms in two languages.",
                    "sid": 42,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We can further refine the alignment by saying something about the local order of surface expressions.",
                    "sid": 43,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Again, this is done by adding an element to the tuple, in this case one that denotes the local order of a logical term.",
                    "sid": 44,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We will make this clear by continuing with our example, where we add word order encoded as numerical indices in the tuple, e.g.",
                    "sid": 45,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(cup#n#1,arg,x,\u201dtazza\u201d,2), as Figure 3 shows.",
                    "sid": 46,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "From these graphs we can associate the term blue#a#1 cup#n#1 \"blue\" 2 \"a\" 1 x \"cup\" 3 blue#a#1 cup#n#1 \"blu\" 3 \"una\" 1 x \"tazza\" 2 cific tailoring the semantic representa tion to one\u2019s (technical) needs.",
                    "sid": 47,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Further, the formalism should have a model theoretic backbone, to ensure that the semantic representa tions one works with actually have an interpretati on, and can consequen tly Figure 3: Encoding local word order.",
                    "sid": 48,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "x with the surface strings \u201ca blue cup\u201d and \u201cuna tazza blu\u201d.",
                    "sid": 49,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "But the way we express local order is not limited to words and can be employed for partial phrases as well, if one adopts a neoDavidsonian event semantics with explicit thematic roles.",
                    "sid": 50,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This can be achieved by using the same kind of numerical indices already used for the alignment of words.",
                    "sid": 51,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The example in Figure 4 shows how to represent an event \u201chit\u201d with its thematic roles, preserving their relative order.",
                    "sid": 52,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We call surface forms \u201cpartial\u201d or \u201cincomplete\u201d when they contain variables, and \u201ccomplete\u201d when they only contain tokens.",
                    "sid": 53,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The corresponding partial surface form is then \u201cy hit z\u201d, where y and z are place- holders for surface strings.",
                    "sid": 54,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "agent y 1 hit#v#1 \"hit\" 2 x 3 theme z Figure 4: Graph for a neoDavidsonian structure.",
                    "sid": 55,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is the basic idea of aligning surface strings with parts of a deep semantic representation.",
                    "sid": 56,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that precise alignment is only possible for words with a lexical semantics that include first-order variables.",
                    "sid": 57,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For words that introduce scope operators (negation particles, coordinating conjuncts) we can\u2019t have the cake and eat it: specifying the local order with respect to an entity or event variable directly and at the same time associating it with an operator isn\u2019t always possible.",
                    "sid": 58,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To solve this we introduce surface tuples that complement a semantic representation to facilitate perfect alignment.",
                    "sid": 59,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We will explain this in more detail in the following sections.",
                    "sid": 60,
                    "ssid": 46,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "discourse representation graphs. ",
            "number": "3",
            "sents": [
                {
                    "text": "The choice of semantic formalism should ideally be independent from the application of natural language generation itself, to avoid bias and spe be used in inference tasks using, for instance, automated deduction for first-order logic.",
                    "sid": 61,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given these criteria, a good candidate is Discourse Representation Theory, DRT (Kamp and Reyle, 1993), that captures the meaning of texts in the form of Discourse Representation Structures (DRSs).",
                    "sid": 62,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "DRSs are capable of effectively representing the meaning of natural language, covering many linguistic phenomena including pronouns, quantifier scope, negation, modals, and presuppositions.",
                    "sid": 63,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "DRSs are recursive structures put together by logical and non-logical symbols, as in predicate logic, and in fact can be translated into first-order logic formulas (Muskens, 1996).",
                    "sid": 64,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The way DRSs are nested inside each other give DRT the ability to explain the behaviour of pronouns and presuppositions (Van der Sandt, 1992).",
                    "sid": 65,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Aligning DRSs with texts with fine granularity is hard because words and phrases introduce different kinds of semantic objects in a DRS: discourse referents, predicates, relations, but also logical operators such as negation, disjunction and implication that introduce embedded DRSs.",
                    "sid": 66,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A precise alignment of a DRS with its text on the level of words is therefore a nontrivial task.",
                    "sid": 67,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To overcome this issue, we apply the idea presented in the previous section to DRSs, making all recursion implicit by representing them as directed graphs.",
                    "sid": 68,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We call a graph representing a DRS a Discourse Representation Graph (DRG, in short).",
                    "sid": 69,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "DRGs encode the same information as DRSs, but are expressed as a set of tuples.",
                    "sid": 70,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Essentially, this is done by reification over DRSs \u2014 every DRSs gets a unique label, and the arity of DRS conditions increases by one for accommodating a DRS label.",
                    "sid": 71,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This allows us to reformulate a DRS as a set of tuples.",
                    "sid": 72,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A DRS is an ordered pair of discourse refer- ents (variables over entities) and DRS-conditions.",
                    "sid": 73,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "DRS-conditions are basic (representing properties or relations) or complex (to handle negation and disjunction).",
                    "sid": 74,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To reflect these different constructs, we distinguish three types of tuples in DRGs: \u2022 (K,referent,X) means that X is a discourse referent in K (referent tuples); \u2022 (K,condition,C) means that C is a condition k1 unary scope k2 k2 referent e1 k2 referent x1 k2 event pay k2 concept customer k1 unary scope k2 event role referent pay agent referent instance e1 internal external k2 role agent concept x1 instance customer instance x1 pay instance e1 agent internal e1 agent external x1 customer Figure 5: DRS and corresponding DRG (in tuples and in graph format) for \u201cA customer did not pay.\u201d in K (condition tuples), with various sub- types: concept, event, relation, role, named, cardinality, attribute, unary, and binary; \u2022 (C,argument,A) means that C is a condition with argument A (argument tuples), with the sub-types internal, external, instance, scope, antecedent, and consequence.",
                    "sid": 75,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With the help of a concrete example, it is easy to see that DRGs have the same expressive power as DRSs.",
                    "sid": 76,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Consider for instance a DRS with negation, before and after labelling it (Figure 6): Note that labelling conditions is crucial to distinguish between syntactically equivalent conditions occurring in different (embedded) DRSs.",
                    "sid": 77,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unlike Power\u2019s scoped semantic network for DRSs, we don\u2019t make the assumption that conditions appear in the DRS in which their discourse referents are introduced (Power, 1999).",
                    "sid": 78,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The example in Figure 6 illustrates that this assumption is not sound: the condition p(x) is in a different DRS than where its discourse referent x is introduced.",
                    "sid": 79,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Further note that our reification procedure yields \u201cflatter\u201d representations than similar x y r(x,y) z K1 : x y c1 :r(x,y) z formalisms (Copestake et al., 1995; Reyle, 1993), and this makes it more convenient to align surface strings with DRSs with a high granularity, as we p(x) s(z,y) c2 :K2 : c3 :p(x) c4 :s(z,y) will show below.",
                    "sid": 80,
                    "ssid": 20,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "word-. ",
            "number": "4",
            "sents": [
                {
                    "text": "Aligned DRGs Figure 6: From DRS to DRG: labelling.",
                    "sid": 81,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Now, from the labelled DRS we can derive the following three referent tuples: (K1,referent,x), (K1,referent,y), and (K2,referent,z); the following four condition tuples: (K1,relation,c1:r), (K1,unary,c2:), (K2,concept,c3:p), and (K2,relation,c4:s); and the following argument tuples: (c1:r,internal,x), (c1:r,external,y), (c2:,scope,K2), (c3:p,instance,x), (c4:s,internal,z), and (c4:s,external,y).",
                    "sid": 82,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "From these tuples, it is straightforward to recreate a labelled DRS, and by dropping the labels subsequently, the original DRS resurfaces again.",
                    "sid": 83,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the sake of readability we sometimes leave out labels in examples throughout this paper.",
                    "sid": 84,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, we also show DRGs in graph-like pictures, where the tuples that form a DRG are the edges, and word-alignment information attached at the tuple level is shown as labels on the graph edges, as in Figure 9.",
                    "sid": 85,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In such graphs, nodes representing discourse referents are square shaped, and nodes representing conditions are oval shaped.",
                    "sid": 86,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this section we show how the alignment between surface text and its logical representation is realized by adding information of the tuples that make up a DRG.",
                    "sid": 87,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This sounds more straightforward than it is. For some word classes this is indeed easy to do.",
                    "sid": 88,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For others we need additional machinery in the formalism.",
                    "sid": 89,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let\u2019s start with the straightforward cases.",
                    "sid": 90,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Determiners are usually associated with referent tuples.",
                    "sid": 91,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Content words, such as nouns, verbs, adverbs and adjectives, are typically directly associated with one-place relation symbols, and can be naturally aligned with argument tuples.",
                    "sid": 92,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Verbs are assigned to instance tuples linking its event condition; likewise, nouns are typically aligned to instance tuples which link discourse referents to the concepts they express; adjectives are aligned to tuples of attribute conditions.",
                    "sid": 93,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, words expressing relations (such as prepositions), are attached to the external argument tuple linking the relation to the discourse referent playing the role of external argument.",
                    "sid": 94,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Although the strategy presented for DRG\u2013text alignment is intuitive and straightforward to implement, there are surface strings that don\u2019t correspond to something explicit in the DRS.",
                    "sid": 95,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To this class belong punctuation symbols, and semantically empty words such as (in English) the infinitival particle, pleonastic pronouns, auxiliaries, there insertion, and so on.",
                    "sid": 96,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, function words such as \u201cnot\u201d, \u201cif\u201d, and \u201cor\u201d, introduce semantic material, but for the sake of surface string generation could be better aligned with the event that they take the scope of.",
                    "sid": 97,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To deal with all these cases, we extend DRGs with surface tuples of the form (K,surface,X), whose edges are decorated with therequired surface strings.",
                    "sid": 98,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 7 shows an exam ple of a DRG extended with such surface tuples.",
                    "sid": 99,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "k1 unary scope k2 k2 referent e1 k2 referent x1 k2 event pay k2 concept customer k2 role agent customer instance x1 p a y i n s t a n c e e 1 a g e n t i n t e r n a l e 1 a g e n t e x t e r n a l x 1 1 2 4 1 A cu st o m er pa y k2 surface e1 k2 surface e1 k2 surface e1 2 3 5 d i d n o t . Figure 7: Word-aligned DRG for \u201cA customer did not pay.\u201d All alignment information (including surface tuples) is highlighted.",
                    "sid": 100,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that surface tuples don\u2019t have any influence on the meaning of the original DRS \u2013 they just serve for the purpose of alignment of the required surface strings.",
                    "sid": 101,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Also note in Figure 7 the indices that were added to some tuples.",
                    "sid": 102,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They serve to express the local order of surface information.",
                    "sid": 103,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Following the idea sketched in Section 2, the total order of words is transformed into a local ranking of edges relative to discourse referents.",
                    "sid": 104,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is possible because the tuples that have word tokens aligned to them always have a discourse referent as third element (the head of the directed edge, in terms of graphs).",
                    "sid": 105,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We group tuples that share the same discourse referent and then assign indices reflecting the relative order of how these tuples are realized in the original text.",
                    "sid": 106,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Illustrating this with our example in Figure 7, we got two discourse referents: x1 and e1.",
                    "sid": 107,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The discourse referent x1 is associated with three tuples, of which two are indexed (with indices 1 and 2).",
                    "sid": 108,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Generating the surface string for x1 succeeds by traversing the edges in the order specified, resulting in [A,customer] for x1.",
                    "sid": 109,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The referent e1 associates with six tuples, of which four are indexed (with indices 1\u20134).",
                    "sid": 110,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The order of these tuples would yield the partial surface string [x1,did,not,pay,.]",
                    "sid": 111,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "for e1.",
                    "sid": 112,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that the manner in which DRSs are constructed during analysis ensures that all discourse referents are linked to each other by taking the transitive closure of all binary relations appearing in a DRS, and therefore we can reconstruct the total order from composing the local orders.",
                    "sid": 113,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the next section we explain how this is done.",
                    "sid": 114,
                    "ssid": 34,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "surface composition. ",
            "number": "5",
            "sents": [
                {
                    "text": "In this section we show in detail how surface strings can be generated from word-aligned DRGs.",
                    "sid": 115,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It consists of two subsequent steps.",
                    "sid": 116,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First, a surface form is associated with each discourse referent.",
                    "sid": 117,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Secondly, surface forms are put together in a bottom-up fashion, to generate the complete output.",
                    "sid": 118,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "During the composition, all of the discourse referents are associated with their own surface representation.",
                    "sid": 119,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The surface form associated with the discourse unit that contains all other discourse units is then the text aligned with the original DRG.",
                    "sid": 120,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Surface forms of discourse referents are lists of tokens and other discourse referents.",
                    "sid": 121,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recall that the order of the elements of a discourse referent\u2019s surface form is reflected by the local ordering of tuples, as explained in the previous section, and tuples with no index are simply ignored when reconstructing surface strings.",
                    "sid": 122,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The surface form is composed by taking each tuple belonging to a specific discourse referent, in the correct order, and adding the tokens aligned with the tuple to a list representing the surface string for that discourse referent.",
                    "sid": 123,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An important part of this process is that binary DRS relations, represented in the DRG by a pair of internal and external argument tuple, are followed unidirectionally: if the tuple is of the internal type, then the discourse referent on the other end of the relation (i.e. following its external tuple edge) is added to the list.",
                    "sid": 124,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Surface forms for embedded DRSs include the discourse referents of the events x1 : Michelle e1 : x1 thinks p1 e1 : Michelle thinks p1 p1 : that e2 x2 : Obama e2 : x2 smokes . e2 : Obama smokes . p1 : that Obama smokes . k1 : e4 e 1 : M i c h e l l e t h i n k s t h a t O b a m a s m o k e s . k 1 : M i c h e l l e t h i n k s t h a t O b a m a s m o k e s . F i g u r e 8 : S u r f a c e c o m p o s i t i o n o f e m b e d d e d s t r u c t u r e s . they contain.",
                    "sid": 125,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Typically, discourse units contain exactly one event (the main event of the clause).",
                    "sid": 126,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Phenomena such as gerunds (e.g. \u201cthe laughing girl\u201d) and relative clauses (e.g. \u201cthe man who smokes\u201d) may introduce more than one event in a discourse unit.",
                    "sid": 127,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To ensure correct order and grouping, we borrow a technique from description logic (Horrocks and Sattler, 1999) and invert roles in DRGs.",
                    "sid": 128,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Rather than representing \u201cthe laughing girl\u201d as [girl(x) \u2227 agent(e,x) \u2227 laugh(e)], we represent it as [girl(x) \u2227 agent\u22121(x,e) \u2227 laugh(e)], making use of R(x,y)\u2261 R\u22121(y,x) to preserve meaning.",
                    "sid": 129,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This \u201ctrick\u201d en sures that we can describe the local order of noun phrases with relative clauses and alike.",
                    "sid": 130,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To wrap things up, the composition operation is used to derive complete surface forms for DRGs.",
                    "sid": 131,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Composition puts together two surface forms, where one of them is complete, and one of them is incomplete.",
                    "sid": 132,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is formally defined as follows:",
                    "sid": 133,
                    "ssid": 19,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "selected. ",
            "number": "6",
            "sents": [
                {
                    "text": "Phenomena We implemented a first prototype using our alignment and realization method and tested it on examples taken from the Groningen Meaning Bank, a large annotated corpus of texts paired with DRSs (Basile et al., 2012).",
                    "sid": 134,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Naturally, we came across phenomena that are notoriously hard to analyze.",
                    "sid": 135,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Most of these we can handle adequately, but some we can\u2019t currently account for and require further work.",
                    "sid": 136,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6.1 Embedded.",
                    "sid": 137,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Clauses In the variant of DRT that we are using, propositional arguments of verbs introduce embedded DRSs associated with a discourse referent.",
                    "sid": 138,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is a good test for our surface realization formalism, because it would show that it is capable of recursively generating embedded clauses.",
                    "sid": 139,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 9 shows the DRG for the sentence \u201cMichelle thinks that Obama smokes.\u201d \u03c11 : \u03c4 \u03c12 : \u039b1\u03c11\u039b2 \u03c12 : \u039b1\u03c4 \u039b2 (1) referent michelle instance \"Michelle\" 1 x1 ext where \u03c11 and \u03c12 are discourse referents, \u03c4 is a list of tokens, and \u039b1 and \u039b2 are lists of word tokens and discourse referents.",
                    "sid": 140,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the example from Figure 7, the complete surface form for the discourse unit k1 is derived by means of composition as formulated in (1) as follows: x1 : A customer e1 : x1 did not pay named role k1 event role Agent referent think Theme referent \"that\" subordinates:prop int 1 instance e1 \"thinks\" 2 3 int ext 1 p1 role named referent Patient obama referent ext x2 int 1 instance \"Obama\" 1 k2 : e1 e1 : A custom er did not pay . k2 : A customer did not pay . event punctuation \".\" 3 e2 2 instance \"smokes\" The procedure for generation described here is reminiscent of the work of (Shieber, 1988) who also employs a deductive approach.",
                    "sid": 141,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular our composition operation can be seen as a simplified completion.",
                    "sid": 142,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Going back to the example in Section 4, substituting the value of x1 in the incomplete surface form of e1 produces the surface string [A,customer,did,not,pay,.]",
                    "sid": 143,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "for e1.",
                    "sid": 144,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "smoke Figure 9: Word-aligned DRG for the sentence \u201cMichelle thinks that Obama smokes.\u201d Here the surface forms of two discourse units (main and embedded) are generated.",
                    "sid": 145,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to generate the complete surface form, first the embedded clause is generated, and then composed with the incomplete surface form of the main clause.",
                    "sid": 146,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As noted earlier, during the composition process, the complete surface form for each discourse referent is generated (Figure 8), showing a clear alignment between the entities of the semantic representation and the surface forms they represent.",
                    "sid": 147,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6.2 Coordination.",
                    "sid": 148,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Coordination is another good test case for a linguistic formalism.",
                    "sid": 149,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Consider for instance \u201cSubsistence fishing and commercial trawling occur within refuge waters\u201d, where two noun phrases are coordinated, giving rise to either a distributive (introducing two events in the DRS) or a collective interpretation (introducing a set formation of discourse referents in the DRS).",
                    "sid": 150,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We can account for both interpretations (Figure 10).",
                    "sid": 151,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that, interestingly, using the distributive interpretation DRG as input to the surface realization component could result, depending on how words are aligned, in a surface form \u201cfishing occurs and trawling occurs\u201d, or as \u201cfishing and trawling occur\u201d.",
                    "sid": 152,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6.3 Long-Distance Dependencies.",
                    "sid": 153,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Cases of extraction, for instance with WH- movement, could be problematic to capture with our formalism.",
                    "sid": 154,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is in particular an issue when extraction crosses more than one clause boundary, as in \u201cWhich car does Bill believe John bought\u201d.",
                    "sid": 155,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Even though these cases are rare in the real world, a complete formalism for surface realization must be able to deal with such cases.",
                    "sid": 156,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The question is whether this is a separate generation task in the domain of syntax (White et al., 2007), or whether the current formalism needs to be adapted to cover such long-distance dependencies.",
                    "sid": 157,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Another range of complications are caused by discontinuous constituents, as in the Dutch sentence \u201cIk heb kaartjes gekocht voor Berlijn\u201d (literally: \u201cI have tickets bought for Berlin\u201d), where the prepositional phrase \u201cvoor Berlijn\u201d is an argument of the noun phrase \u201ckaartjes\u201d.",
                    "sid": 158,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our formalism the only alignment possible would result in the sentence \u201cIk heb kaartjes voor Berlijn gekocht\u201d, which is arguably a more fluent realization of the sentence, but doesn\u2019t correspond to the original text.",
                    "sid": 159,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If one uses the original text as gold standard, this could cause problems in evaluation.",
                    "sid": 160,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(One could also benefit from this deficiency, and use it to generate more than one gold standard surface string.",
                    "sid": 161,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is something to explore in future work.)",
                    "sid": 162,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6.4 Control Verbs.",
                    "sid": 163,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In constructions like \u201cJohn wants to swim\u201d, the control verb \u201cwants\u201d associates its own subject with the subject of the infinitival clause that it has as argument.",
                    "sid": 164,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Semantically, this is realized by variable binding.",
                    "sid": 165,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Generating an appropriate surface form for semantic representation with controlled variables is a challenge: a naive approach would generate \u201cJohn wants John to swim\u201d.",
                    "sid": 166,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One possible solution is to add another derivation rule for surface composition dedicated to deal with cases where a placeholder variable occurs in more than one partial surface form, substituting a null string for a variable following some heuristic rules.",
                    "sid": 167,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A second, perhaps more elegant solution is to integrate a language model into the surface composition process.",
                    "sid": 168,
                    "ssid": 35,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "related work. ",
            "number": "7",
            "sents": [
                {
                    "text": "Over the years, several systems have emerged that aim at generate surface forms from different kind of abstract input representations.",
                    "sid": 169,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An overview of the state-of-the-art is showcased by the submissions to the Surface Realization Shared Task (Belz et al., 2012).",
                    "sid": 170,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Bohnet et al.",
                    "sid": 171,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2010), for instance, employ deep structures derived from the CoNLL 2009 shared task, essentially sentences annotated with shallow semantics, lemmata and dependency trees; as the authors state, these annotations are not made with generation in mind, and they necessitate complex preprocessing steps in order to derive syntactic trees, and ultimately surface forms.",
                    "sid": 172,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The format presented in this work has been especially developed with statistical approaches in mind.",
                    "sid": 173,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Nonetheless, there is very little work on robust, wide-scale generation from DRSs, surprisingly perhaps given the large body of theoretical research carried out in the framework of Discourse Representation Theory, and practical implementations and annotated corpora of DRSs that are nowadays available (Basile et al., 2012).",
                    "sid": 174,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is in contrast to the NLG work in the framework of Lexical Functional Grammar (Guo et al., 2011).",
                    "sid": 175,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Flat representation of semantic representations, like the DRGs that we present, have also been put forward to facilitate machine translation (Schiehlen et al., 2000) and for evaluation purposes (Allen et al., 2008), and semantic parsing event occur referent instance \"occur\" 2 e1 referent occur instance \"occur\" 2 e1 internal 1 event internal 1 role concept theme fishing referent external instance \"fishing\" 1 x1 role theme referent surface external k1 event occur instance \"and\" 2 x3 int er na l 1 3 referent surface \"occur\" 3 e2 k1 relation concept relation superset fishing external internal instance role \"and\" 1 2 in te rn al superset referent \"fishing\" 1 x1 external concept theme external trawling referent instance \"trawling\" 1 x2 concept referent trawling x2 instance 1 \"trawling\" Figure 10: Analysis of NP coordination, in a distributive (left) and a collective interpretation (right).",
                    "sid": 176,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(Le and Zuidema, 2012) just because they\u2019re easier and more efficient to process.",
                    "sid": 177,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Packed semantic representations (leaving scope underspecified) also resemble flat representations (Copestake et al., 1995; Reyle, 1993) and can be viewed as graphs, however they show less elaborated reification than the DRGs presented in this paper, and are therefore less suitable for precise alignment with surface strings.",
                    "sid": 178,
                    "ssid": 10,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "conclusion. ",
            "number": "8",
            "sents": [
                {
                    "text": "We presented a formalism to align logical forms, in particular Discourse Representation Structures, with surface text strings.",
                    "sid": 179,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The resulting graph representations (DRGs), make recursion implicit by reification over nested DRSs.",
                    "sid": 180,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because of their \u201cflat\u201d structure, DRGs can be precisely aligned with the text they represent at the word level.",
                    "sid": 181,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is key to open-domain statistical Surface Realization, where words are learned from abstract, syntactic or semantic, representations, but also useful for other applications such as learning semantic representations directly from text (Le and Zuidema, 2012).",
                    "sid": 182,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The actual alignment between the tuples that form a DRG and the surface forms they represent is not trivial, and requires to make several choices.",
                    "sid": 183,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given the alignment with text, we show that it is possible to directly generate surface forms from automatically generated word-aligned DRGs.",
                    "sid": 184,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To do so, a declarative procedure is presented, that generates complete surface forms from aligned DRGs in a compositional fashion.",
                    "sid": 185,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The method works in a bottom-up way, using discourse ref- erents as starting points, then generating a surface form for each of them, and finally composing all of the surface form together into a complete text.",
                    "sid": 186,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We are currently building a large corpus of word-aligned DRSs, and are investigating machine learning methods that could automatically learn the alignments.",
                    "sid": 187,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Surprisingly, given that DRT is one of the best studied formalisms in formal semantics, there isn\u2019t much work on generation from DRSs so far.",
                    "sid": 188,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The contribution of this paper presents a method to align DRSs with surface strings, that paves the way for robust, statistical methods for surface generation from deep semantic representations.",
                    "sid": 189,
                    "ssid": 11,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}