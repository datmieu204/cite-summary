{
    "ID": "D12-1094",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Discovering significant types of relations from the web is challenging because of its open nature.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unsupervised algorithms are developed to extract relations from a corpus without knowing the relations in advance, but most of them rely on tagging arguments of predefined types.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recently, a new algorithm was proposed to jointly extract relations and their argument semantic classes, taking a set of relation instances extracted by an open IE algorithm as input.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, it cannot handle polysemy of relation phrases and fails to group many similar (\u201csynonymous\u201d) relation instances because of the sparseness of features.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we present a novel unsupervised algorithm that provides a more general treatment of the polysemy and synonymy problems.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The algorithm incorporates various knowledge sources which we will show to be very effective for unsupervised extraction.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, it explicitly disambiguates polysemous relation phrases and groups synonymous ones.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While maintaining approximately the same precision, the algorithm achieves significant improvement on recall compared to the previous method.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is also very efficient.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Experiments on a real- world dataset show that it can handle 14.7 million relation instances and extract a very large set of relations from the web.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Relation extraction aims at discovering semantic relations between entities.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is an important task that has many applications in answering factoid questions, building knowledge bases and improving search engine relevance.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The web has become a massive potential source of such relations.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, its open nature brings an open-ended set of relation types.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To extract these relations, a system should not assume a fixed set of relation types, nor rely on a fixed set of relation argument types.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The past decade has seen some promising solutions, unsupervised relation extraction (URE) algorithms that extract relations from a corpus without knowing the relations in advance.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, most algorithms (Hasegawa et al., 2004, Shinyama and Sekine, 2006, Chen et.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "al, 2005) rely on tagging predefined types of entities as relation arguments, and thus are not well-suited for the open domain.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recently, Kok and Domingos (2008) proposed Semantic Network Extractor (SNE), which generates argument semantic classes and sets of synonymous relation phrases at the same time, thus avoiding the requirement of tagging relation argu ments of predefined types.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, SNE has 2 limitations: 1) Following previous URE algorithms, it only uses features from the set of input relation instances for clustering.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Empirically we found that it fails to group many relevant relation instances.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These features, such as the surface forms of arguments and lexical sequences in between, are very sparse in practice.",
                    "sid": 22,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In contrast, there exist several well-known corpus-level semantic resources that can be automatically derived from a source corpus and are shown to be useful for generating the key elements of a relation: its 2 argument semantic classes and a set of synonymous phrases.",
                    "sid": 23,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, semantic classes can be derived from a source corpus with contextual distributional similarity and web table co-occurrences.",
                    "sid": 24,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The \u201csynony- my\u201d 1 problem for clustering relation instances * Work done during an internship at Microsoft Research Asia 1027 Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, pages 1027\u20131037, Jeju Island, Korea, 12\u201314 July 2012.",
                    "sid": 25,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Qc 2012 Association for Computational Linguistics could potentially be better solved by adding these resources.",
                    "sid": 26,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2) SNE assumes that each entity or relation phrase belongs to exactly one cluster, thus is not able to effectively handle polysemy of relation phrases2.",
                    "sid": 27,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An example of a polysemous phrase is be the currency of as in 2 triples <Euro, be the currency of, Germany> and <authorship, be the currency of, science>.",
                    "sid": 28,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As the target corpus expands from mostly news to the open web, polysemy becomes more important as input covers a wider range of domains.",
                    "sid": 29,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In practice, around 22% (section 3) of relation phrases are polysemous.",
                    "sid": 30,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Failure to handle these cases significantly limits its effectiveness.",
                    "sid": 31,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To move towards a more general treatment of the polysemy and synonymy problems, we present a novel algorithm WEBRE for open-domain large- scale unsupervised relation extraction without predefined relation or argument types.",
                    "sid": 32,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The contribu tions are: \u2022 WEBRE incorporates a wide range of corpus-level semantic resources for improving relation extraction.",
                    "sid": 33,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The effectiveness of each knowledge source and their combination are studied and compared.",
                    "sid": 34,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To the best of our knowledge, it is the first to combine and compare them for unsupervised relation extraction.",
                    "sid": 35,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 WEBRE explicitly disambiguates polysemous relation phrases and groups synonymous phrases, thus fundamentally it avoids the limitation of previous methods.",
                    "sid": 36,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Experiments on the Clueweb09 dataset (lemurproject.org/clueweb09.php) show that WEBRE is effective and efficient.",
                    "sid": 37,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We present a large-scale evaluation and show that WEBRE can extract a very large set of high-quality relations.",
                    "sid": 38,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Compared to the closest prior work, WEBRE significantly improves recall while maintaining the same level of precision.",
                    "sid": 39,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "WEBRE is efficient.",
                    "sid": 40,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To the best of our knowledge, it handles the largest triple set to date (7-fold larger than largest previous effort).",
                    "sid": 41,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Taking 14.7 million triples as input, a complete run with one CPU core takes about a day.",
                    "sid": 42,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 We use the term synonymy broadly as defined in Section 3..",
                    "sid": 43,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "the phrase cluster for 2 different relations in SNE.",
                    "sid": 44,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, this only accounts for 4.8% of the polysemous cases.",
                    "sid": 45,
                    "ssid": 45,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "related work. ",
            "number": "2",
            "sents": [
                {
                    "text": "Unsupervised relation extraction (URE) algorithms (Hasegawa et al., 2004; Chen et al., 2005; Shinya- ma and Sekine, 2006) collect pairs of co-occurring entities as relation instances, extract features for instances and then apply unsupervised clustering techniques to find the major relations of a corpus.",
                    "sid": 46,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These UREs rely on tagging a predefined set of argument types, such as Person, Organization, and Location, in advance.",
                    "sid": 47,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Yao et al. 2011 learns fine- grained argument classes with generative models, but they share the similar requirement of tagging coarse-grained argument types.",
                    "sid": 48,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Most UREs use a quadratic clustering algorithm such as Hierarchical Agglomerate Clustering (Hasegawa et al., 2004, Shinyama and Sekine, 2006), K-Means (Chen et al., 2005), or both (Rosenfeld and Feldman, 2007); thus they are not scalable to very large corpora.",
                    "sid": 49,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As the target domain shifts to the web, new methods are proposed without requiring predefined entity types.",
                    "sid": 50,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Resolver (Yates and Etzioni, 2007) resolves objects and relation synonyms.",
                    "sid": 51,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Kok and Domingos (2008) proposed Semantic Network Extractor (SNE) to extract concepts and relations.",
                    "sid": 52,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Based on second-order Markov logic, SNE used a bottom-up agglomerative clustering algorithm to jointly cluster relation phrases and argument entities.",
                    "sid": 53,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, both Resolver and SNE require each entity and relation phrase to belong to exactly one cluster.",
                    "sid": 54,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This limits their ability to handle polysemous relation phrases.",
                    "sid": 55,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, SNE only uses features in the input set of relation instances for clustering, thus it fails to group many relevant instances.",
                    "sid": 56,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Resolver has the same sparseness problem but it is not affected as much as SNE because of its different goal (synonym resolution).",
                    "sid": 57,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As the preprocessing instance-detection step for the problem studied in this paper, open IE extracts relation instances (in the form of triples) from the open domain (Etzioni et al., 2004; Banko et al., 2007; Fader et al., 2011; Wang et al. 2011).",
                    "sid": 58,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For efficiency, they only use shallow features.",
                    "sid": 59,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Reverb (Fader et al., 2011) is a state-of-the-art open domain extractor that targets verb-centric relations, which have been shown in Banko and Etzioni (2008) to cover over 70% of open domain rela tions.",
                    "sid": 60,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Taking their output as input, algorithms have been proposed to resolve objects and relation synonyms (Resolver), extract semantic networks (SNE), and map extracted relations into an existing ontology (Soderland and Mandhani, 2007).",
                    "sid": 61,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recent work shows that it is possible to construct semantic classes and sets of similar phrases automatically with data-driven approaches.",
                    "sid": 62,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For generating semantic classes, previous work applies distributional similarity (Pasca, 2007; Pantel et al., 2009), uses a few linguistic patterns (Pasca 2004; Sarmento et al., 2007), makes use of structure in webpages (Wang and Cohen 2007, 2009), or combines all of them (Shi et al., 2010).",
                    "sid": 63,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pennacchiotti and Pantel (2009) combines several sources and features.",
                    "sid": 64,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To find similar phrases, there are 2 close The first problem is the polysemy of relation phrases, which means that a relation phrase ctx can express different relations in different triples.",
                    "sid": 65,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, the meaning of be the currency of in the following two triples is quite different: <Euro, be the currency of, Germany> and <authorship, be the currency of, science>.",
                    "sid": 66,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is more appropriate to assign these 2 triples to 2 relations \u201ca currency is the currency of a country\u201d and \u201ca factor is important in an area\u201d than to merge them into one.",
                    "sid": 67,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Formally, a relation phrase ctx is polysemous if there exist 2 different relations < \ufffd\ufffd1 , \ufffd\ufffd, \ufffd\ufffd2 > and < \ud835\udc36 \u2032, \ufffd\ufffd\u2032, \ud835\udc36 \u2032 > where \ud835\udc50\ud835\udc61\ud835\udc65 \u2208 \ud835\udc43 \u2229 \ufffd\ufffd\u2032.",
                    "sid": 68,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the previ ly related tasks: paraphrase discovery and recog1 2 nizing textual entailment.",
                    "sid": 69,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Data-driven paraphrase discovery methods (Lin and Pantel, 2001; Pasca and Dienes, 2005; Wu and Zhou, 2003; Sekine, 2005) extends the idea of distributional similarity to phrases.",
                    "sid": 70,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The Recognizing Textual Entailment algorithms (Berant et al. 2011) can also be used to find related phrases since they find pairs of phrases in which one entails the other.",
                    "sid": 71,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To efficiently cluster high-dimensional datasets, canopy clustering (McCallum et al., 2000) uses a cheap, approximate distance measure to divide data into smaller subsets, and then cluster each subset using an exact distance measure.",
                    "sid": 72,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It has been applied to reference matching.",
                    "sid": 73,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The second phase of WEBRE applies the similar high-level idea of partition-then-cluster for speeding up relation clustering.",
                    "sid": 74,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We design a graph-based partitioning subroutine that uses various types of evidence, such as shared hypernyms.",
                    "sid": 75,
                    "ssid": 30,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "problem analysis. ",
            "number": "3",
            "sents": [
                {
                    "text": "The basic input is a collection of relation instances (triples) of the form <ent1, ctx, ent2>.",
                    "sid": 76,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each triple, ctx is a relational phrase expressing the relation between the first argument ent1 and the second argument ent2.",
                    "sid": 77,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An example triple is <Obama, win in, NY>.",
                    "sid": 78,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The triples can be generated by an open IE extractor such as TextRunner or Reverb.",
                    "sid": 79,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our goal is to automatically build a list of relations \ud835\udc45 = {< ent1 , \ud835\udc50\ud835\udc61\ufffd\ufffd, ent2 >} \u2248 3 < \ufffd\ufffd1 , \ufffd\ufffd, \ufffd\ufffd2 > where P is the set of relation phrases, and \ufffd\ufffd1 and \ufffd\ufffd2 aretwo argument classes.",
                    "sid": 80,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Examples of triples and rela tions R (as Type B) are shown in Figure 1.",
                    "sid": 81,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3 This approximately equal sign connects 2 possible represen-.",
                    "sid": 82,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "tations of a relation: as a set of triple instances or a triple with 2 entity classes and a relation phrase class.",
                    "sid": 83,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ous example, be the currency of is polysemous because it appears in 2 different relations.",
                    "sid": 84,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Polysemy of relation phrases is not uncommon.",
                    "sid": 85,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We generate clusters from a large sample of triples with the assistance of a soft clustering algorithm, and found that around 22% of relation phrases can be put into at least 2 disjoint clusters that represent different relations.",
                    "sid": 86,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "More importantly, manual inspection reveals that some common phrases are polysemous.",
                    "sid": 87,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, be part of can be put into a relation \u201ca city is located in a country\u201d when connecting Cities to Countries, and another relation \u201ca company is a subsidiary of a parent company\u201d when connecting Companies to Companies.",
                    "sid": 88,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Failure to handle polysemous relation phrases fundamentally limits the effectiveness of an algorithm.",
                    "sid": 89,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The WEBRE algorithm described later explicitly handles polysemy and synonymy of relation phrases in its first and second phase respectively.",
                    "sid": 90,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The second problem is the \u201csynonymy\u201d of relation instances.",
                    "sid": 91,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use the term synonymy broadly and we say 2 relation instances are synonymous if they express the same semantic relation between the same pair of semantic classes.",
                    "sid": 92,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, both <Euro, be the currency used in, Germany> and <Dinar, be legal tender in, Iraq> express the relation <Currencies, be currency of, Countries>.",
                    "sid": 93,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Solving this problem requires grouping synonymous relation phrases and identifying argument semantic classes for the relation.",
                    "sid": 94,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Various knowledge sources can be derived from the source corpus for this purpose.",
                    "sid": 95,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper we pay special attention to incorporating various semantic resources for relation extraction.",
                    "sid": 96,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We will show that these semantic sources can significantly improve the coverage of extracted relations and the Figure 1.",
                    "sid": 97,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Overview of the WEBRE algorithm (Illustrated with examples sampled from experiment results).",
                    "sid": 98,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The tables and rectangles with a database sign show knowledge sources, shaded rectangles show the 2 phases, and the dotted shapes show the system output, a set of Type A relations and a set of Type B relations.",
                    "sid": 99,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The orange arrows denote resources used in phase 1 and the green arrows show the resources used in phase 2.",
                    "sid": 100,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "best performance is achieved when various resources are combined together.",
                    "sid": 101,
                    "ssid": 26,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "mining relations from the web. ",
            "number": "4",
            "sents": [
                {
                    "text": "We first describe relevant knowledge sources, and then introduce the WEBRE algorithm, followed by a briefly analysis on its computational complexity.",
                    "sid": 102,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.1 Knowledge Sources.",
                    "sid": 103,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Entity similarity graph We build two similarity graphs for entities: a distributional similarity (DS) graph and a pattern-similarity (PS) graph.",
                    "sid": 104,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The DS graph is based on the distributional hypothesis (Harris, 1985), saying that terms sharing similar contexts tend to be similar.",
                    "sid": 105,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use a text window of size 4 as the context of a term, use Pointwise Mutual Information (PMI) to weight context features, and use Jaccard similarity to measure the similarity of term vectors.",
                    "sid": 106,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The PS graph is generated by adopting both sentence lexical patterns and HTML tag patterns (Hearst, 1992; Kozareva et al., 2008; Zhang et al., 2009; Shi et al., 2010).",
                    "sid": 107,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Two terms (T) tend to be semantically similar if they co- occur in multiple patterns.",
                    "sid": 108,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One example of sentence lexical patterns is (such as | including) T{,T}* (and|,|.).",
                    "sid": 109,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "HTML tag patterns include tables, dropdown boxes, etc. In these two graphs, nodes are entities and the edge weights indicate entity similarity.",
                    "sid": 110,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In all there are about 29.6 million nodes and 1.16 billion edges.",
                    "sid": 111,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hypernymy graph Hypernymy relations are very useful for finding semantically similar term pairs.",
                    "sid": 112,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, we observed that a small city in UK and another small city in Germany share common hypernyms such as city, location, and place.",
                    "sid": 113,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore the similarity between the two cities is large according to the hypernymy graph, while their similarity in the DS graph and the PS graph may be very small.",
                    "sid": 114,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Following existing work (Hearst, 1992, Pantel & Ravichandran 2004; Snow et al., 2005; Talukdar et al., 2008; Zhang et al., 2011), we adopt a list of lexical patterns to extract hypernyms.",
                    "sid": 115,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The patterns include NP {,} (such as) {NP,}* {and|or} NP, NP (is|are|was|were|being) (a|an|the) NP, etc. The hypernymy graph is a bi partite graph with two types of nodes: entity nodes and label (hypernym) nodes.",
                    "sid": 116,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There is an edge (T, L) with weight w if L is a hypernym of entity T with probability w. There are about 8.2 million nodes and 42.4 million edges in the hypernymy graph.",
                    "sid": 117,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we use the terms hypernym and label interchangeably.",
                    "sid": 118,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Relation phrase similarity: To generate the pairwise similarity graph for relation phrases with regard to the probability of expressing the same relation, we apply a variant of the DIRT algorithm (Lin and Pantel, 2001).",
                    "sid": 119,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Like DIRT, the paraphrase discovery relies on the distributional hypothesis, but there are a few differences: 1) we use stemmed lexical sequences (relation phrases) instead of dependency paths as phrase candidates because of the very large scale of the corpus.",
                    "sid": 120,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2) We used ordered pairs of arguments as features of phrases while DIRT uses them as independent features.",
                    "sid": 121,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We empirically tested both feature schemes and found that using ordered pairs results in likely paraphrases but using independent features the result contains general inference rules4.",
                    "sid": 122,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.2 WEBRE for Relation Extraction.",
                    "sid": 123,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "WEBRE consists of two phases.",
                    "sid": 124,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the first phase, a set of semantic classes are discovered and used as argument classes for each relation phrase.",
                    "sid": 125,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This results in a large collection of relations whose arguments are pairs of semantic classes and which have exactly one relation phrase.",
                    "sid": 126,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We call these relations the Type A relations.",
                    "sid": 127,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An example Type A relation is <{New York, London\u2026}, be locate in, {USA, England, \u2026}>.",
                    "sid": 128,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "During this phase, polysemous relation phrases are disambiguated and placed into multiple Type A relations.",
                    "sid": 129,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The second phase is an efficient algorithm which groups similar Type A relations together.",
                    "sid": 130,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This step enriches the argument semantic classes and groups synonymous relation phrases to form relations with multiple expressions, which we called Type B relations.",
                    "sid": 131,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Both Type A and Type B relations are system outputs since both are valuable resources for downstream applications such as QA and Web Search.",
                    "sid": 132,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An overview of the algorithm is shown in Figure 1.",
                    "sid": 133,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Here we first briefly describe a clustering subroutine that is used in both phases, and then describe the algorithm in detail.",
                    "sid": 134,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To handle polysemy of objects (e.g., entities or relations) during the clustering procedure, a key building block is an effective Multi-Membership Clustering algorithm (MMClustering).",
                    "sid": 135,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For simplicity and effectiveness, we use a variant of Hierarchical Agglomerative Clustering (HAC), in which we first cluster objects with HAC, and then reassign each object to additional clusters when its similarities with these clusters exceed a certain threshold5.",
                    "sid": 136,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the remainder of this paper, we use {C} = MMClustering({object}, SimFunc, \u03b1) to represent running MMClustering over a set of objects, 4 For example, be part of has ordered argument pairs <A, B>.",
                    "sid": 137,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "and <C, D>, and be not part of has ordered argument pairs <A, D> and <B, C>.",
                    "sid": 138,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If arguments are used as independent features, these two phrases shared the same set of features {A,B, C, D}.",
                    "sid": 139,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, they are inferential (complement relation ship) rather than being similar phrases.",
                    "sid": 140,
                    "ssid": 39,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "this threshold should be slightly greater than the clustering. ",
            "number": "5",
            "sents": [
                {
                    "text": "threshold for HAC to avoid generating duplicated clusters.",
                    "sid": 141,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "with threshold \u03b1 to generate a list of clusters {C} of the objects, given the pairwise object similarity function SimFunc.",
                    "sid": 142,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our implementation uses HAC with average linkage since empirically it performs well.",
                    "sid": 143,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Discovering Type A Relations The first phase of the relation extraction algorithm generates Type A relations, which have exactly one relation phrase and two argument entity semantic classes.",
                    "sid": 144,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each relation phrase, we apply a clustering algorithm on each of its two argument sets to generate argument semantic classes.",
                    "sid": 145,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The Phase 1 algorithm processes relation phrases one by one.",
                    "sid": 146,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each relation phrase ctx, step 4 clusters the set {ent1} using MMClustering to find left-hand-side argument semantic classes {C1}.",
                    "sid": 147,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then for each cluster C in {C1}, it gathers the right-hand-side arguments which appeared in some triple whose left hand side-side argument is in C, and puts them into {ent2\u2019}.",
                    "sid": 148,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Following this, it clusters {ent2\u2019} to find right-hand-side argument semantic classes.",
                    "sid": 149,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This results in pairs of semantic classes which are arguments of ctx.",
                    "sid": 150,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each relation phrase can appear in multiple non-overlapping Type A relations.",
                    "sid": 151,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, <Cities, be part of, Countries> and <Companies, be part of, Companies> are different Type A relations which share the same relation phrase be part of.",
                    "sid": 152,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the pseudo code, SimEntFunc is encoded in the entity similarity graphs.",
                    "sid": 153,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Algorithm Phase 1: Discovering Type A relations Input: set of triples T={<ent1, ctx, ent2>} entity similarity function SimEntFunc Similarity threshold \u03b1 Output: list of Type A relations {<C1, ctx, C2>} St ep s: 01.",
                    "sid": 154,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each relation.",
                    "sid": 155,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "phrase ctx 02.",
                    "sid": 156,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "{ent1, ctx, ent2} = set of triples sharing ctx 03.",
                    "sid": 157,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "{ent1} = set of ent1 in {ent1, ctx, ent2} 04.",
                    "sid": 158,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "{C1} = MMClustering({ent1}, SimEntFunc, \u03b1) 05.",
                    "sid": 159,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each C in {.",
                    "sid": 160,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "C1} 06.",
                    "sid": 161,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "{ent2\u2019} = set of \ud835\udc52\ufffd\ufffd\ufffd\ufffd2 \ufffd\ufffd.",
                    "sid": 162,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\ufffd\ufffd.",
                    "sid": 163,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2203< \ud835\udc52\ufffd\ufffd\ufffd\ufffd1 , \ud835\udc50\ud835\udc61\ufffd\ufffd, \ud835\udc52\ufffd\ufffd\ufffd\ufffd2 > \u2208 \ud835\udc47 \u22c0 \ud835\udc52\ufffd\ufffd\ufffd\ufffd1 \u2208 \ufffd\ufffd1 07.",
                    "sid": 164,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "{C2} = MMClustering({ent2\u2019}, SimEntFunc, \u03b1) 08.",
                    "sid": 165,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each C2 in.",
                    "sid": 166,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "{C2} 09.",
                    "sid": 167,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Add <C1, ctx, C2> into {<C1, ctx,.",
                    "sid": 168,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "C2>} 10.",
                    "sid": 169,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Return {<C1, ctx, C2>} Discovering Type B Relations The goal of phase 2 is to merge similar Type A relations, such as <Cities, be locate in, Countries> and <Cities, be city of, Countries>, to produce Type B relations, which have a set of synonymous relation phrases and more complete argument entity classes.",
                    "sid": 170,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The challenge for this phase is to cluster a very large set of Type A relations, on which it is infeasible to run a clustering algorithm that does pairwise all pair comparison.",
                    "sid": 171,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, we designed an evidence-based partition-then-cluster algorithm.",
                    "sid": 172,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The basic idea is to heuristically partition the large set of Type A relations into small subsets, and run clustering algorithms on each subset.",
                    "sid": 173,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is Steps 1 and 2 build an inverted index from evidence to sets of Type A relations.",
                    "sid": 174,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On the graph G whose vertices are Type A relations, steps 3 to 8 set the value of edge weights based on the strength of evidence that shows the end-points are related.",
                    "sid": 175,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The weight of evidence E is calculated as follows: # \ud835\udc60\u210e\ufffd\ufffd\ud835\udc5f\ud835\udc52\ufffd\ufffd \ud835\udc61\ud835\udc62\ud835\udc5d\ud835\udc59\ud835\udc52\ufffd\ufffd \ud835\udc56\ufffd\ufffd \ud835\udc64\u210e\ud835\udc56\ufffd\ufffd\u210e \ud835\udc38 \ufffd\ufffd\ud835\udc5d\ud835\udc5d\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ud835\udc60 \ud835\udc56\ud835\udc5b based on the observation that most pairs of Type A \ud835\udc64\ud835\udc52\ufffd\ufffd\ud835\udc54\u210e\ufffd\ufffd(\ufffd\ufffd) = max(# \ud835\udc50\ud835\udc59\ufffd\ufffd\ud835\udc60\ud835\udc60\ud835\udc52\ufffd\ufffd \ud835\udc38 \ufffd\ufffd\ud835\udc5d\ud835\udc5d\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ud835\udc60 \ud835\udc56\ufffd\ufffd) relations are not similar because of the sparseness in the entity class and the relation semantic space.",
                    "sid": 176,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If there is little or no evidence showing that two Type A relations are similar, they can be put into different partitions.",
                    "sid": 177,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Once partitioned, the clustering algorithm only has to be run on each much smaller subset, thus computation complexity is reduced.",
                    "sid": 178,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The 2 types of evidence we used are shared members and shared hypernyms of relation arguments.",
                    "sid": 179,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, 2 Type A relations r1=<Cities, be city of, Countries> and r2=<Cities, be locate in, Countries> share a pair of arguments <Tokyo, Japan>, and a pair of hypernyms <\u201dcity\u201d, \u201ccountry\u201d>.",
                    "sid": 180,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These pieces of evidence give us hints that they are likely to be similar.",
                    "sid": 181,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As shown in the pseudo code, shared arguments and hypernyms are used as independent evidence to reduce sparseness.",
                    "sid": 182,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Algorithm Phase 2: Discovering Type B relations The idea behind this weighting scheme is similar to that of TFIDF in that the weight of evidence is higher if it appears more frequently and is less ambiguous (appeared in fewer semantic classes during clustering of phase 1).",
                    "sid": 183,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The weighting scheme is applied to both shared arguments and labels.",
                    "sid": 184,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After collecting evidence, we prune (steps 9 to 11) the edges with a weight less than a threshold \u00b5 to remove noise.",
                    "sid": 185,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then a Depth-First Search (DFS) is called on G to find all Connected Components CC of the graph.",
                    "sid": 186,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These CCs are the partitions of likely-similar Type A relations.",
                    "sid": 187,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We run MMClustering on each CC in {CC} and generate Type B relations (step 13 to step 16).",
                    "sid": 188,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The similarity of 2 relations (SimRelationFunc) is defined as follows: \u2032 \u2032 \u2032 \ud835\udc60\ufffd\ufffd\ufffd\ufffd(< \ufffd\ufffd1, \ufffd\ufffd, \ufffd\ufffd2 >, < \ufffd\ufffd1, \ud835\udc43 , \ufffd\ufffd2 >) 0, \ud835\udc56\ufffd\ufffd \ud835\udc60\ufffd\ufffd\ufffd\ufffd(\ufffd\ufffd, \ufffd\ufffd\u2032 ) < \ud835\udf0e = \ufffdmin\ufffd\ud835\udc60\ufffd\ufffd\ufffd\ufffd(\ud835\udc36 , \ud835\udc36 \u2032 ), \ud835\udc60\ufffd\ufffd\ufffd\ufffd(\ud835\udc36 , \ud835\udc36 \u2032 )\ufffd , \ud835\udc52\ud835\udc59\ufffd\ufffd\ud835\udc52 Input: Set of Type A relations {r}={<C1, ctx, C2>} 1 1 2 2 Relation similarity function SimRelationFunc Map from entities to their hypernyms: Mentity2label Similarity threshold \u03b1 Edge weight threshold \u00b5 Variables G(V, E) = weighted graph in which V={r} Output: Set of Type B relations {<C1, P, C2>} Steps: 01.",
                    "sid": 189,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "{<ent, {r\u2019}>} = build inverted index from argument ent to set of Type A relations {r\u2019} on {<C1, ctx, C2>} 02 {<l, {r\u2019}>} = build inverted index from hypernym l of arguments to set of Type A relations {r\u2019} on {<C1, ctx, C2>} with map Mentity2label 03.",
                    "sid": 190,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each ent in {<ent, {r\u2019}>}.",
                    "sid": 191,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "04.",
                    "sid": 192,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each pair of r1 and r2 s.t. \ud835\udc5f1 \u2208 {\ufffd\ufffd\u2032 } \u22c0 \ufffd\ufffd2 \u2208 {\ud835\udc5f\u2032}.",
                    "sid": 193,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "05.",
                    "sid": 194,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "weight_edge(<r1, r2>) += weight (ent) 06.",
                    "sid": 195,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each l in {<l, {r\u2019}>}.",
                    "sid": 196,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "07.",
                    "sid": 197,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each pair of r1 and r2 s.t. \ud835\udc5f1 \u2208 {\ufffd\ufffd\u2032 } \u22c0 \ufffd\ufffd2 \u2208 {\ud835\udc5f\u2032}.",
                    "sid": 198,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "08.",
                    "sid": 199,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "weight_edge(<r1, r2>) += weight (l) 09.",
                    "sid": 200,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each edge <r1, r2> in G. 10.",
                    "sid": 201,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If weight_edge(<r1, r2>) < \u00b5.",
                    "sid": 202,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "11.",
                    "sid": 203,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Remove edge <r1, r2> from G. 12.",
                    "sid": 204,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "{CC}= DFS(G) 13.",
                    "sid": 205,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each connected component CC in {CC}.",
                    "sid": 206,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "14.",
                    "sid": 207,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "{<C1, ctx, C2>} = vertices in CC 15.",
                    "sid": 208,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "{<C1\u2019, P\u2019, C2\u2019>} = MMClustering({<C1, ctx, C2>}, SimRelationFunc, \u03b1) 16.",
                    "sid": 209,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Add {<C1\u2019, P\u2019, C2\u2019>} into {<C1, P, C2>}.",
                    "sid": 210,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "17.",
                    "sid": 211,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Return {<C1, P, C2>} 4.3 Computational Complexity.",
                    "sid": 212,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "WEBRE is very efficient since both phases decompose the large-clustering task into much smaller clustering tasks over partitions.",
                    "sid": 213,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given n objects for clustering, a hierarchical agglomerative clustering algorithm requires \ufffd\ufffd(\ufffd\ufffd2 ) pairwise compari sons.",
                    "sid": 214,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Assuming the clustering task is split intosubtasks of size \ufffd\ufffd1 , \ud835\udc5b2 , \u2026, \ud835\udc5b\ud835\udc58 , thus the computa tional complexity is reduced to \ufffd\ufffd(\u2211\ud835\udc58 \ufffd\ufffd2 ).",
                    "sid": 215,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Ideally 1 \ud835\udc56each subtask has an equal size of \ufffd\ufffd/\ufffd\ufffd, so the com putational complexity is reduced to O (\ufffd\ufffd2 /\ufffd\ufffd) , afactor of \ud835\udc58 speed up.",
                    "sid": 216,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In practice, the sizes of partitions are not equal.",
                    "sid": 217,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Taking the partition sizes ob served in the experiment with 0.2 million Type A relations as input, the phase 2 algorithm achieves around a 100-fold reduction in pairwise comparisons compared to the agglomerative clustering algorithm.",
                    "sid": 218,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The combination of phase 1 and phase 2 achieves more than a 1000-fold reduction in pairwise comparison, compared to running an agglomerative clustering algorithm directly on 14.7 million triples.",
                    "sid": 219,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This reduction of computational complexity makes the unsupervised extraction of relations on a large dataset a reality.",
                    "sid": 220,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the experiments with 14.7 million triples as input, phase 1 finished in 22 hours, and the phase 2 algorithm finished in 4 hours with one CPU core.",
                    "sid": 221,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, both phases can be run in parallel in a distributed computing environment because data is partitioned.",
                    "sid": 222,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore it is scalable and efficient for clustering a very large number of relation instances from a large-scale corpus like the web.",
                    "sid": 223,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 Experiment.",
                    "sid": 224,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Data preparation We tested WEBRE on resources extracted from the English subset of the Clueweb09 Dataset, which contains 503 million webpages.",
                    "sid": 225,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For building knowledge resources, all webpages are cleaned and then POS tagged and chunked with in-house tools.",
                    "sid": 226,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We implemented the algorithms described in section 4.1 to generate the knowledge sources, including a hypernym graph, two entity similarity graphs and a relation phrase similarity graph.",
                    "sid": 227,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We used Reverb Clueweb09 Extractions 1.1 (downloaded from reverb.cs.washington.edu) as the triple store (relation instances).",
                    "sid": 228,
                    "ssid": 88,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is the complete extraction of Reverb over Clueweb09 after filtering low confidence and low frequency triples.",
                    "sid": 229,
                    "ssid": 89,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It contains 14.7 million distinct triples with 3.3 million entities and 1.3 million relation phrases.",
                    "sid": 230,
                    "ssid": 90,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We choose it because 1) it is extracted by a state- of-the-art open IE extractor from the open-domain, and 2) to the best of our knowledge, it contains the largest number of distinct triples extracted from the open-domain and which is publicly available.",
                    "sid": 231,
                    "ssid": 91,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Evaluation setup The evaluations are organized as follows: we evaluate Type A relation extraction and Type B relation extraction separately, and then we compare WEBRE to its closest prior work SNE.",
                    "sid": 232,
                    "ssid": 92,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since both phases are essentially clustering algorithms, we compare the output clusters with human labeled gold standards and report performance measures, following most previous work such as Kok and Domingos (2008) and Hasegawa et al.",
                    "sid": 233,
                    "ssid": 93,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2004).",
                    "sid": 234,
                    "ssid": 94,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Three gold standards are created for triples since most of these relations are not different from a single relation instance and are not very interesting.",
                    "sid": 235,
                    "ssid": 95,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Overall, 0.2 million Type A relations and 84,000 Type B relations are extracted.",
                    "sid": 236,
                    "ssid": 96,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Evaluating Type A relations To understand the effectiveness of knowledge sources, we run Phase 1 multiple times taking entity similarity graphs (matrices) constructed with resources listed below: \u2022 TS: Distributional similarity based on the triple store.",
                    "sid": 237,
                    "ssid": 97,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each triple <ent1, ctx, ent2>, features of ent1 are {ctx} and {ctx ent2}; features of ent2 are {ctx} and {ent1 ctx}.",
                    "sid": 238,
                    "ssid": 98,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Features are weighted with PMI.",
                    "sid": 239,
                    "ssid": 99,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Cosine is used as similarity measure.",
                    "sid": 240,
                    "ssid": 100,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 LABEL: The similarity between two entities is computed according to the percentage of top hypernyms they share.",
                    "sid": 241,
                    "ssid": 101,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 SIM: The similarity between two entities is the linear combination of their similarity scores in the distributional similarity graph and in the pattern similarity graph.",
                    "sid": 242,
                    "ssid": 102,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 SIM+LABEL SIM and LABEL are combined.",
                    "sid": 243,
                    "ssid": 103,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Observing that SIM generates high quality but overly fine-grained semantic classes, we modify the entity clustering procedure to cluster argument entities based on SIM first, and then further clustering the results based on LABEL.",
                    "sid": 244,
                    "ssid": 104,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The outputs of these runs are pooled and mixed for labeling.",
                    "sid": 245,
                    "ssid": 105,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We randomly sampled 60 relation phrases.",
                    "sid": 246,
                    "ssid": 106,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each phrase, we select the 5 most frequent Type A relations from each run (4\u00d75=20 6 Type A relations in all).",
                    "sid": 247,
                    "ssid": 107,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each relation phrase, we ask a human labeler to label the mixed pool of Type A relations that share the phrase: 1) The la- belers 7 are asked to first determine the major semantic relation of each Type A relation, and then label the triples as good, fair or bad based on whether they express the major relation.",
                    "sid": 248,
                    "ssid": 108,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2) The labeler also reads all Type A relations and manually merges the ones that express the same relation.",
                    "sid": 249,
                    "ssid": 109,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These 2 steps are repeated for each phrase.",
                    "sid": 250,
                    "ssid": 110,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After labeling, we create a gold standard GS1, which contains roughly 10,000 triples for 60 relation phrases.",
                    "sid": 251,
                    "ssid": 111,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On average, close to 200 triples are manu evaluating Type A relations, Type B relations and the comparison to SNE, respectively.",
                    "sid": 252,
                    "ssid": 112,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the exper iments, we set \u03b1=0.6, \u00b5=0.1 and \ufffd\ufffd=0.02 based ontrial runs on a small development set of 10k rela tion instances.",
                    "sid": 253,
                    "ssid": 113,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We filtered out the Type A relations and Type B relations which only contain 1 or 2 computing similarity.",
                    "sid": 254,
                    "ssid": 114,
                    "kind_of_tag": "s"
                },
                {
                    "text": "7 4 human labelers perform the task.",
                    "sid": 255,
                    "ssid": 115,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A portion of the judgments were independently dual annotated; inter-annotator agreement is 79%.",
                    "sid": 256,
                    "ssid": 116,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, each judgment is crosschecked by at least one more annotator, further improving quality.",
                    "sid": 257,
                    "ssid": 117,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ally labeled and clustered for each phrase.",
                    "sid": 258,
                    "ssid": 118,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This creates a large data set for evaluation.",
                    "sid": 259,
                    "ssid": 119,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We report micro-average of precision, recall and F1 on the 60 relation phrases for each method.",
                    "sid": 260,
                    "ssid": 120,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Precision (P) and Recall (R) of a given relation phrase is defined as follows.",
                    "sid": 261,
                    "ssid": 121,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Here \ufffd\ufffd\ud835\udc34 and \ufffd\ufffd\u2032 represents a Type A relation in the algorithm output and GS1, respectively.",
                    "sid": 262,
                    "ssid": 122,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use t for triples and s(t) to represent the score of the labeled triple t. s(t) is set to 1.0, 0.5 or 0 for t labeled as good, fair and bad, respectively.",
                    "sid": 263,
                    "ssid": 123,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ly reduce the data sparseness, compared to using features extracted from the triple store only.",
                    "sid": 264,
                    "ssid": 124,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The result of the phase 1 algorithm with SIM+LABEL is used as input for phase 2.",
                    "sid": 265,
                    "ssid": 125,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Evaluating Type B relations The goal is 2-fold: 1) to evaluate the phase 2 algorithm.",
                    "sid": 266,
                    "ssid": 126,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This involves comparing system output to a gold standard constructed by hand, and reporting performance; 2) to evaluate the quality of Type B relations.",
                    "sid": 267,
                    "ssid": 127,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For this, we will also report triple-level precision.We construct a gold standard GS28 for evaluat \ud835\udc43 = \u2211\ud835\udc45\ud835\udc34 \u2211 \ud835\udc61\u2208\ud835\udc45\ud835\udc34 \ufffd\ufffd(\ufffd\ufffd) \u2211\ud835\udc45\ufffd\ufffd|\ufffd\ufffd \ud835\udc34 | , \ud835\udc45 = \u2211\ud835\udc45\ud835\udc34 \u2211 \ud835\udc61\u2208\ud835\udc45\ud835\udc34 \ufffd\ufffd(\ufffd\ufffd) \u2211\ud835\udc45\u2032 \u2211 \ud835\udc61\u2032\u2208\ud835\udc45\u2032 \ufffd\ufffd(\ud835\udc61 \u2032 ) ing Type B relations as follows: We randomly sampled 178 Type.",
                    "sid": 268,
                    "ssid": 128,
                    "kind_of_tag": "s"
                },
                {
                    "text": "B relations, which contain 1547 \ud835\udc34 \ud835\udc34 The results are in table 1.",
                    "sid": 269,
                    "ssid": 129,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Overall, LABEL performs 53% better than TS in F-measure, and SIM+LABEL performs the best, 8% better than LABEL.",
                    "sid": 270,
                    "ssid": 130,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Applying a simple sign test shows both differences are clearly significant (p<0.001).",
                    "sid": 271,
                    "ssid": 131,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Surprisingly, SIM, which uses the similarity matrix extracted from full text, has a F1 of 0.277, which is lower than TS.",
                    "sid": 272,
                    "ssid": 132,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also tried combining TS and LABEL but did not find encouraging performance compared to SIM+LABEL.",
                    "sid": 273,
                    "ssid": 133,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Algorithm Precision Recall F1 TS 0.842 (0.886) 0.266 0.388 LABEL 0.855 (0.870) 0.481 0.596 SIM 0.755 (0.964) 0.178 0.277 SIM+LABEL 0.843 (0.872) 0.540 0.643 Table 1.",
                    "sid": 274,
                    "ssid": 134,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Phase 1 performance (averaged on multiple runs) of the 4 methods.",
                    "sid": 275,
                    "ssid": 135,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The highest performance numbers are in bold.",
                    "sid": 276,
                    "ssid": 136,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(The number in parenthesis is the micro-average when empty- result relation phrases are not considered for the method).",
                    "sid": 277,
                    "ssid": 137,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Among the 4 methods, SIM has the highest precision (0.964) when relation phrases for which it fails to generate any Type A relations are excluded, but its recall is low.",
                    "sid": 278,
                    "ssid": 138,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Manual checking showsthat SIM tends to generate overly fine-grained ar Type A relations and more than 100,000 triples.",
                    "sid": 279,
                    "ssid": 139,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since the number of triples is very large, it is in- feasible for labelers to manually cluster triples to construct a gold standard.",
                    "sid": 280,
                    "ssid": 140,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To report precision, we asked the labelers to label each Type A relation contained in this Type B relation as good, fair or bad based on whether it expresses the same relation.",
                    "sid": 281,
                    "ssid": 141,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For recall evaluation, we need to know how many Type A relations are missing from each Type B relation.",
                    "sid": 282,
                    "ssid": 142,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We provide the full data set of Type A relations along with three additional resources: 1) a tool which, given a Type A relation, returns a ranked list of similar Type A relations based on the pairwise relation similarity metric in section 4, 2) DIRT paraphrase collection, 3) WordNet (Fell- baum, 1998) synsets.",
                    "sid": 283,
                    "ssid": 143,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The labelers are asked to find similar phrases by checking phrases which contain synonyms of the tokens in the query phrase.",
                    "sid": 284,
                    "ssid": 144,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given a Type B relation, ideally we expect the labelers to find all missing Type A relations using these resources.",
                    "sid": 285,
                    "ssid": 145,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We report precision (P) and recall (R) as follows.",
                    "sid": 286,
                    "ssid": 146,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Here \ufffd\ufffd\ud835\udc35 and \ufffd\ufffd\ud835\udc35 represent Type B relations in the algorithm output and GS2, respective ly.",
                    "sid": 287,
                    "ssid": 147,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\ufffd\ufffd\ud835\udc34 and \ufffd\ufffd\ud835\udc34 \ud835\udc34 \u2032 represent Type A relations.",
                    "sid": 288,
                    "ssid": 148,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\ufffd\ufffd(\ud835\udc45 ) gument classes.",
                    "sid": 289,
                    "ssid": 149,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If fine-grained argument classes or extremely high-precision Type A relations are preferred, SIM is a good choice.",
                    "sid": 290,
                    "ssid": 150,
                    "kind_of_tag": "s"
                },
                {
                    "text": "LABEL performs denotes the score of \ufffd\ufffd\ud835\udc34 . It is set to 1.0, 0.5 and 0 for good, fair or bad respectively.significantly better than TS, which shows that hy \ud835\udc43 = \u2211\ud835\udc45\ud835\udc35 \u2211\ud835\udc45\ufffd\ufffd\u2208\ud835\udc45\ufffd\ufffd|\ud835\udc45\ud835\udc34 |\u2219\ufffd\ufffd(\ufffd\ufffd\ufffd\ufffd) , \ud835\udc45 = \u2211\ud835\udc45\ud835\udc35 \u2211 \ud835\udc45\ufffd\ufffd\u2208\ud835\udc45\ufffd\ufffd|\ud835\udc45\ufffd\ufffd|\u2219\ufffd\ufffd(\ufffd\ufffd\ufffd\ufffd) \u2032pernymy information is very useful for finding ar \u2211\ud835\udc45\ud835\udc35 \u2211 \ud835\udc45\ufffd\ufffd\u2208\ud835\udc45\ufffd\ufffd|\ufffd\ufffd\ud835\udc34 | \u2211 \u2032 \u2211 \u2032 \u2032 \ufffd\ufffd\ufffd\ud835\udc34 \ufffd \ud835\udc45\ud835\udc35 \ud835\udc45\ufffd\ufffd\u2208\ud835\udc45\ud835\udc35 gument semantic classes.",
                    "sid": 291,
                    "ssid": 151,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, it has coverage problems in that the hypernym finding algorithm failed to find any hypernym from the corpus for some entities.",
                    "sid": 292,
                    "ssid": 152,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Following up, we found thatWe also ask the labeler to label at most 50 ran domly sampled triples from each Type B relation, and calculate triple-level precision as the ratio of the sum of scores of triples over the number of SIM+LABEL has similar precision and the highest recall.",
                    "sid": 293,
                    "ssid": 153,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This shows that the combination of semantic spaces is very helpful.",
                    "sid": 294,
                    "ssid": 154,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The significant recall improvement from TS to SIM+LABEL shows that the corpus-based knowledge resources significant 8 3 human labelers performed the task.",
                    "sid": 295,
                    "ssid": 155,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A portion of the judgments were independently dual annotated; inter-annotator agreement is 73%.",
                    "sid": 296,
                    "ssid": 156,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Similar to labeling Type A relations, each judgment is crosschecked by at least one more annotator, further improving quality.",
                    "sid": 297,
                    "ssid": 157,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Argument 1 Relation phrase Argument 2 marijuana, caffeine, nicotine\u2026 result in, be risk factor for, be major cause of\u2026 insomnia, emphysema, breast cancer,\u2026 C# 2.0, php5, java, c++, \u2026 allow the use of, also use, introduce the concept of\u2026 destructors, interfaces, template,\u2026 clinton, obama, mccain, \u2026 win, win in, take, be lead in,\u2026 ca, dc, fl, nh, pa, va, ga, il, nc,\u2026 Table 3.",
                    "sid": 298,
                    "ssid": 158,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Sample Type B relations extracted.sampled triples.",
                    "sid": 299,
                    "ssid": 159,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use \ud835\udc43\ud835\udc56\ud835\udc5b\ud835\udc60 to represent the preci sion calculated based on labeled triples.",
                    "sid": 300,
                    "ssid": 160,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, as we are interested in how many phrases are found by our algorithm, we also include \ufffd\ufffd\ud835\udc5d\u210e\ud835\udc5f\ud835\udc4e\ud835\udc60\ud835\udc52 , which is the recall of synonymous phrases.",
                    "sid": 301,
                    "ssid": 161,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Results are shown in Table 2.",
                    "sid": 302,
                    "ssid": 162,
                    "kind_of_tag": "s"
                },
                {
                    "text": "by merging similar ones and splitting non-coherent clusters.",
                    "sid": 303,
                    "ssid": 163,
                    "kind_of_tag": "s"
                },
                {
                    "text": "GS3 contains 742 triples and 135 clusters.",
                    "sid": 304,
                    "ssid": 164,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We report triple-level pairwise precision, recall and F1 for both algorithms against GS3, and report results in Table 4.",
                    "sid": 305,
                    "ssid": 165,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We fine-tuned SNE (using grid search, internal cross-validation, and coarse-to-fine parameter tuning), and report its best performance.",
                    "sid": 306,
                    "ssid": 166,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Algorithm Precision Recall F1 WEBRE 0.848 0.734 0.787 SNE 0.850 0.080 0.146 Table 2.",
                    "sid": 307,
                    "ssid": 167,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Performance for Type B relation extraction.",
                    "sid": 308,
                    "ssid": 168,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first column shows the range of the maximum sizes of Type A relations in the Type B relation.",
                    "sid": 309,
                    "ssid": 169,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The last column shows the number of Type B relations that are in this range.",
                    "sid": 310,
                    "ssid": 170,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number in parenthesis in the third column is the recall of phrases.",
                    "sid": 311,
                    "ssid": 171,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The result shows that WEBRE can extract Type B relations at high precision (both P and \ud835\udc43\ud835\udc56\ud835\udc5b\ud835\udc60 ).",
                    "sid": 312,
                    "ssid": 172,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The overall recall is 0.684.",
                    "sid": 313,
                    "ssid": 173,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 2 also shows a trend that if the maximum number of Type A relation in the target Type B relation is larger, the recall is better.",
                    "sid": 314,
                    "ssid": 174,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This shows that the recall of Type B relations depends on the amount of data available for that relation.",
                    "sid": 315,
                    "ssid": 175,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Some examples of Type B relations extracted are shown in Table 3.",
                    "sid": 316,
                    "ssid": 176,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Comparison with SNE We compare WEBRE\u2019s extracted Type B relations to the relations extracted by its closest prior work SNE9.",
                    "sid": 317,
                    "ssid": 177,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We found SNE is not able to handle the 14.7 million triples in a foreseeable amount of time, so we randomly sampled 1 million (1M) triples 10 and test both algorithms on this set.",
                    "sid": 318,
                    "ssid": 178,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also filtered out result clusters which have only 1 or 2 triples from both system outputs.",
                    "sid": 319,
                    "ssid": 179,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For comparison purposes, we constructed a gold standard GS3 as follows: randomly select 30 clusters from both system outputs, and then find similar clusters from the other system output, followed by manually refining the clusters 9 Obtained from alchemy.cs.washington.edu/papers/kok08.",
                    "sid": 320,
                    "ssid": 180,
                    "kind_of_tag": "s"
                },
                {
                    "text": "10 We found that SNE\u2019s runtime on 1M triples varies from.",
                    "sid": 321,
                    "ssid": 181,
                    "kind_of_tag": "s"
                },
                {
                    "text": "several hours to over a week, depending on the parameters.The best performance is achieved with runtime of approxi mately 3 days.",
                    "sid": 322,
                    "ssid": 182,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also tried SNE with 2M triples, on which many runs take several days and show no sign of convergence.",
                    "sid": 323,
                    "ssid": 183,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For fairness, the comparison was done on 1M triples.",
                    "sid": 324,
                    "ssid": 184,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 4.",
                    "sid": 325,
                    "ssid": 185,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pairwise precision/recall/F1 of WEBRE and SNE.",
                    "sid": 326,
                    "ssid": 186,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 4 shows that WEBRE outperforms SNE significantly in pairwise recall while having similar precision.",
                    "sid": 327,
                    "ssid": 187,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There are two reasons.",
                    "sid": 328,
                    "ssid": 188,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First, WEBRE makes use of several corpus-level semantic sources extracted from the corpus for clustering entities and phrases while SNE uses only features in the triple store.",
                    "sid": 329,
                    "ssid": 189,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These semantic resources significantly reduced data sparseness.",
                    "sid": 330,
                    "ssid": 190,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Examination of the output shows that SNE is unable to group many triples from the same generally-recognized fine-grained relations.",
                    "sid": 331,
                    "ssid": 191,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, SNE placed relation instances <Barbara, grow up in, Santa Fe> and <John, be raised mostly in, Santa Barbara> into 2 different clusters because the arguments and phrases do not share features nor could be grouped by SNE\u2019s mutual clustering.",
                    "sid": 332,
                    "ssid": 192,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In contrast, WEBRE groups them together.",
                    "sid": 333,
                    "ssid": 193,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Second, SNE assumes a relation phrase to be in exactly one cluster.",
                    "sid": 334,
                    "ssid": 194,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, SNE placed be part of in the phrase cluster be city of and failed to place it in another cluster be subsidiary of.",
                    "sid": 335,
                    "ssid": 195,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This limits SNE\u2019s ability to placing relation instances with polysemous phrases into correct relation clusters.",
                    "sid": 336,
                    "ssid": 196,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It should be emphasized that we use pairwise precision and recall in table 4 to be consistent with the original SNE paper.",
                    "sid": 337,
                    "ssid": 197,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pairwise metrics are much more sensitive than instance-level metrics, and penalize recall exponentially in the worst case11 if an algorithm incorrectly splits a coherent cluster; therefore the absolute pairwise recall difference 11 Pairwise precision and recall are calculated on all pairs that.",
                    "sid": 338,
                    "ssid": 198,
                    "kind_of_tag": "s"
                },
                {
                    "text": "are in the same cluster, thus are very sensitive.",
                    "sid": 339,
                    "ssid": 199,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, if an algorithm incorrectly split a cluster of size N to a smaller main cluster of size N/2 and some constant-size clusters, pairwise recall could drop to as much as \u00bc of its original value.",
                    "sid": 340,
                    "ssid": 200,
                    "kind_of_tag": "s"
                },
                {
                    "text": "should not be interpreted as the same as the instance-level recall reported in previous experiments.",
                    "sid": 341,
                    "ssid": 201,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On 1 million triples, WEBRE generates 12179 triple clusters with an average size12 of 13 while SNE generate 53270 clusters with an average size 5.1.",
                    "sid": 342,
                    "ssid": 202,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In consequence, pairwise recall drops significantly.",
                    "sid": 343,
                    "ssid": 203,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Nonetheless, at above 80% pairwise precision, it demonstrates that WEBRE can group more related triples by adding rich semantics har vested from the web and employing a more general treatment of polysemous relation phrases.",
                    "sid": 344,
                    "ssid": 204,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On 1M triples, WEBRE finished in 40 minutes, while the run time of SNE varies from 3 hours to a few days.",
                    "sid": 345,
                    "ssid": 205,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "conclusion. ",
            "number": "6",
            "sents": [
                {
                    "text": "We present a fully unsupervised algorithm WEBRE for large-scale open-domain relation extraction.",
                    "sid": 346,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "WEBRE explicitly handles polysemy relations and achieves a significant improvement on recall by incorporating rich corpus-based semantic resources.",
                    "sid": 347,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Experiments on a large data set show that it can extract a very large set of high-quality relations.",
                    "sid": 348,
                    "ssid": 3,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgements",
            "number": "",
            "sents": [
                {
                    "text": "Supported in part by the Intelligence Advanced Research Projects Activity (IARPA) via Air Force Research Laboratory (AFRL) contract number FA865010-C-7058.",
                    "sid": 349,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright annotation thereon.",
                    "sid": 350,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of IARPA, AFRL, or the U.S. Government.",
                    "sid": 351,
                    "ssid": 6,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}