{
    "ID": "W06-3909",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "A Bootstrapping Algorithm for Automatically Harvesting Semantic Relations",
                    "sid": 0,
                    "ssid": 0,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we present Espresso, a weakly-supervised iterative algorithm combined with a web-based knowledge expansion technique, for extracting binary semantic relations.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given a small set of seed instances for a particular relation, the system learns lexical patterns, applies them to extract new instances, and then uses the Web to filter and expand the instances.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Preliminary experiments show that Espresso extracts highly precise lists of a wide variety of semantic relations when compared with two state of the art systems.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Recent attention to knowledge-rich problems such as question answering [18] and textual entailment [10] has encouraged Natural Language Processing (NLP) researchers to develop algorithms for automatically harvesting shallow semantic resources.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With seemingly endless amounts of textual data at our disposal, we have a tremendous opportunity to automatically grow semantic term banks and ontological resources.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Methods must be accurate, adaptable and scalable to the varying sizes of domain corpora (e.g., textbooks vs. World Wide Web), and independent or weakly dependent on human supervision.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper we present Espresso, a novel bootstrapping algorithm for automatically harvesting semantic relations, aiming at effectively supporting NLP applications, emphasizing two major points that have been partially neglected by previous systems: generality and weak supervision.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "From the one side, Espresso is intended as a general-purpose system able to extract a wide variety of binary semantic relations, from the classical is-a and part-of relations, to more specific and domain oriented ones like chemical reactants in a chemistry domain and position succession in political texts.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The system architecture is designed with generality in mind, avoiding any relation-specific inference technique.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Indeed, for each semantic relation, the system builds specific lexical patterns inferred from textual corpora.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "From the other side, Espresso requires only weak human supervision.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to start the extraction process, a user provides only a small set of seed instances of a target relation (e.g. Italy-country and Canada-country for the is-a relation.)",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our experience, a handful of seed instances, in general, is sufficient for large corpora while for smaller corpora, a slightly larger set is required.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To guarantee weakest supervision, Espresso combines its bootstrapping approach with a web-based knowledge expansion technique and linguistic analysis, exploiting the seeds as much as possible.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "relevant work. ",
            "number": "2",
            "sents": [
                {
                    "text": "To date, most research on lexical relation harvesting has focused on is-a and part-of relations.",
                    "sid": 15,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Approaches fall into two main categories: pattern- and clustering-based.",
                    "sid": 16,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Most common are pattern-based approaches.",
                    "sid": 17,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hearst [12] pioneered using patterns to extract hyponym (is-a) relations.",
                    "sid": 18,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Manually building three lexico-syntactic patterns, Hearst sketched a bootstrapping algorithm to learn more patterns from instances, which has served as the model for most subsequent pattern-based algorithms.",
                    "sid": 19,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Berland and Charniak [1] propose a system for part-of relation extraction, based on the Hearst approach [12].",
                    "sid": 20,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Seed instances are used to infer linguistic patterns that, in turn, are used to extract new instances, ranked according to various statistical measures.",
                    "sid": 21,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While this study introduces statistical measures to evaluate instance reliability, it remains vulnerable to data sparseness and has the limitation of taking into consideration only one-word terms.",
                    "sid": 22,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Improving upon Berland and Charniak [1], Girju et al. [11] employ machine learning algorithms and WordNet [8] to disambiguate part-of generic patterns, like [whole-NP\u2019s part- NP].",
                    "sid": 23,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This study is the first extensive attempt to solve the problem of generic relational patterns, that is, those expressive patterns that have high recall while suffering low precision, as they subsume a large set of instances.",
                    "sid": 24,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to discard incorrect instances, Girju et al. learn WordNet-based selectional restrictions, like [whole-NP(scene#4)\u2019s part-NP(movie#1)].",
                    "sid": 25,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While making huge grounds on improving precision/recall, the system requires heavy supervision through manual semantic annotations.",
                    "sid": 26,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Ravichandran and Hovy [20] focus on efficiency issues for scaling relation extraction to terabytes of data.",
                    "sid": 27,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A simple and effective algorithm is proposed to infer surface patterns from a small set of instance seeds by extracting all substrings relating seeds in corpus sentences.",
                    "sid": 28,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The frequencies of the substrings in the corpus are then used to retain the best patterns.",
                    "sid": 29,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The approach gives good results on specific relations such as birthdates, however it has low precision on generic ones like is-a and part-of.",
                    "sid": 30,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pantel et al. [17] proposed a similar, highly scalable approach, based on an edit-distance technique, to learn lexicoPOS patterns, showing both good performances and efficiency.",
                    "sid": 31,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Espresso uses a similar approach to infer patterns, but we then apply refining techniques to deal with various types of relations.",
                    "sid": 32,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Other pattern-based algorithms include Riloff and Shepherd [21], who used a semiautomatic method for discovering similar words using a few seed examples by using pattern-based techniques and human supervision, KnowItAll [7] that performs large-scale extraction of facts from the Web, Mann [15] and Fleischman et al. [9] who used part of speech patterns to extract a subset of is-a relations involving proper nouns, and Downey et al. [6] who formalized the problem of relation extraction in a coherent and effective combinatorial model that is shown to outperform previous probabilistic frameworks.",
                    "sid": 33,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Clustering approaches to relation extraction are less common and have insofar been applied only to is-a extraction.",
                    "sid": 34,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These methods employ clustering algorithms to group words according to their meanings in text, label the clusters using its members\u2019 lexical or syntactic dependencies, and then extract an is-a relation between each cluster member and the cluster label.",
                    "sid": 35,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Caraballo [3] proposed the first attempt, which used conjunction and apposition features to build noun clusters.",
                    "sid": 36,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recently, Pantel and Ravichandran [16] extended this approach by making use of all syntactic dependency features for each noun.",
                    "sid": 37,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The advantage of clustering approaches is that they permit algorithms to identify is-a relations that do not explicitly appear in text, however they generally fail to produce coherent clusters from fewer than 100 million words; hence they are unreliable for small corpora.",
                    "sid": 38,
                    "ssid": 24,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "the espresso algorithm. ",
            "number": "3",
            "sents": [
                {
                    "text": "The Espresso algorithm is based on a similar framework to the one adopted in [12].",
                    "sid": 39,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For a specific semantic binary relation (e.g., is-a), the algorithm requires as input a small set of seed instances Is and a corpus C. An instance is a pair of terms x and y governed by the relation at hand (e.g., Pablo Picasso is-a artist).",
                    "sid": 40,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Starting from these seeds, the algorithm begins a four-phase loop.",
                    "sid": 41,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the first phase, the algorithm infers a set of patterns P that captures as many of the seed instances as possible in C. In the second phase, we define a reliability measure to select the best set of patterns P'\u2286P. In phase three, the patterns in P' are used to extract a set of instances I. Finally, in phase four, Espresso scores each instance and then selects the best instances I' as input seeds for the next iteration.",
                    "sid": 42,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The algorithm terminates when a predefined stopping condition is met (for our preliminary experiments, the stopping condition is set according to the size of the corpus).",
                    "sid": 43,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each induced pattern p and instance i, the information theoretic scores, r\u03c0(p) and r\u03b9(i) respectively, aim to express their reliability.",
                    "sid": 44,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Below, Sections 3.2\u20133.5 describe in detail these different phases of Espresso.",
                    "sid": 45,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.1.",
                    "sid": 46,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Term definition.",
                    "sid": 47,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Before one can extract relation instances from a corpus, it is necessary to define a tokenization procedure for extracting terms.",
                    "sid": 48,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Terms are commonly defined as surface representations of stable and key domain concepts [19].",
                    "sid": 49,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Defining regular expressions over POS-tagged corpora is the most commonly used technique to both define and extract terms.",
                    "sid": 50,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We adopt a slightly modified version of the term definition given in [13], as it is one of the most commonly used in the literature: ((Adj|Noun)+|((Adj|Noun)*(NounPrep)?)(Adj|Noun)*)Noun We operationally extend the definition of Adj to include present and past participles as most noun phrases composed of them are usually intended as terms (e.g., boiling point).",
                    "sid": 51,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, unlike many approaches for automatic relation extraction, we allow complex multi-word terms as anchor points.",
                    "sid": 52,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hence, we can capture relations between complex terms, such as \u201crecord of a criminal conviction\u201d part-of \u201cFBI report\u201d.",
                    "sid": 53,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.2.",
                    "sid": 54,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Phase 1: Pattern discovery.",
                    "sid": 55,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The pattern discovery phase takes as input a set of instances I' and produces as output a set of lexical patterns P. For the first iteration I' = Is, the set of initial seeds.",
                    "sid": 56,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to induce P, we apply a slight modification to the approach presented in [20].",
                    "sid": 57,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each input instance i = {x, y}, we first retrieve all sentences Sx,y containing the two terms x and y. Sentences are then generalized into a set of new sentences SGx,y by replacing all terminological expressions by a terminological label (TR).",
                    "sid": 58,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example: \u201cBecause/IN HF/NNP is/VBZ a/DT weak/JJ acid/NN and/CC x is/VBZ a/DT y\u201d is generalized as: \u201cBecause/IN TR is/VBZ a/DT TR and/CC x is/VBZ a/DT y\u201d All substrings linking terms x and y are then extracted from the set SGx,y, and overall frequencies are computed.",
                    "sid": 59,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The most frequent substrings then represent the set of new patterns P, where the frequency cutoff is experimentally set.",
                    "sid": 60,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Term generalization is particularly useful for small corpora, where generalization is vital to ease the data sparseness.",
                    "sid": 61,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, the generalized patterns are naturally less precise.",
                    "sid": 62,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hence, when dealing with bigger corpora, the system allows the use of Sx,y\u222aSGx,y in order to extract substrings.",
                    "sid": 63,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For our experiments, we used the set SGx,y . 3.3.",
                    "sid": 64,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Phase 2: Pattern filtering.",
                    "sid": 65,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this phase, Espresso selects among the patterns P those that are most reliable.",
                    "sid": 66,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Intuitively, a reliable pattern is one that is both highly precise and one that extracts many instances.",
                    "sid": 67,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The recall of a pattern p can be approximated by the fraction of input instances in I' that are extracted by p. Since it is difficult at run-time to estimate the precision of a pattern, we are weary of keeping patterns that generate many instances (i.e., patterns that generate high recall but potentially disastrous precision).",
                    "sid": 68,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We thus prefer patterns that are highly associated with the input patterns I'.",
                    "sid": 69,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pointwise mutual information [4] is a commonly used metric for measuring the strength of association between two events x and y: pmi(x, y ) = log P(x, y ) P(x)P(y ) We define the reliability of a pattern p, r\u03c0(p), as its average strength of association across each input instance i in I', weighted by the reliability of each instance i: \u239b \u239e \u2211\u239c pmi(i, p) \u2217 r (i )\u239f \u239c r ( p ) = i\u2208I \u2032 \u239d max \u03b9 \u239f pmi \u23a0 \u03c0 I \u2032 where r\u03b9(i) is the reliability of instance i (defined in Section 3.5) and maxpmi is the maximum pointwise mutual information between all patterns and all instances.",
                    "sid": 70,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "r\u03c0(p) ranges from [0,1].",
                    "sid": 71,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The reliability of the manually supplied seed instances are r\u03b9(i) = 1.",
                    "sid": 72,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The pointwise mutual information between instance i = {x, y} and pattern p is estimated using the following formula: pmi(i, p) = log x, p, y x,*, y *, p,* where |x, p, y| is the frequency of pattern p instantiated with terms x and y and where the asterisk (*) represents a wildcard.",
                    "sid": 73,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A well-known problem is that pointwise mutual information is biased towards infrequent events.",
                    "sid": 74,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To address this, we multiply pmi(i, p) with the discounting factor suggested in [16].",
                    "sid": 75,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set of highest n scoring patterns P', according to r\u03c0(p), are then selected and retained for the next phase, where n is the number of patterns of the previous iteration incremented by 1.",
                    "sid": 76,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In general, we expect that the set of patterns is formed by those of the previous iteration plus a new one.",
                    "sid": 77,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Yet, new statistical evidence can lead the algorithm to discard a pattern that was previously discovered.",
                    "sid": 78,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, to further discourage too generic patterns that might have low precision, a threshold t is set for the number of instances that a pattern retrieves.",
                    "sid": 79,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Patterns firing more than t instances are then discarded, no matter what their score is. In this paper, we experimentally set t to a value dependent on the size of the corpus.",
                    "sid": 80,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In future work, this parameter can be learned using a development corpus.",
                    "sid": 81,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our reliability measure ensures that overly generic patterns, which may potentially have very low precision, are discarded.",
                    "sid": 82,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, we are currently exploring a web-expansion algorithm that could both help detect generic patterns and also filter out their incorrect instances.",
                    "sid": 83,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We estimate the precision of the instance set generated by a new pattern p by looking at the number of these instances that are instantiated on the Web by previously accepted patterns.",
                    "sid": 84,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Generic patterns will generate instances with higher Web counts than incorrect patterns.",
                    "sid": 85,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then, the Web counts can also be used to filter out incorrect instances from the generic patterns\u2019 instantiations.",
                    "sid": 86,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "More details are discussed in Section 4.3.",
                    "sid": 87,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.4.",
                    "sid": 88,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Phase 3: Instance discovery.",
                    "sid": 89,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this phase, Espresso retrieves from the corpus the set of instances I that match any of the lexical patterns in P'.",
                    "sid": 90,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In small corpora, the number of extracted instances can be too low to guarantee sufficient statistical evidence for the pattern discovery phase of the next iteration.",
                    "sid": 91,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In such cases, the system enters a web expansion phase, in which new instances for the given patterns are retrieved from the Web, using the Google search engine.",
                    "sid": 92,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Specifically, for each instance i\u2208 I, the system creates a set of queries, using each pattern in P' with its y term instantiated with i\u2019s y term.",
                    "sid": 93,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, given the instance \u201cItaly ; country\u201d and the pattern [Y such as X] , the resulting Google query will be \u201ccountry such as *\u201d.",
                    "sid": 94,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "New instances are then created from the retrieved Web results (e.g. \u201cCanada ; country\u201d) and added to I. We are currently exploring filtering mechanisms to avoid retrieving too much noise.",
                    "sid": 95,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, to cope with data sparsity, a syntactic expansion phase is also carried out.",
                    "sid": 96,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A set of new instances is created for each instance i\u2208 I by extracting sub-terminological expressions from x corresponding to the syntactic head of terms.",
                    "sid": 97,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, expanding the relation \u201cnew record of a criminal conviction\u201d part-of \u201cFBI report\u201d, the following new instances are obtained: \u201cnew record\u201d part-of \u201cFBI report\u201d, and \u201crecord\u201d part-of \u201cFBI report\u201d.",
                    "sid": 98,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.5.",
                    "sid": 99,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Phase 4: Instance filtering.",
                    "sid": 100,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Estimating the reliability of an instance is similar to estimating the reliability of a pattern.",
                    "sid": 101,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Intuitively, a reliable instance is one that is highly associated with as many reliable patterns as possible (i.e., we have more confidence in an instance when multiple reliable patterns instantiate it.)",
                    "sid": 102,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hence, analogous to our pattern reliability measure in Section 3.3, we define the reliability of an instance i, r\u03b9(i), as: \u2211 pmi(i, p) \u2217 r (p) r (i) = p\u2208P\u2032 max pmi \u03b9 P\u2032 where r\u03c0(p) is the reliability of pattern p (defined in Section 3.3) and maxpmi is the maximum pointwise mutual information between all patterns and all instances, as in Section 3.3.",
                    "sid": 103,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Espresso finally selects the highest scoring m instances, I', and retains them as input for the subsequent iteration.",
                    "sid": 104,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we experimentally set m = 200.",
                    "sid": 105,
                    "ssid": 67,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "experimental results. ",
            "number": "4",
            "sents": [
                {
                    "text": "4.1.",
                    "sid": 106,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Experimental Setup.",
                    "sid": 107,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this section, we present a preliminary comparison of Espresso with two state of the art systems on the task of extracting various semantic relations.",
                    "sid": 108,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.1.1.",
                    "sid": 109,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Datasets We perform our experiments using the following two datasets: \u0083 TREC9: This dataset consists of a sample of articles from the Aquaint (TREC9) newswire text collection.",
                    "sid": 110,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The sample consists of 5,951,432 words extracted from the following data files: AP890101 \u2013 AP890131, AP890201 \u2013 AP890228, and AP890310 \u2013 AP890319.",
                    "sid": 111,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u0083 CHEM: This small dataset of 313,590 words consists of a college level textbook of introductory chemistry [2].",
                    "sid": 112,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We preprocess the corpora using the Alembic Workbench POStagger [5].",
                    "sid": 113,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.1.2.",
                    "sid": 114,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Systems We compare the results of Espresso with the following two state of the art extraction systems: \u0083 RH02: This algorithm by Ravichandran and Hovy [20] learns lexical extraction patterns from a set of seed instances of a particular relation (see Section 2.)",
                    "sid": 115,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u0083 PR04: This is-a extraction algorithm from Pantel and Ravichandran [16] first automatically induces concepts (clusters) from a raw corpus, names the concepts, and then extracts an is-a relation between each cluster member and its cluster label.",
                    "sid": 116,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each cluster member, the system may generate multiple possible is-a relations, but in this evaluation we only keep the highest scoring one.",
                    "sid": 117,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To apply this algorithm, both datasets were first analyzed using the Minipar parser [14].",
                    "sid": 118,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u0083 ESP: This is the algorithm described in this paper (details in Section 3).",
                    "sid": 119,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.1.3.",
                    "sid": 120,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Semantic Relations Espresso is designed to extract various semantic relations exemplified by a given small set of seed instances.",
                    "sid": 121,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For our preliminary evaluation, we consider the standard is-a and part-of relations as well as three novel relations: \u0083 succession: This relation indicates that one proper noun succeeds another in a position or title.",
                    "sid": 122,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, George Bush succeeded Bill Clinton and Pope Benedict XVI succeeded Pope John Paul II.",
                    "sid": 123,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We evaluate this relation on the TREC9 corpus.",
                    "sid": 124,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u0083 reaction: This relation occurs between chemical elements/molecules that can be combined in a chemical reaction.",
                    "sid": 125,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, hydrogen gas reacts-with oxygen gas and zinc reacts-with hydrochloric acid.",
                    "sid": 126,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We evaluate this relation on the CHEM corpus.",
                    "sid": 127,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u0083 production: This relation occurs when a process or element/object produces a result.",
                    "sid": 128,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, ammonia produces nitric oxide.",
                    "sid": 129,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We evaluate this relation on the CHEM corpus.",
                    "sid": 130,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each semantic relation, we manually extracted a set of seed examples.",
                    "sid": 131,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The seeds were used for both Espresso as well as RH021.",
                    "sid": 132,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 1 lists a sample of the seeds as well as sample outputs from Espresso.",
                    "sid": 133,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.2.",
                    "sid": 134,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Precision and Recall.",
                    "sid": 135,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We implemented each of the three systems outlined in Section 4.1.2 and applied them to the TREC and CHEM datasets.",
                    "sid": 136,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each output set, per relation, we evaluate the precision of the system by extracting a random sample of instances (50 for the TREC corpus and 20 for the 1 PR04 does not require any seeds..",
                    "sid": 137,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 1.",
                    "sid": 138,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Sample seeds used for each semantic relation and sample outputs from Espresso.",
                    "sid": 139,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number in the parentheses for each relation denotes the total number of seeds.",
                    "sid": 140,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "E CHEM corpus) and evaluating their quality manually using one human judge2.",
                    "sid": 141,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each instance, the judge may assign a score of 1 for correct, 0 for incorrect, and \u00bd for partially correct.",
                    "sid": 142,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Example instances that were judged partially correct include \u201canalyst is-a manager\u201d and \u201cpilot is-a teacher\u201d.",
                    "sid": 143,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The precision for a given set of relation instances is the sum of the judge\u2019s scores divided by the number of instances.",
                    "sid": 144,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Although knowing the total number of instances of a particular relation in any nontrivial corpus is impossible, it is possible to compute the recall of a system relative to another system\u2019s recall.",
                    "sid": 145,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The recall of a system A, RA, is given by the following formula: C R A = C where CA is the number of correct instances of a particular relation extracted by A and C is the total number of correct instances in the corpus.",
                    "sid": 146,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Following [17], we define the relative recall of system A given system B, RA|B, as: RA|B = RA = C A P \u00d7 A = A RB CB PB \u00d7 B Using the precision estimates, PA, from our precision experiments, we can estimate CA \u2248 PA \u00d7 |A|, where A is the total number of instances of a particular relation discovered by system A. 2 In future work, we will perform this evaluation using multiple judges in order to obtain confidence bounds and.",
                    "sid": 147,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "agreement scores.",
                    "sid": 148,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 2.",
                    "sid": 149,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "System performance on the is-a relation on the TREC9 dataset.",
                    "sid": 150,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 3.",
                    "sid": 151,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "System performance on the is-a relation on the CHEM dataset.",
                    "sid": 152,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "SYS TE M IN ST AN CE S PR EC ISI ON * RE L RE CA LL\u2020 SYS TE M IN ST AN CE S PR EC ISI ON * RE L RE CA LL\u2020 RH 02 5 7 , 5 2 5 2 8 . 0 % 5 . 3 1 RH 02 2 5 5 6 2 5 . 0 % 3 . 7 6 PR 04 1 , 5 0 4 4 7 . 0 % 0 . 2 3 PR 04 1 0 8 4 0 . 0 % 0 . 2 5 ES P 4 , 1 5 4 7 3 . 0 % 1 . 0 0 ES P 2 0 0 8 5 . 0 % 1 . 0 0 * Precision estimated from 50 randomly sampled instances.",
                    "sid": 153,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2020 Relative recall is given in relation to ESP. * Precision estimated from 20 randomly sampled instances.",
                    "sid": 154,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2020 Relative recall is given in relation to ESP. Table 4.",
                    "sid": 155,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "System performance on the part-of relation on the TREC9 dataset.",
                    "sid": 156,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 5.",
                    "sid": 157,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "System performance on the part-of relation on the CHEM dataset.",
                    "sid": 158,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "SYS TE M IN ST AN CE S PR EC ISI ON * RE L RE CA LL\u2020 SYS TE M IN ST AN CE S PR EC ISI ON * RE L RE CA LL\u2020 RH 02 1 2 , 8 2 8 3 5 . 0 % 4 2 . 5 2 RH 02 1 1 , 5 8 2 3 3 . 8 % 5 8 . 7 8 ES P 1 3 2 8 0 . 0 % 1 . 0 0 ES P 1 1 1 6 0 . 0 % 1 . 0 0 * Precision estimated from 50 randomly sampled instances.",
                    "sid": 159,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2020 Relative recall is given in relation to ESP. * Precision estimated from 20 randomly sampled instances.",
                    "sid": 160,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2020 Relative recall is given in relation to ESP. Table 6.",
                    "sid": 161,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "System performance on the succession relation on the TREC9 dataset.",
                    "sid": 162,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 7.",
                    "sid": 163,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "System performance on the reaction relation on the CHEM dataset.",
                    "sid": 164,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "SYS TE M IN ST AN CE S PR EC ISI ON * RE L RE CA LL\u2020 SYS TE M IN ST AN CE S PR EC ISI ON * RE L RE CA LL\u2020 RH 02 4 9 , 7 9 8 2 . 0 % 3 6 . 9 6 RH 02 6 , 0 8 3 3 0 % 5 3 . 6 7 ES P 5 5 4 9 . 0 % 1 . 0 0 ES P 4 0 8 5 % 1 . 0 0 * Precision estimated from 50 randomly sampled instances.",
                    "sid": 165,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2020 Relative recall is given in relation to ESP. * Precision estimated from 20 randomly sampled instances.",
                    "sid": 166,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2020 Relative recall is given in relation to ESP. Tables 2 \u2013 8 reports the total number of instances, precision, and relative recall of each system on the TREC9 and CHEM corpora.",
                    "sid": 167,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The relative recall is always given in relation to the Espresso system.",
                    "sid": 168,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, in Table 2, RH02 has a relative recall of 5.31 with Espresso, which means that the RH02 system output 5.31 times more correct relations than Espresso (at a cost of much Table 8.",
                    "sid": 169,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "System performance on the production relation on the CHEM dataset.",
                    "sid": 170,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "SYSTEM INSTANCES PRECISION* REL RECALL\u2020 RH02 197 57.5% 0.80 ESP 196 72.5% 1.00 * Precision estimated from 20 randomly sampled instances.",
                    "sid": 171,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2020 Relative recall is given in relation to ESP. lower precision).",
                    "sid": 172,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Similarly, PR04 has a relative recall of 0.23 with Espresso, which means that PR04 outputs 4.35 fewer correct relations than Espresso (also with a smaller precision).",
                    "sid": 173,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.3.",
                    "sid": 174,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Discussion.",
                    "sid": 175,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Experimental results, for all relations and the two different corpus sizes, show that Espresso greatly outperforms the other two methods on precision.",
                    "sid": 176,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, Espresso fails to match the recall level of RH02 in all but the experiment on the production relation.",
                    "sid": 177,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Indeed, the filtering of unreliable patterns and instances during the bootstrapping algorithm not only discards the patterns that are unrelated to the actual relation, but also patterns that are too generic and ambiguous \u2013 hence resulting in a loss of recall.",
                    "sid": 178,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As underlined in Section 3.2, the ambiguity of generic patterns often introduces much noise in the system (e.g, the pattern [X of Y] can ambiguously refer to a part-of, is-a or possession relation).",
                    "sid": 179,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, generic patterns, while having low precision, yield a high recall, as also reported by [11].",
                    "sid": 180,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We ran an experiment on the reaction relation, retaining the generic patterns produced during Espresso\u2019s selection process.",
                    "sid": 181,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As expected, we obtained 1923 instances instead of the 40 reported in Table 7, but precision dropped from 85% to 30%.",
                    "sid": 182,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The challenge, then, is to harness the expressive power of the generic patterns whilst maintaining the precision of Espresso.",
                    "sid": 183,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We propose the following solution that helps both in distinguishing generic patterns from incorrect patterns and also in filtering incorrect instances produced by generic patterns.",
                    "sid": 184,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unlike Girju et al. [11] that propose a highly supervised machine learning approach based on selectional restriction, ours is an unsupervised method based on statistical evidence obtained from the Web.",
                    "sid": 185,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "At a given iteration in Espresso, the intuition behind our solution is that the Web is large enough that correct instances will be instantiated by many of the currently accepted patterns P. Hence, we can distinguish between generic patterns and incorrect patterns by inspecting the relative frequency distribution of their instances using the patterns in P. More formally, given an instance i produced by a generic or incorrect pattern, we count how many times i instantiates on the Web with every pattern in P, using Google.",
                    "sid": 186,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The instance i is then considered correct if its web count surpasses a given threshold.",
                    "sid": 187,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The pattern in question is accepted as a generic pattern if a sufficient number of its instances are considered correct, otherwise it is rejected as an incorrect pattern.",
                    "sid": 188,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Although our results in Section 4.2 do not include this algorithm, we performed a small experiment by adding an a-posteriori generic pattern recovery phase to Espresso.",
                    "sid": 189,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We tested the 7,634 instances extracted by the generic pattern [X of Y] on the CHEM corpus for the part-of relation.",
                    "sid": 190,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We randomly sample 200 of these instances and then queried Google for these instances using the pattern [X consists of Y].",
                    "sid": 191,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Manual evaluation of the 25 instances that occurred at least once on Google showed 50% precision.",
                    "sid": 192,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Adding these instances to the results from Table 5 decreases the system precision from 60% to 51%, but dramatically increases Espresso\u2019s recall by a factor of 8.16.",
                    "sid": 193,
                    "ssid": 88,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, it is important to note that there are several other generic patterns, like [X\u2019s Y], from which we expect a similar precision of 50% with a continual increase of recall.",
                    "sid": 194,
                    "ssid": 89,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is a very exciting avenue of further investigation.",
                    "sid": 195,
                    "ssid": 90,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "conclusions. ",
            "number": "5",
            "sents": [
                {
                    "text": "We proposed a weakly supervised bootstrapping algorithm, called Espresso, for automatically extracting a wide variety of binary semantic relations from raw text.",
                    "sid": 196,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given a small set of seed instances for a particular relation, the system learns reliable lexical patterns, applies them to extract new instances ranked by an information theoretic definition of reliability, and then uses the Web to filter and expand the instances.",
                    "sid": 197,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There are many avenues of future work.",
                    "sid": 198,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Preliminary results show that Espresso generates highly precise relations, but at the expense of lower recall.",
                    "sid": 199,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As mentioned above in Section 4.3, we are working on improving system recall with a web-based method to identify generic patterns and filter their instances.",
                    "sid": 200,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Early results appear very promising.",
                    "sid": 201,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also plan to investigate the use of WordNet selectional constraints, as proposed by [11].",
                    "sid": 202,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We expect here that negative instances will play a key role in determining the selectional restriction on generic patterns.",
                    "sid": 203,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Espresso is the first system, to our knowledge, to emphasize both minimal supervision and generality, both in identification of a wide variety of relations and in extensibility to various corpus sizes.",
                    "sid": 204,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It remains to be seen whether one could enrich existing ontologies with relations harvested by Espresso, and if these relations can benefit NLP applications such as QA.",
                    "sid": 205,
                    "ssid": 10,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgements",
            "number": "",
            "sents": [
                {
                    "text": "The authors wish to thank the reviewers for their helpful comments and Andrew Philpot for evaluating the outputs of the systems.",
                    "sid": 206,
                    "ssid": 11,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}