{
    "ID": "PE2006_p00",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "We introduce finite-state registered automata (FSRAs), a new computational device within the framework of finite-state technology, specifically tailored for implementing non-concatenative morphological processes.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This model extends and augments existing finite-state techniques, which are presently not optimized for describing this kind of phenomena.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We first define the model and discuss its mathematical and computational properties.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then, we provide an extended regular language whose expressions denote FSRAs.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, we exemplify the utility of the model by providing several examples of complex morphological and phonological phenomena, which are elegantly implemented with FSRAs.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Finite-state (FS) technology has been considered adequate for describing the morphological processes of the world\u2019s languages since the pioneering works of Koskenniemi (1983) and Kaplan and Kay (1994).",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Several toolboxes provide extended regular expression description languages and compilers of the expressions to finite-state automata (FSAs) and transducers (FSTs) (Karttunen et al. 1996; Mohri 1996; van Noord and Gerdemann 2001a).",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While FS approaches to most natural languages have generally been very successful, it is widely recognized that they are less suitable for non-concatenative phenomena; in particular, FS techniques are assumed not to be able to efficiently account for the non-concatenative word formation processes that Semitic languages exhibit (Lavie et al. 1988).",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While much of the inflectional morphology of Semitic languages can be rather straightforwardly described using concatenation as the primary operation, the main word formation process in such languages is inherently non-concatenative.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The standard account describes words in Semitic languages as combinations of two morphemes: a root and a pattern.1 The root consists of consonants only, by default three (although longer roots are known).",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The pattern is a combination of vowels and, possibly, consonants too, with \u201cslots\u201d into which the root consonants can be inserted.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Words are created by interdigitating roots into patterns: The first consonant of the root is inserted into the first consonantal slot of the pattern, the second root consonant fills the second slot, and the third fills the last slot.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After the root combines with the pattern, some \u2217 Department of Computer Science, University of Haifa, 31905 Haifa, Israel.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Email: yaelc@cs.haifa.ac.il.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2020 Department of Computer Science, University of Haifa, 31905 Haifa, Israel.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Email: shuly@cs.haifa.ac.il.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 An additional morpheme, vocalization, is used to abstract the pattern further; for the present purposes,.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "this distinction is irrelevant.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Submission received: 17 August 2004; revised submission received: 15 June 2005; accepted for publication: 26 September 2005.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u00a9 2006 Association for Computational Linguistics Figure 1 Na\u00a8\u0131ve FSA with duplicated paths.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "morpho-phonological alternations take place, which may be nontrivial but are mostly concatenative.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The major problem that we tackle in this work is medium-distance dependencies, whereby some elements that are related to each other in some deep-level representation (e.g., the consonants of the root) are separated on the surface.",
                    "sid": 22,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While these phenomena do not lie outside the descriptive power of FS systems, na\u00a8\u0131vely implementing them in existing finite-state calculi is either impossible or, at best, results in large networks that are inefficient to process, as the following examples demonstrate.",
                    "sid": 23,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Example 1 We begin with a simplified problem, namely accounting for circumfixes.",
                    "sid": 24,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Consider three Hebrew patterns: haDDaDa, hitDaDaDut, and miDDaD, where the empty boxes indicate the slots in the patterns into which the consonants of the roots are inserted.",
                    "sid": 25,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hebrew orthography2 dictates that these patterns be written hDDDa, htDDDut, and mDDD, respectively, i.e., the consonants are inserted into the \u2018D\u2019 slots as one unit (i.e., the patterns can be viewed as circumfixes).",
                    "sid": 26,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An automaton that accepts all the possible combinations of three-consonant stems and these three circumfixes is illustrated in Figure 1.3 Given r stems and p circumfixes, the number of its states is (2r + 2)p + 2, i.e., increases linearly with the number of stems and circumfixes.",
                    "sid": 27,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number of arcs in this automaton is 3rp + 2p, i.e, also O(rp).",
                    "sid": 28,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Evidently, the three basic different paths that result from the three circumfixes have the same body, which encodes the stems.",
                    "sid": 29,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An attempt to avoid the duplication of paths is represented by the automaton of Figure 2, which accepts the language denoted by the regular expression (ht + h + m)(root)(ut + a + E).",
                    "sid": 30,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number of states here is 2r + 4, i.e., is independent of the number of circumfixes.",
                    "sid": 31,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number of arcs is (3r + 2p), that is, O(r + p), and thus, the complexity of the number of arcs is also reduced.",
                    "sid": 32,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Obviously, however, such an automaton over-generates by accepting also invalid words such as mDDDut.",
                    "sid": 33,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In other words, it ignores the dependencies which hold between prefixes and suffixes of the same circumfix.",
                    "sid": 34,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since finite-state devices have no 3 This is an oversimplified example; in practice, the process of combining roots with patterns is highly.",
                    "sid": 35,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "idiosyncratic, like other derivational morphological processes.",
                    "sid": 36,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "50 Figure 2 Over-generating FSA.",
                    "sid": 37,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "memory, save for the states, there is no simple and space-efficient way to account for such dependencies.",
                    "sid": 38,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Example 2 Consider now a representation of Hebrew where all vowels are explicit, e.g., the pattern hitDaDeD.",
                    "sid": 39,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Consider also the roots r.g.z, b.$.l, and g.b.r. The consonants of a given root are inserted into the \u2018D\u2019 slots to obtain bases such as hitragez, hitba$el, and hitgaber.",
                    "sid": 40,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The finite state automaton of Figure 3 is the minimized automaton accepting the language; it has fifteen states.",
                    "sid": 41,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the number of three letter roots is r, then a general automaton accepting the combinations of the roots with this pattern will have 4r + 3 states and 5r + 1 arcs.",
                    "sid": 42,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice the duplicated arcs which stem from copying the pattern in the different paths.",
                    "sid": 43,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Example 3 Another non-concatenative process is reduplication: The process in which a morpheme or part of it is duplicated.",
                    "sid": 44,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Full reduplication is used as a pluralization process in Malay and Indonesian; partial reduplication is found in Chamorro to indicate intensivity.",
                    "sid": 45,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It can also be found in Hebrew as a diminutive formation of nouns and adjectives: kel eb kl ab la b $a pa n $p an pa n z a q a n zq an qa n $ a x o r $x ar xa r dog pu pp y ra bb it bu nn y b e a r d go at ee bl a c k da rk qa ta n litt le q ta n ta n ti n y Let \u03a3 be a finite alphabet.",
                    "sid": 46,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The language L = {ww | w \u2208 \u03a3\u2217} is known to be trans-regular, therefore no finite-state automaton accepts it.",
                    "sid": 47,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, the language Ln = {ww | w \u2208 \u03a3\u2217, |w| = n} for some constant n is regular.",
                    "sid": 48,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recognizing Ln is a finite approximation of the general problem of recognizing L. The length of the words in natural languages can in most cases be bounded by some n \u2208 N, hence the amount of reduplication in natural languages is practically limited.",
                    "sid": 49,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, the descriptive power of Ln is sufficient for the amount of reduplication in natural languages (by Figure 3 FSA for the pattern hitDaDeD.",
                    "sid": 50,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "51 constructing Ln for a small number of different ns).",
                    "sid": 51,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An automaton that accepts Ln can be constructed by listing a path for each accepted string (since \u03a3 and n are finite, the number of words in Ln is finite).",
                    "sid": 52,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The main drawback of such an automaton is thegrowth in its size as |\u03a3| and n increase: The number of strings in Ln is |\u03a3 n . Thus, finite state techniques can account for limited reduplication, but the resulting networks are space-inefficient.",
                    "sid": 53,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a final, non-linguistic, motivating example, consider the problem of n-bit incrementation, introduced by Kornai (1996).",
                    "sid": 54,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Example 4 The goal of this example is to construct a transducer over \u03a3 = {0, 1} whose input is a 32 bit binary number and whose output is the result of adding 1 to the input.",
                    "sid": 55,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A transducer that performs addition by 1 on binary numbers has only 5 states and 12 arcs,4 but this transducer is neither sequential nor sequentiable.",
                    "sid": 56,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The problem is that since the input is scanned left to right but the carry moves right to left, the output of the first bit has to be delayed, possibly even until the last input bit is scanned.",
                    "sid": 57,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, for an n-bit binary incrementor, 2n disjunctions have to be considered, and therefore a minimized transducer has to assign a separate state to each combination of bits, resulting in 2n states and a similar number of transitions.",
                    "sid": 58,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this work we propose a novel FS model which facilitates the expression of medium-distance dependencies such as interdigitation and reduplication in an efficient way.",
                    "sid": 59,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our main motivation is theoretical, i.e., reducing the complexity of the number of states and arcs in the networks; we show that these theoretical contributions result in practical improvements.",
                    "sid": 60,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Section 3 we define the model formally, show that it is equivalent to FSAs and define many closure properties directly.5 We then (Section 4) define a regular expression language for denoting FSRAs.",
                    "sid": 61,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Section 5 we provide dedicated regular expression operators for some non-concatenative phenomena and exemplify the usefulness of the model by efficiently accounting for the motivating examples.",
                    "sid": 62,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Section 6 we extend FSRAs to transducers.",
                    "sid": 63,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model is evaluated through an actual implementation in Section 7.",
                    "sid": 64,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We conclude with suggestions for future research.",
                    "sid": 65,
                    "ssid": 65,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "related work. ",
            "number": "2",
            "sents": [
                {
                    "text": "In spite of the common view that FS technology is in general inadequate for describing non-concatenative processes, several works address the above-mentioned problems in various ways.",
                    "sid": 66,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We summarize existing approaches in this section.",
                    "sid": 67,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Several works examine the applicability of traditional two-level systems for implementing non-concatenative morphology.",
                    "sid": 68,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Two-Level Morphology was used by Kataja and Koskenniemi (1988) to create a rule system for phonological and morphophonological alternations in Akkadian, accounting for word inflection and regular verbal derivation.",
                    "sid": 69,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As this solution effectively defines lexical representations of word-forms, its main disadvantage is that the final network is the na\u00a8\u0131ve one, suffering from the space complexity problems discussed above.",
                    "sid": 70,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Lavie et al.",
                    "sid": 71,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1988) examine the applicability of Two 4 A complete explanation of the construction can be found in http://www.xrce.xerox.com/competencies/ content-analysis/fsCompiler/fsexamples.html#Add1.",
                    "sid": 72,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 Many of the formal proofs and constructions, especially the ones that are similar to the case of standard.",
                    "sid": 73,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "FSAs, are suppressed; see CohenSygal (2004) for the complete proofs and constructions.",
                    "sid": 74,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "52 Level Morphology to the description of Hebrew Morphology, and in particular to verb inflection.",
                    "sid": 75,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Their lexicon consists of three parts: verb primary bases (the past tense, third person, singular, masculine), verb prefixes, and verb suffixes.",
                    "sid": 76,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They attempt to describe Hebrew verb inflection as a concatenation of prefix+base+suffix, implementable by the Two-Level model.",
                    "sid": 77,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, they conclude that \u201cThe Two-Level rules are not the natural way to describe ... verb inflection process.",
                    "sid": 78,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The only alternative choice ... is to keep all bases ... it seems wasteful to save all the secondary bases of verbs of the same pattern.\u201d Other works deal with non-concatenative morphology by extending ordinary FSAs without extending their expressivity.",
                    "sid": 79,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The traditional two-level model of Koskenniemi (1983) is expanded into n-tape automata by Kiraz (2000), following the insight of Kay (1987) and Kataja and Koskenniemi (1988).",
                    "sid": 80,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The idea is to use more than two levels of expression: The surface level employs one representation, but the lexical form employs multiple representations (e.g., root, pattern) and therefore can be divided into different levels, one for each representation.",
                    "sid": 81,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Elements that are separated on the surface (such as the root\u2019s consonants) are adjacent on a particular lexical level.",
                    "sid": 82,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, to describe circumfixation using this model, a 4-tape automaton of the form (surface, PR pattern, circumfix, stem\u2295 is constructed, so that each word is represented by 4 levels.",
                    "sid": 83,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The surface level represents the final form of the word.",
                    "sid": 84,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The PR pattern is the pattern in which the stem and the circumfix are combined (P represents the circumfix\u2019s position and R the root letter \u2019s position), e.g., PRRRP.",
                    "sid": 85,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The circumfix and stem levels represent the circumfix and the stem respectively.",
                    "sid": 86,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, combining the Hebrew stem pqd with the circumfix htut will have the 4-level representation shown in Figure 4.",
                    "sid": 87,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that the symbols representing the circumfix in the PR pattern level (i.e., the occurrences of the symbol \u2018P\u2019), the circumfix symbols in the circumfix level, and the circumfix symbols in the surface level are located in correlating places in the different levels.",
                    "sid": 88,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The same holds for the stem symbols.",
                    "sid": 89,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this way, it is clear which symbols of the surface word belong to the circumfix, which belong to the stem, and how they combine together to create the final form of the word.",
                    "sid": 90,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The 4-tape automaton of Figure 5 accepts all the combinations created by circumfixing roots with the three circumfixes of Example 1.",
                    "sid": 91,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each arc is attributed with a quadruplet, consisting of four correlating symbols in the four levels.",
                    "sid": 92,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that as in FSAs, the paths encoding the roots are duplicated for each circumfix, so that this automaton is as space- inefficient as ordinary FSAs.",
                    "sid": 93,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Kiraz (2000) does not discuss the space complexity of this model, but the number of states still seems to increase with the number of roots and patterns.",
                    "sid": 94,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, the n-tape model requires specification of dependencies between symbols in different levels, which may be nontrivial.",
                    "sid": 95,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Walther (2000a) suggests a solution for describing natural language reduplication using finite-state methods.",
                    "sid": 96,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The idea is to enrich finite-state automata with three new operations: repeat, skip, and self loops.",
                    "sid": 97,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Repeat arcs allow moving backwards within a string and thus repeat a part of it (to model reduplication).",
                    "sid": 98,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Skip arcs allow moving forwards in a string while suppressing the spell out of some of its letters; self loop arcs model infixation.",
                    "sid": 99,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Walther (2000b), the above technique is used to describe Temiar Figure 4 4-tape representation for the Hebrew word htpqdut.",
                    "sid": 100,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "53 Figure 5 4-tape automaton for circumfixation example.",
                    "sid": 101,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "reduplication, but no complexity analysis of the model is given.",
                    "sid": 102,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, this technique does not seem to be able to describe interdigitation.",
                    "sid": 103,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Beesley and Karttunen (2000) describe a technique, called compile-replace, for constructing FSTs, which involves reapplying the regular-expression compiler to its own output.",
                    "sid": 104,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The compile-replace algorithm facilitates a compact definition of non- concatenative morphological processes, but since such expressions compile to the na\u00a8\u0131ve networks, no space is saved.",
                    "sid": 105,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, this is a compile-time mechanism rather than a theoretical and mathematically founded solution.",
                    "sid": 106,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Other works extend the FS model by enabling some sort of context-sensitivity.",
                    "sid": 107,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Blank (1985, 1989) presents a model, called Register Vector Grammar, introducing context- sensitivity by representing the states and transitions of finite-state automata as ternary- valued vectors, which need not be fully specified.",
                    "sid": 108,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "No formal properties of this model are discussed.",
                    "sid": 109,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In a similar vein, Kornai (1996) introduces vectorized finite-state automata, where both the states and the transitions are represented by vectors of elements of a partially ordered set.",
                    "sid": 110,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The vectors are manipulated by operations of unification and overwriting.",
                    "sid": 111,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The vectors need not be fully determined, as some of the elements can be unknown (free).",
                    "sid": 112,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this way information can be moved through the transitions by the overwriting operation and traversing these transitions can be sanctioned through the unification operation.",
                    "sid": 113,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As one of the examples of the advantages of this model, Kornai (1996) shows it can efficiently solve the problem of 32-bit binary incrementor (Example 4).",
                    "sid": 114,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Using vectorized finite-state automata, a 32-bit incrementor is constructed where first, using overwriting, the input is scanned and stored in the vectors, and then, using unification, the result is calculated where the carry can be computed from right to left.",
                    "sid": 115,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We return to this example in example 6, where we show how our own model can solve it efficiently.",
                    "sid": 116,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The formalism presented by Kornai (1996) allows a significant reduction in the network size, but its main disadvantage lies in the fact that it significantly deviates from the standard methodology of developing finite-state devices, and integration of vectorized automata with standard ones remains a challenge.",
                    "sid": 117,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, it is unclear how, for a given problem, the corresponding network should be constructed: Programming with vectorized automata seems to be unnatural, and no regular expression language is provided for them.",
                    "sid": 118,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A more general approach to the design of finite-state machines is introduced byMohri, Pereira, and Riley (2000).",
                    "sid": 119,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They introduce an object-oriented library for manipu 54 lating finite-state devices that is based on the algebraic concepts of rational power series and semirings.",
                    "sid": 120,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This approach facilitates a high degree of generality as the algorithms are defined for the general algebraic notions, which can then be specialized according to the needs of the user.",
                    "sid": 121,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They exemplify the usefulness of this library by showing how to specialize it for the manipulation of weighted automata and transducers.",
                    "sid": 122,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our work can be seen as another specialization of this general approach, tailored for ideally dealing with our motivating examples.",
                    "sid": 123,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Several works introduce the notion of registers, whether for solving similar problems or motivated by different considerations.",
                    "sid": 124,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Krauwer and des Tombe (1981) refer to transducers with a finite number of registers when comparing transducers and context free grammars with respect to their capabilities to describe languages.",
                    "sid": 125,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They sketch a proof showing that such transducers are equivalent to ordinary finite-state transducers.",
                    "sid": 126,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, they never formally define the model and do not discuss its ability to efficiently implement non-concatenative natural languages phenomena.",
                    "sid": 127,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, they do not show how the closure properties can be implemented directly on these registered transducers, and do not provide any regular language denoting such transducers.",
                    "sid": 128,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Motivated by different considerations, Kaminski and Francez (1994) present a computational model which extends finite state automata to the case of infinite alphabets.",
                    "sid": 129,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This model is limited to recognizing only regular languages over infinite alphabets while maintaining closure under Kleene star and boolean operations, with the exception of closure under complementation.",
                    "sid": 130,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The familiar automaton is augmented with registers, used to store alphabet symbols, whose number is fixed for each automaton and can vary from one automaton to another.",
                    "sid": 131,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model is designed to deal with infinite alphabets, and therefore it cannot distinguish between different symbols; it can identify different patterns but cannot distinguish between different symbols in the pattern as is often needed in natural languages.",
                    "sid": 132,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our solution is reminiscent of Kaminski and Francez (1994) in the sense that it augments finite-state automata with finite memory (registers) in a restricted way, but we avoid the above-mentioned problem.",
                    "sid": 133,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, our model supports a register alphabet that differs from the language alphabet, allowing the information stored in the registers to be more meaningful.",
                    "sid": 134,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, our transition relation is a more simplified extension of the standard one in FSAs, rendering our model a conservative extension of standard FSAs and allowing simple integration of existing networks with networks based on our model.",
                    "sid": 135,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, Beesley (1998) directly addresses medium-distance dependencies between separated morphemes in words.",
                    "sid": 136,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "He proposes a method, called flag diacritics, which adds features to symbols in regular expressions to enforce dependencies between separated parts of a string.",
                    "sid": 137,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The dependencies are forced by different kinds of unification actions.",
                    "sid": 138,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this way, a small amount of finite memory is added, keeping the total size of the network relatively small.",
                    "sid": 139,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unfortunately, this method is not formally defined, nor are its mathematical and computational properties proved.",
                    "sid": 140,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, flag diacritics are manipulated at the level of the extended regular expressions, although it is clear that they are compiled into additional memory and operators in the networks themselves.",
                    "sid": 141,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The presentations of Beesley (1998) and Beesley and Karttunen (2003) do not explicate the implementation of such operators and do not provide an analysis of their complexity.",
                    "sid": 142,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our approach is similar in spirit, but we provide a complete mathematical and computational analysis of such extended networks, including a proof that the model is indeed regular and constructions of the main closure properties.",
                    "sid": 143,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also provide dedicated regular expression operations for non-concatenative processes and show 55 how they are compiled into extended networks, thereby accounting for the motivating examples.",
                    "sid": 144,
                    "ssid": 79,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "finite-state registered automata. ",
            "number": "3",
            "sents": [
                {
                    "text": "We define a new model, finite-state registered automata (FSRA), aimed at facilitating the expression of various non-concatenative morphological phenomena in an efficient way.",
                    "sid": 145,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model augments finite-state automata with finite memory (registers) in a restricted way that saves space but does not add expressivity.",
                    "sid": 146,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number of registers is finite, usually small, and eliminates the need to duplicate paths as it enables the automaton to \u201cremember \u201d a finite number of symbols.",
                    "sid": 147,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition to being associated with an alphabet symbol, each arc is also associated with an action on the registers.",
                    "sid": 148,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There are two kinds of actions, read and write.",
                    "sid": 149,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The read action, denoted R, allows traversing an arc only if a designated register contains a specific symbol.",
                    "sid": 150,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The write action, denoted W, allows traversing an arc while writing a specific symbol into a designated register.",
                    "sid": 151,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this section we define FSRAs and show that they are equivalent to standard FSAs (Section 3.1).",
                    "sid": 152,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We then directly define several closure operations over FSRAs (Section 3.2) and provide some optimizations in Section 3.3.",
                    "sid": 153,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We conclude this section with a discussion of minimization (Section 3.4).",
                    "sid": 154,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.1 Definitions and Examples.",
                    "sid": 155,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Definition A finite-state registered automaton (FSRA) is a tuple A = (Q, q0 , \u03a3, \u0393, n, \u03b4, F\u2295, where: \u2022 Q is a finite set of states.",
                    "sid": 156,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 q0 \u2208 Q is the initial state.",
                    "sid": 157,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 \u03a3 is a finite alphabet (the language alphabet).",
                    "sid": 158,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 n \u2208 N (indicating the number of registers).",
                    "sid": 159,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 \u0393 is a finite alphabet including the symbol \u2018#\u2019 (the registers alphabet).",
                    "sid": 160,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use meta-variables ui , vi to range over \u0393 and u, v to range over \u0393n . \u2022 The initial content of the registers is #n , meaning that the initial value of all the registers is \u2018empty\u2019.",
                    "sid": 161,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 \u03b4 \u2286 Q \u00d7 \u03a3 \u222a {E}\u00d7 {R, W}\u00d7 {0, 1, 2, ...",
                    "sid": 162,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", n \u2212 1}\u00d7 \u0393 \u00d7 Q is the transition relation.",
                    "sid": 163,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The intuitive meaning of \u03b4 is as follows: \u2013 (s, \u03c3, R, i, \u03b3, t) \u2208 \u03b4 where i > 0 implies that if A is in state s, the input symbol is \u03c3, and the content of the i-th register is \u03b3, then A may enter state t. \u2013 (s, \u03c3, W, i, \u03b3, t) \u2208 \u03b4 where i > 0 implies that if A is in state s and the input symbol is \u03c3, then the content of the i-th register is changed into \u03b3 (overwriting whatever was there before) and A may enter state t. \u2013 (s, \u03c3, R, 0, #, t) implies that if A is in state s and the input symbol is \u03c3, then A may enter state t. Notice that the content of register number 0 is always #.",
                    "sid": 164,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use the shorthand notation (s, \u03c3, t) for such transitions.",
                    "sid": 165,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 F \u2286 Q is the set of final states.",
                    "sid": 166,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "56 Definition A configuration of A is a pair (q, u), where q \u2208 Q and u \u2208 \u0393n (q is the current state and u represents the registers content).",
                    "sid": 167,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set of all configurations of A is denoted by Q c . The pair qc = (q0 , #n ) is called the initial configuration, and configurations with the first component in F are called final configurations.",
                    "sid": 168,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set of final configurations is denoted by Fc . Definition Let u = u0 u1 ... un\u22121 and v = v0 v1 ... vn\u22121 . Given a symbol \u03b1 \u2208 \u03a3 \u222a {E} and an FSRA A, we say that a configuration (s, u) produces a configuration (t, v), denoted (s, u) f-\u03b1,A (t, v), iff either one of the following holds: \u2022 There exists i, 0 \u2264 i \u2264 n \u2212 1, and there exists \u03b3 \u2208 \u0393, such that (s, \u03b1, R, i, \u03b3, t) \u2208 \u03b4 and u = v and ui = vi = \u03b3; or \u2022 There exists i, 0 \u2264 i \u2264 n \u2212 1, and there exists \u03b3 \u2208 \u0393, such that (s, \u03b1, W, i, \u03b3, t) \u2208 \u03b4 and for all k, k \u2208 {0, 1, ..., n \u2212 1}, such that k \u2022= i, uk = vk and vi = \u03b3.",
                    "sid": 169,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Informally, a configuration c1 produces a configuration c2 iff the automaton can move from c1 to c2 when scanning the input \u03b1 (or without any input, when \u03b1 = E) in one step.",
                    "sid": 170,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the register operation is R, then the contents of the registers in the two configurations must be equal, and in particular the contents of the designated register in the two configurations should be the expected symbol (\u03b3).",
                    "sid": 171,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the register operation is W, then the contents of the registers in the two configurations is equal except for the designated register, whose contents in the produced configuration should be the expected symbol (\u03b3).",
                    "sid": 172,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Definition A run of A on w is a sequence of configurations c0 , ..., cr such that c0 = qc , cr \u2208 Fc , and for every k, 1 \u2264 k \u2264 r, ck\u22121 f-\u03b1k ,A ck and w = \u03b11 ...\u03b1r . An FSRA A accepts a word w if there exists a run of A on w. Notice that |w| may be less than r since some of the \u03b1i may be E. The language recognized by an FSRA A, denoted by L(A), is the set of words over \u03a3\u2217 accepted by A. Example 5 Consider again example 1.",
                    "sid": 173,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We construct an efficient FSRA accepting all and only the possible combinations of stems and circumfixes.",
                    "sid": 174,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the number of stems is r, we define an FSRA A = (Q, q0 , \u03a3, \u0393, 2, \u03b4, {qf }\u2295 where: \u2022 Q = {q0 , q1 , ...",
                    "sid": 175,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", q2r+2 , qf } \u2022 \u03a3 = {a, b, c, ...",
                    "sid": 176,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", z, ht, ut} \u2022 \u0393 = {htDDDut, hDDDa, mDDD, #} \u2022 \u03b4 = {(q0 , ht, W, 1, htDDDut, q1 ), (q0 , h, W, 1, hDDDa, q1 )} \u222a {(q0 , m, W, 1, mDDD, q1 ), (q2r+2 , ut, R, 1, htDDDut, qf )} \u222a {(q2r+2 , a, R, 1, hDDDa, qf ), (q2r+2 , E, R, 1, mDDD, qf )} \u222a {(q1 , \u03b11 , qi ), (qi , \u03b12 , qi+1 ), (qi+1 , \u03b13 , q2r+2 ) | 2 \u2264 i \u2264 2r and \u03b11 \u03b12 \u03b13 is the i-th stem}.",
                    "sid": 177,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "57 This automaton is shown in Figure 6.",
                    "sid": 178,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number of its states is 2r + 4 (like the FSA of Figure 2), that is, O(r), and in particular independent of the number of circumfixes.",
                    "sid": 179,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number of arcs is also reduced from O(r \u00d7 p), where p indicates the number of circumfixes, to O(r + p).",
                    "sid": 180,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Example 6 Consider again example 2.",
                    "sid": 181,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The FSRA of Figure 7 also accepts the same language.",
                    "sid": 182,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This automaton has seven states and will have seven states for any number of roots.",
                    "sid": 183,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number of arcs is also reduced to 3r + 3.",
                    "sid": 184,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Next, we show that finite-state registered automata and standard finite state automata recognize the same class of languages.",
                    "sid": 185,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Trivially, every finite-state automaton has an equivalent FSRA: Every FSA is also an FSRA since every transition (s, \u03c3, t) in an FSRA is a shorthand notation for (s, \u03c3, R, 0, #, t).",
                    "sid": 186,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The other direction is also simple.",
                    "sid": 187,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Theorem 1 Every FSRA has an equivalent finite-state automaton.",
                    "sid": 188,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We prove this by constructing an equivalent FSA to a given FSRA.",
                    "sid": 189,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The construction is based on the fact that in FSRAs the number of registers is finite, as are the sets \u0393 and Q, the register alphabet and states, respectively.",
                    "sid": 190,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hence the number of configurations is finite.",
                    "sid": 191,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The FSA\u2019s states are the configurations of the FSRA, and the transition function simulates the \u2018produces\u2019 relation.",
                    "sid": 192,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that this relation holds between configurations depending on \u03a3 only, similarly to the transition function in an FSA.",
                    "sid": 193,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The constructed FSA is non-deterministic, with possible E-moves.",
                    "sid": 194,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The formal proof is suppressed.",
                    "sid": 195,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number of configurations in A is |Q|\u00d7 |\u0393 n , hence the growth in the number of states when constructing A\u2217 from A might be in the worst case exponential in the num ber of registers.",
                    "sid": 196,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In other words, the move from FSAs to FSRAs can yield an exponential reduction in the size of the network.",
                    "sid": 197,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As we show below, the reduction in the number of states can be even more dramatic.",
                    "sid": 198,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The FSRA model defined above allows only one register operation on each transition.",
                    "sid": 199,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We extend it to allow up to k register operations on each transition, where k is determined for each automaton separately.",
                    "sid": 200,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The register operations are defined as a sequence (rather than a set), in order to allow more than one operation on the same Figure 6 FSRA for circumfixation.",
                    "sid": 201,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "58 Figure 7 FSRA for the pattern hitDaDeD.",
                    "sid": 202,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "register over one transition.",
                    "sid": 203,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This extension allows further reduction of the network size for some automata as well as other advantages that will be discussed presently.",
                    "sid": 204,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Definition An order-k finite-state registered automaton (FSRA-k) is a tuple A = (Q, q0 , \u03a3, \u0393, n, k, \u03b4, F\u2295, where: \u2022 Q, q0 , \u03a3, \u0393, n, F and the initial content of the registers are as before.",
                    "sid": 205,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 k \u2208 N (indicating the maximum number of register operations allowed on each arc).",
                    "sid": 206,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Let Actions\u0393 = {R, W}\u00d7 {0, 1, 2, ...",
                    "sid": 207,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", n \u2212 1}\u00d7 \u0393.",
                    "sid": 208,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then \uf8eb k \u03b4 \u2286 Q \u00d7 \u03a3 \u222a {E}\u00d7 \uf8ed {(a1 , ..., aj \u2295| for all i, 1 \u2264 i \u2264 j, ai \u2208 Actions\u0393 \uf8f6 \uf8f8 \u00d7 Q j=1 is the transition relation.",
                    "sid": 209,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u03b4 is extended to allow each transition to be associated with a series of up to k operations on the registers.",
                    "sid": 210,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each operation has the same meaning as before.",
                    "sid": 211,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The register operations are executed in the order in which they are specified.",
                    "sid": 212,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, (s, \u03c3, (a1 , ..., ai \u2295, t) \u2208 \u03b4 where i \u2264 k implies that if A is in state s, the input symbol is \u03c3 and all the register operations a1 , ..., ai are executed successfully, then A may enter state t. DefinitionGiven a \u2208 Actions\u0393 we define a relation over \u0393n , denoted u f v for u, v \u2208 \u0393n . We define u fa n v where u = u0 ... un\u22121 and v = v0 ... vn\u22121 a iff the follow ing holds: \u2022 if a = (R, i, \u03b3) for some i,0 \u2264 i \u2264 n \u2212 1 and for some \u03b3 \u2208 \u0393, then u = v and ui = vi = \u03b3.",
                    "sid": 213,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 if a = (W, i, \u03b3) for some i,0 \u2264 i \u2264 n \u2212 1 and for some \u03b3 \u2208 \u0393, then for all k \u2208 {0, 1, ...",
                    "sid": 214,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", n \u2212 1} such that k \u2022= i, uk = vk and vi = \u03b3.",
                    "sid": 215,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This relation is extended to series over Actions\u0393 . Given a series (a , ..., a \u2295\u2208 (Actions\u0393 )p n 1 p n where p \u2208 N, we define a relation over \u0393n denoted u f- v for u, v \u2208 \u0393n . We define u fa1 ,...,ap ) v iff the following holds: \u2022 if p = 1, then u fa1 v. \u2022 if p > 1, then there exists w \u2208 \u0393n such that u fa w and w fa2 ,...,ap ) v. 59 Definition Let u, v \u2208 \u0393n . Given a symbol \u03b1 \u2208 \u03a3 \u222a {E} and an FSRA-k A, we say that a configuration (s, u) produces a configuration (t, v), denoted (s, u) f-\u03b1,A (t, v), iff there exist (a1 , ...",
                    "sid": 216,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", ap \u2295\u2208 (Actions\u0393 )p for some p \u2208 N such that (s, \u03b1, (a , ...",
                    "sid": 217,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", a \u2295, t) \u2208 \u03b4 and u f- v. n 1 p a1 ,...,ap ) Definition A run of A on w is a sequence of configurations c0 , ..., cr such that c0 = qc , cr \u2208 Fc , and for every l, 1 \u2264 l \u2264 r, cl\u22121 f-\u03b1l ,A cl and w = \u03b11 ...\u03b1r . An FSRA-k A accepts a word w if there exists a run of A on w. The language recognized by an FSRA-k A, denoted by L(A), is the set of words over \u03a3\u2217 accepted by A. Example 7 Consider the Arabic nouns qamar (moon), kitaab (book), $ams (sun), and daftar (notebook).",
                    "sid": 218,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The definite article in Arabic is the prefix al, which is realized as al when preceding most consonants; however, the \u2018l\u2019 of the prefix assimilates to the first consonant of the noun when the latter is \u2018d\u2019, \u2018$\u2019, etc. Furthermore, Arabic distinguishes between definite and indefinite case markers.",
                    "sid": 219,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, nominative case is realized as the suffix u on definite nouns, un on indefinite nouns.",
                    "sid": 220,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Examples of the different forms of Arabic nouns are: wo rd no mi na tiv e de fin ite no mi na tiv e in de fin ite qa m ar kit aa b $a m s da ft ar \u2019 a l q a m a r u \u2019 a l k i t a a b u \u2019 a $ $ a m s u \u2019 a d d a f t a r u q a m a r u n k i t a a b u n $ a m s u n d a f t a r u n The FSRA2 of Figure 8 accepts all the nominative definite and indefinite forms of the above nouns.",
                    "sid": 221,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to account for the assimilation, register 2 stores information about the actual form of the definite article.",
                    "sid": 222,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, to ensure that definite nouns occur with the correct case ending, register 1 stores information of whether or not a definite article was seen.",
                    "sid": 223,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 8 FSRA2 for Arabic nominative definite and indefinite nouns.",
                    "sid": 224,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "60 FSRA-k and FSRAs recognize the same class of languages.",
                    "sid": 225,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Trivially, every FSRA has an equivalent FSRA-k: Every FSRA is an FSRA-k for k = 1.",
                    "sid": 226,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The other direction is also simple.",
                    "sid": 227,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Theorem 2 Every FSRA-k has an equivalent FSRA.",
                    "sid": 228,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We show how to construct an equivalent FSRA (or FSRA1) A\u2217 given an FSRA-k A. Each transition in A is replaced by a series of transitions in A\u2019, each of which performs one operation on the registers.",
                    "sid": 229,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first transition in the series deals with the new input symbol and the rest are E-transitions.",
                    "sid": 230,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This construction requires additional states to enable the addition of transitions.",
                    "sid": 231,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each transition in A that is replaced requires the addition of as many states as the number of register operations performed on this transition minus one.",
                    "sid": 232,
                    "ssid": 88,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The formal construction is suppressed.",
                    "sid": 233,
                    "ssid": 89,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In what follows, the term FSRA will be used to denote FSRA-k.",
                    "sid": 234,
                    "ssid": 90,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Simple FRSA will be referred to as FSRA1.",
                    "sid": 235,
                    "ssid": 91,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the sake of emphasis, however, the term FSRA-k will still be used in some cases.",
                    "sid": 236,
                    "ssid": 92,
                    "kind_of_tag": "s"
                },
                {
                    "text": "FSRA is a very space-efficient finite-state device.",
                    "sid": 237,
                    "ssid": 93,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The next theorem shows how ordinary finite-state automata can be encoded efficiently by the FSRA2 model.",
                    "sid": 238,
                    "ssid": 94,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given a finite-state automaton A, an equivalent FSRA2 A\u2217 is constructed.",
                    "sid": 239,
                    "ssid": 95,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A\u2217 has three states and two registers (in fact, only one register is used since register number 0 is never addressed).",
                    "sid": 240,
                    "ssid": 96,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One state functions as a representative for the final states in A, another one functions as a representative for the non-final states in A, and the third as an initial state.",
                    "sid": 241,
                    "ssid": 97,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The register alphabet consists of the states of A and the symbol \u2018#\u2019.",
                    "sid": 242,
                    "ssid": 98,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each arc in A has an equivalent arc in A\u2217 with two register operations.",
                    "sid": 243,
                    "ssid": 99,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first reads the current state of A from the register and the second writes the new state into the register.",
                    "sid": 244,
                    "ssid": 100,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the source state of a transition in A is a final state, then the source state of the corresponding transition in A\u2217 will be the final states representative; if the source state of a transition in A is a non-final state, then the source state of the corresponding transition in A\u2217 will be the non-final states representative.",
                    "sid": 245,
                    "ssid": 101,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The same holds also for the target states.",
                    "sid": 246,
                    "ssid": 102,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The purpose of the initial state is to write the start state of A into the register.",
                    "sid": 247,
                    "ssid": 103,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this way A\u2217 simulates the behavior of A. Notice that the number of arcs in A\u2217 equals the number of arcs in A plus one, i.e., while FSRAs can dramatically reduce the number of states, compared to standard FSAs, a reduction in the number of arcs is not guaranteed.",
                    "sid": 248,
                    "ssid": 104,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Theorem 3 Every finite-state automaton has an equivalent FSRA2 with three states and two registers.",
                    "sid": 249,
                    "ssid": 105,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Proof 1 Let A = (Q, q0 , \u03a3, \u03b4, F\u2295 be an FSA and let f : Q \u2192 fqf, qnfI, be a total function defined by qf q \u2208 F f (q) = qnf q \u2208/ F 61 Construct an FSRA2 A\u2217 = (Q\u2217, q\u2217 , \u03a3\u2217, \u0393\u2217, 2, 2, \u03b4\u2217, F\u2217\u2295, where: \u2022 Q\u2217 = {q\u2217 , qnf, qf}.",
                    "sid": 250,
                    "ssid": 106,
                    "kind_of_tag": "s"
                },
                {
                    "text": "q\u2217 is the initial state, qf is the final states representative, 0 0 and qnf is the non-final states representative \u2022 \u03a3\u2217 = \u03a3 \u2022 \u0393 = Q \u222a {#} \u2022 F\u2217 = {qf } \u2022 \u03b4\u2217 = {(f (s), \u03c3, ((R, 1, s), (W, 1, t)\u2295, f (t)) | (s, \u03c3, t) \u2208 \u03b4} \u222a {(q\u2217 , E, ((W, 1, q0 )\u2295, f (q0 ))} The formal proof that L(A) = L(A\u2217 ) is suppressed.",
                    "sid": 251,
                    "ssid": 107,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 3.2 Closure Properties.",
                    "sid": 252,
                    "ssid": 108,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The equivalence shown in the previous section between the classes of languages recognized by finite-state automata and finite-state registered automata immediately implies that finite-state registered automata maintain the closure properties of regular languages.",
                    "sid": 253,
                    "ssid": 109,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Applying the regular operations to finite-state registered automata can be easily done by converting them first into finite-state automata.",
                    "sid": 254,
                    "ssid": 110,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, as shown above, such a conversion may result in an exponential increase in the size of the automaton, invalidating the advantages of this model.",
                    "sid": 255,
                    "ssid": 111,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, we show how some of these operations can be defined directly for FSRAs.",
                    "sid": 256,
                    "ssid": 112,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The constructions are mostly based on the standard constructions for FSAs with some essential modifications.",
                    "sid": 257,
                    "ssid": 113,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In what follows, let A1 = (Q1 , q1 , \u03a31 , \u03931 , n1 , k1 , \u03b41 , F1 \u2295 and A2 = (Q2 , q2 , \u03a32 , \u03932 , n2 , k2 , \u03b42 , F2 \u2295 be finite-state 0 0 registered automata.",
                    "sid": 258,
                    "ssid": 114,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.2.1 Union.",
                    "sid": 259,
                    "ssid": 115,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Two FSRAs, A1 , A2 , are unioned into an FSRA A in the same way as in FSAs: by adding a new initial state and connecting it with E-arcs to each of the (former) initial states of A1 , A2 . The number of registers and the maximal number of register operations per arc in A is the maximum of the corresponding values in A1 , A2 . Notice that in any specific run of A, the computation goes through just one of the original automata; therefore the same set of registers can be used for strings of L(A1 ) or L(A2 ) as needed.",
                    "sid": 260,
                    "ssid": 116,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.2.2 Concatenation.",
                    "sid": 261,
                    "ssid": 117,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We show two different constructions of an FSRA A = (Q, q0 , \u03a3, \u0393, n, k, \u03b4, F\u2295 to recognize L(A1 ) \u00b7 L(A2 ).",
                    "sid": 262,
                    "ssid": 118,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Concatenation in finite-state automata is achieved by leaving only the accepting states of the second automaton as accepting states and adding an E-arc from every accepting state of the first automaton to the initial state of the second automaton.",
                    "sid": 263,
                    "ssid": 119,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Doing just this in FSRA is insufficient because using the same registers might cause undesired effects: The result might be affected by the content left in the registers after dealing with a substring from L(A1 ).",
                    "sid": 264,
                    "ssid": 120,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, this basic construction is used with care.",
                    "sid": 265,
                    "ssid": 121,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first alternative is to employ more registers in the FSRA.",
                    "sid": 266,
                    "ssid": 122,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this way when dealing with a substring from L(A1 ) the first n1 registers are used, and when moving to deal with a substring from L(A2 ) the next n2 registers are used.",
                    "sid": 267,
                    "ssid": 123,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The second alternative is to use additional register operations that clear the content of the registers before handling the next substring from L(A2 ).",
                    "sid": 268,
                    "ssid": 124,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This solution may be less intuitive but will be instrumental for Kleene closure below.",
                    "sid": 269,
                    "ssid": 125,
                    "kind_of_tag": "s"
                },
                {
                    "text": "62 3.2.3 Kleene Closure.",
                    "sid": 270,
                    "ssid": 126,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The construction is based on the concatenation construction.",
                    "sid": 271,
                    "ssid": 127,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that it cannot be based on the first alternative (adding registers) due to the fact that the number of iterations in Kleene star is not limited, and therefore the number of registers needed cannot be bounded.",
                    "sid": 272,
                    "ssid": 128,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, the second alternative is used: Register operations are added to delete the content of registers.",
                    "sid": 273,
                    "ssid": 129,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The construction is done by turning the initial state into a final one (if it is not already final) and connecting each of the final states to the initial state with an E-arc that is associated with a register operation that deletes the contents of the registers, leaving them ready to handle the next substring.",
                    "sid": 274,
                    "ssid": 130,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.2.4 Intersection.",
                    "sid": 275,
                    "ssid": 131,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the intersection construction, assume that A1 and A2 are E-free (we show an algorithm for removing E-arcs in Section 3.3.1).",
                    "sid": 276,
                    "ssid": 132,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The following construction simulates the runs of A1 and A2 simultaneously.",
                    "sid": 277,
                    "ssid": 133,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is based on the basic construction for intersection of finite-state automata, augmented by a simulation of the registers and their behavior.",
                    "sid": 278,
                    "ssid": 134,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each transition is associated with two sequences of operations on the registers, one for each automaton.",
                    "sid": 279,
                    "ssid": 135,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number of the registers is the sum of the number of registers in the two automata.",
                    "sid": 280,
                    "ssid": 136,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the intersection automaton the first n1 registers are designated to simulate the behavior of the registers of A1 and the next n2 registers simulate the behavior of A2 . In this way a word can be accepted by the intersection automaton iff it can be accepted by each one of the automata separately.",
                    "sid": 281,
                    "ssid": 137,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that register operations from \u03b41 and \u03b42 cannot be associated with the same register.",
                    "sid": 282,
                    "ssid": 138,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This guarantees that no information is lost during the simulation of the two intersected automata.",
                    "sid": 283,
                    "ssid": 139,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.2.5 Complementation.",
                    "sid": 284,
                    "ssid": 140,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Ordinary FSAs are trivially closed under complementation.",
                    "sid": 285,
                    "ssid": 141,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, given an FSA A whose language is L(A), the minimal FSA recognizing the complement of L(A) can be exponentially large.",
                    "sid": 286,
                    "ssid": 142,
                    "kind_of_tag": "s"
                },
                {
                    "text": "More precisely, for any integer n > 2, there exists a non-deterministic finite-state automaton (NFA) with n states A, such that any NFA that accepts the complement of L(A) needs at least 2n\u22122 states (Holzer and Kutrib 2002).",
                    "sid": 287,
                    "ssid": 143,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have no reason to believe that FSRAs will demonstrate a different behavior; therefore, we maintain that in the worst case, the best approach for complementing an FSRA would be to convert it into FSA and complement the latter.",
                    "sid": 288,
                    "ssid": 144,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We therefore do not provide a dedicated construction for this operator.",
                    "sid": 289,
                    "ssid": 145,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.3 Optimizations.",
                    "sid": 290,
                    "ssid": 146,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.3.1 E-removal.",
                    "sid": 291,
                    "ssid": 147,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An E-arc in an FSRA is an arc of the form (s, E, ( a\u2295, t) where a is used as a meta-variable over (Actions\u0393 + (i.e., a represents a vector of register operations).",
                    "sid": 292,
                    "ssid": 148,
                    "kind_of_tag": "s"
                },
                {
                    "text": "n Notice that this kind of arc might occur in an FSRA by its definition.",
                    "sid": 293,
                    "ssid": 149,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given an FSRA that might contain E-arcs, an equivalent FSRA without E-arcs can be constructed.",
                    "sid": 294,
                    "ssid": 150,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The construction is based on the algorithm for E-removal in finite-state automata, but the register operations that are associated with the E-arc have to be dealt with, and this requires some care.",
                    "sid": 295,
                    "ssid": 151,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The resulting FSRA has one more state than the original, and some additional arcs may be added, too.",
                    "sid": 296,
                    "ssid": 152,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The main problem is E-loops; while these can be easily removed in standard FSAs, here such loops can be associated with register operations which must be accounted for.",
                    "sid": 297,
                    "ssid": 153,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number of possible sequences of register operations along an E-loop is unbounded, but it is easy to prove that there are only finitely many equivalence classes of such sequences: Two sequences are in the same equivalence class if and only if they have the same effect on the state of the machine; since each machine has a finite number of configurations (see theorem 1), there are only finitely many such equivalence classes.",
                    "sid": 298,
                    "ssid": 154,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, the basic idea behind the construction is as follows: If there exists an E-path from q1 to q2 with the register operations a over its arcs, and an arc (q2 , \u03c3, b\u2295, q3 ) 63 Figure 9 E removal paradigm.",
                    "sid": 299,
                    "ssid": 155,
                    "kind_of_tag": "s"
                },
                {
                    "text": "where \u03c3 \u2022= E, and an E-path from q3 to q4 with the register operations c over its arcs, then the equivalent E-free network will include the arcs (q2 , \u03c3, (b\u2295, q3 ), (q1 , \u03c3, (a, b\u2295, q3 ), (q2 , \u03c3, (b, c \u2295, q4 ), and (q1 , \u03c3, (a, b, c \u2295, q3 ), with all the E-arcs removed.",
                    "sid": 300,
                    "ssid": 156,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is illustrated in Figure 9.",
                    "sid": 301,
                    "ssid": 157,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that if q1 and q2 are the same state, then states q2 and q3 will be connected by two parallel arcs differing in their associated register operations; the same holds for states q2 and q4 . Similarly, when q3 and q4 are the same state.",
                    "sid": 302,
                    "ssid": 158,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition to the above changes, special care is needed for the case in which the empty word is accepted by the original automaton.",
                    "sid": 303,
                    "ssid": 159,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The formal construction is similar in spirit to the E-removal paradigm in weighted automata (Mohri 2000), where weights along an E-path need to be gathered.",
                    "sid": 304,
                    "ssid": 160,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, we suppress the formal construction and the proof of its correctness.",
                    "sid": 305,
                    "ssid": 161,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.3.2 Optimizing Register Operations.",
                    "sid": 306,
                    "ssid": 162,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In FSRAs, traversing an arc depends not only on the input symbol but also on satisfying the series of register operations.",
                    "sid": 307,
                    "ssid": 163,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Sometimes, a given series of register operations can never be satisfied, and thus the arc to which it is attached cannot be traversed.",
                    "sid": 308,
                    "ssid": 164,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, the series of reg ister operations ((W, 1, a), (R, 1, b)\u2295 can never be satisfied, hence an arc of the form (q1 , \u03c3, ((W, 1, a), (R, 1, b)\u2295, q2 ) is redundant.",
                    "sid": 309,
                    "ssid": 165,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, the constructions of Sections 3.2 and 3.3.1 might result in redundant states and arcs that can never be reached or can never lead to a final state.",
                    "sid": 310,
                    "ssid": 166,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, in many cases a series of register operations can be minimized into a shorter series with the same effect.",
                    "sid": 311,
                    "ssid": 167,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, the series of register operations ((W, 1, a), (R, 1, a), (W, 1, b)\u2295 is equal in its effect to the series ((W, 1, b)\u2295.",
                    "sid": 312,
                    "ssid": 168,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, we show an algorithm for optimizing a given FSRA by minimizing the series of register operations over its arcs and removing redundant arcs and states.",
                    "sid": 313,
                    "ssid": 169,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For a given FSRA A = (Q, q0 , \u03a3, \u0393, n, \u03b4, F\u2295, we construct an equivalent FSRA A\u2217 = (Q, q0 , \u03a3, \u0393, n, \u03b4\u2217, F\u2295 = Opt(A), such that \u03b4\u2217 is created from \u03b4 by removing redundant arcs and by optimizing all the series of register operations.",
                    "sid": 314,
                    "ssid": 170,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We begin by defining (Actions\u0393 + as the subset of (Actions\u0393 |i + that consists only of operatio ns over the + i-th register.",
                    "sid": 315,
                    "ssid": 171,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Define a total function sati : (Actions\u0393 |i \u2212\u2192 {true, false} by: sati (a) = ( true if there exist u, v \u2208 \u0393n such that u fa v false otherwise 64 sati (a) = true iff the series of register operations a is satisfiable, i.e., there exists a configuration of register contents for which all the operations in the series can be executed successfully.",
                    "sid": 316,
                    "ssid": 172,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Determining whether sati (a) = true by exhaustively checking all the vectors in \u0393n may be inefficient.",
                    "sid": 317,
                    "ssid": 173,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, we show a necessary and sufficient + condition for determining whether sati (a) = true for some a \u2208 (Actions\u0393 , which can |i be checked efficiently.",
                    "sid": 318,
                    "ssid": 174,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, this condition will be useful in optimizing the series of register operations as will be shown later.",
                    "sid": 319,
                    "ssid": 175,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A series of register operations over the i-th register is not satisfiable if either one of the following holds: \u2022 A write operation is followed by a read operation expecting a different value.",
                    "sid": 320,
                    "ssid": 176,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 A read operation is immediately followed by a read operation expecting a different value.",
                    "sid": 321,
                    "ssid": 177,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Theorem 4 For all a = ((op1 , i, \u03b31 ), (op2 , i, \u03b32 ), ...",
                    "sid": 322,
                    "ssid": 178,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", (ops , i, \u03b3s )\u2295\u2208 (Actions\u0393 , sat (a) = false if and |i only if either one of the following holds: 1.",
                    "sid": 323,
                    "ssid": 179,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There exists k,1 \u2264 k < s, such that opk = W and there exists m, k < m \u2264 s,.",
                    "sid": 324,
                    "ssid": 180,
                    "kind_of_tag": "s"
                },
                {
                    "text": "such that opm = R, \u03b3k \u2022= \u03b3m and for all j, k < j < m, opj = R. 2.",
                    "sid": 325,
                    "ssid": 181,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There exists k,1 \u2264 k < s, such that opk = opk+1 = R and \u03b3k \u2022= \u03b3k+1 ..",
                    "sid": 326,
                    "ssid": 182,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that if i = 0, then by the definition of FSRAs, all the register operations in the series are the same operation, which is (R, 0, #); and this operation can never fail.",
                    "sid": 327,
                    "ssid": 183,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, if all the operations in the series are write operations, then again, by the definition of FSRAs, these operations can never fail.",
                    "sid": 328,
                    "ssid": 184,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If none of the two conditions of the theorem holds, then the series of register operations is satisfiable.",
                    "sid": 329,
                    "ssid": 185,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We now show how to optimize a series of operations over a given register.",
                    "sid": 330,
                    "ssid": 186,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An optimized series is defined only over satisfiable series of register operations in the following way: \u2022 If all the operations are write operations, then leave only the last one (since it will overwrite all its predecessors).",
                    "sid": 331,
                    "ssid": 187,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 If all the operations are read operations, then by theorem 4, they are all the same operation, and in this case just leave one of them.",
                    "sid": 332,
                    "ssid": 188,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 If there are both read and write operations, then distinguish between two cases: \u2013 If the first operation is a write operation, leave only the last write operation in the series.",
                    "sid": 333,
                    "ssid": 189,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2013 If the first operation is a read operation, leave the first operation (which is read) and the last write operation in the series.",
                    "sid": 334,
                    "ssid": 190,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the last write operation writes into the register the same symbol that the read operation required, then the write is redundant; leave only the read operation.",
                    "sid": 335,
                    "ssid": 191,
                    "kind_of_tag": "s"
                },
                {
                    "text": "65 Definition Define a function mini : (Actions\u0393 + (Actions\u0393 |i |i . Let a = ((op1 , i, \u03b31 ), ...",
                    "sid": 336,
                    "ssid": 192,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", (ops , i, \u03b3s )\u2295.",
                    "sid": 337,
                    "ssid": 193,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If sati (a) = true then: \u2022 If for all k,1 \u2264 k \u2264 s, opk = W, define mini (a) = ((W, i, \u03b3s )\u2295.",
                    "sid": 338,
                    "ssid": 194,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 If for all k,1 \u2264 k \u2264 s, opk = R then define mini (a) = ((R, i, \u03b3s )\u2295.",
                    "sid": 339,
                    "ssid": 195,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 If there exists m,1 \u2264 m \u2264 s such that opm = W and if there exists t, 1 \u2264 t \u2264 s, such that opt = R then: \uf8f1 ((W, i, \u03b3j )\u2295 if op1 = W and \uf8f4 for all k, j < k \u2264 \uf8f4 s, opk = R \uf8f4 ((R, i, \u03b31 ), (W, i, \u03b3j )\u2295 if op1 = R and mini (a) = \uf8f2 \uf8f4 f o r a l l k , j < k \u2264 s , o p k = R a n d \u03b3 1 \u2022 = \u03b3 j (R, i, \u03b31 )\u2295 if op1 = R and if there exists j, 1 \u2264 j \u2264 s, ( \uf8f4 such that for all k, j < k s, \uf8f4 \uf8f3\uf8f4 opk = R and \u03b31 \u2264 = \u03b3j The formal proof that mini (a) is the minimal equivalent series of register operations of a is suppressed.",
                    "sid": 340,
                    "ssid": 196,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We now show how to optimize a series of register operations.",
                    "sid": 341,
                    "ssid": 197,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Define a function min : (Actions\u0393 + + + define min(a) = b where b is obtained from a by: \u2022 Each subseries ai of a, consisting of all the register operations on the i-th register, is checked for satisfaction.",
                    "sid": 342,
                    "ssid": 198,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If sati (ai ) = false then the arc cannot be traversed and min(a) = b = null.",
                    "sid": 343,
                    "ssid": 199,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If sati (ai ) = true then ai is replaced in a by min(ai ).",
                    "sid": 344,
                    "ssid": 200,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that the order of the minimized subseries in the complete series is unimportant as they operate on different registers.",
                    "sid": 345,
                    "ssid": 201,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 If there exists i \u2022= 0, such that ai is not empty, then the subseries a0 consisting only of operations of the form (R, 0, #) is deleted from a. Finally, given an FSRA A = (Q, q0 , \u03a3, \u0393, n, \u03b4, F\u2295, construct an equivalent FSRA A\u2217 = (Q, q0 , \u03a3, \u0393, n, \u03b4\u2217, F\u2295 = Opt(A) where \u03b4\u2217 = {(q1 , \u03c3, (min(a)\u2295, q2 | (q1 , \u03c3, (a\u2295, q2 \u2208 \u03b4 and min(a) \u2022= null Opt(A) is optimized with respect to register operations.",
                    "sid": 346,
                    "ssid": 202,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Like FSAs, FSRAs may have states that can never be reached or can never lead to a final state.",
                    "sid": 347,
                    "ssid": 203,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These states (and their connected arcs) can be removed in the same way they are removed in FSAs.",
                    "sid": 348,
                    "ssid": 204,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In sum, FSRA optimization is done in two stages: 1.",
                    "sid": 349,
                    "ssid": 205,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Minimizing the series of register operations over the FSRA transitions..",
                    "sid": 350,
                    "ssid": 206,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.",
                    "sid": 351,
                    "ssid": 207,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Removing redundant states and arcs..",
                    "sid": 352,
                    "ssid": 208,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that stage 1 must be performed before stage 2 as it can result in further reduction in the size of the network when performing the second stage.",
                    "sid": 353,
                    "ssid": 209,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For a given FSRA A, define OPT(A) as the FSRA obtained from Opt(A) by removing all the redundant 66 states and transitions.",
                    "sid": 354,
                    "ssid": 210,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An FSRA A is optimized if OPT(A) = A (notice that OPT(A) is unique, i.e., if B = OPT(A) and C = OPT(A), then B = C).",
                    "sid": 355,
                    "ssid": 211,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.4 FSRA Minimization.",
                    "sid": 356,
                    "ssid": 212,
                    "kind_of_tag": "s"
                },
                {
                    "text": "FSRAs can be minimized along three different axes: states, arcs, and registers.",
                    "sid": 357,
                    "ssid": 213,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Reduction in the number of registers can always be achieved by converting an FSRA to an FSA (Section 3.1), eliminating registers altogether.",
                    "sid": 358,
                    "ssid": 214,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since FSRAs are inherently non- deterministic (see the discussion of linearization below), their minimization is related to the problem of non-deterministic finite-state automata (NFA) minimization, which is known to be NP-hard.6 However, while FSRA arc minimization is NP-hard, FSRA state minimization is different.",
                    "sid": 359,
                    "ssid": 215,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recall that in theorem 3 we have shown that any FSA has an equivalent FSRA2 with 3 states and 2 registers.",
                    "sid": 360,
                    "ssid": 216,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It thus follows that any FSRA has an equivalent FSRA2 with 3 states (simply convert the FSRA to an FSA and then convert it to an FSRA2 with 3 states).",
                    "sid": 361,
                    "ssid": 217,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that minimizing an FSRA in terms of states or registers can significantly increase the number of arcs.",
                    "sid": 362,
                    "ssid": 218,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As many implementations of finite-state devices use space that is a function of the number of arcs, the benefit that lies in such minimization is limited.",
                    "sid": 363,
                    "ssid": 219,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, a different minimization function, involving all the three axes, is called for.",
                    "sid": 364,
                    "ssid": 220,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We do not address this problem in this work.",
                    "sid": 365,
                    "ssid": 221,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As for arc minimization, we cite the following theorem.",
                    "sid": 366,
                    "ssid": 222,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As its proof is most similar to the corresponding proof on NFA, we suppress it.",
                    "sid": 367,
                    "ssid": 223,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Theorem 5 FSRA arc minimization is NP-hard.",
                    "sid": 368,
                    "ssid": 224,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The main advantage of finite-state devices is their linear recognition time.",
                    "sid": 369,
                    "ssid": 225,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In finite- state automata, this is achieved by determinizing the network, ensuring that the transition relation is a function.",
                    "sid": 370,
                    "ssid": 226,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In FSRAs, in contrast, a functional transition relation does not guarantee linear recognition time, since multiple possible transitions can exist for a given state and a given input symbol.",
                    "sid": 371,
                    "ssid": 227,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, given an FSRA A = (Q, q0 , \u03a3, \u0393, n, k, \u03b4, F\u2295, and some q, q1 , q2 \u2208 Q and \u03c3 \u2208 \u03a3, two arcs such as (q, \u03c3, ((W, 1, a)\u2295, q1 ), (q, \u03c3, ((W, 1, b)\u2295, q2 ) \u2208 \u03b4 do not hamper the functionality of the FSRA transition relation.",
                    "sid": 372,
                    "ssid": 228,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, they do imply that for the state q and for the same input symbol (\u03c3), more than one possible arc can be traversed.",
                    "sid": 373,
                    "ssid": 229,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use deterministic to denote FSRAs in which the transition relation is a function, and a new term, linearized, is used to denote FSRAs for which linear recognition time is guaranteed.",
                    "sid": 374,
                    "ssid": 230,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Generally, a FSRA is linearized if it is optimized, E-free, and given a current state and a new input symbol, and at most one transition can be traversed.",
                    "sid": 375,
                    "ssid": 231,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, if the transition relation includes two arcs of the form (q, \u03c3, (a\u2295, q1 ), (q, \u03c3, (b\u2295, q2 ), then a and b must be a contradicting series of register operations.",
                    "sid": 376,
                    "ssid": 232,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Two series of register operations are contradicting if at most one of them is satisfiable.",
                    "sid": 377,
                    "ssid": 233,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since the FSRA is optimized, each series of register operations is a concatenation of subseries, each operating on a different register; and the subseries operating on the i-th register must be either empty or ((W, i, \u03b3)\u2295 or ((R, i, \u03b3)\u2295 or ((R, i, \u03b31 ), (W, i, \u03b32 )\u2295.",
                    "sid": 378,
                    "ssid": 234,
                    "kind_of_tag": "s"
                },
                {
                    "text": "((W, i, \u03b3)\u2295 contradicts neither ((R, i, \u03b3)\u2295 nor ((R, i, \u03b31 ), (W, i, \u03b32 )\u2295.",
                    "sid": 379,
                    "ssid": 235,
                    "kind_of_tag": "s"
                },
                {
                    "text": "((R, i, \u03b3)\u2295 and ((R, i, \u03b31 ), (W, i, \u03b32 )\u2295 are contradicting only if \u03b3 \u2022= \u03b31 . 6 While this theorem is a part of folklore, we were unable to find a formal proof.",
                    "sid": 380,
                    "ssid": 236,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We explicitly prove this.",
                    "sid": 381,
                    "ssid": 237,
                    "kind_of_tag": "s"
                },
                {
                    "text": "theorem in CohenSygal (2004).",
                    "sid": 382,
                    "ssid": 238,
                    "kind_of_tag": "s"
                },
                {
                    "text": "67 Definition An FSRA A = (Q, q0 , \u03a3, \u0393, n, k, \u03b4, F\u2295, is linearized if it is optimized, E-free, and for all (q, \u03c3, (a\u2295, q1 ), (q, \u03c3, (b\u2295, q2 ) \u2208 \u03b4 such that (a\u2295 \u2022= (b\u2295, where (a\u2295 = ((op1 , i1 , \u03b31 ), ...",
                    "sid": 383,
                    "ssid": 239,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", (op1 , i1 1 2 2 2 2 2 2 1 1 1 k k , \u03b3k )\u2295 and (b\u2295 = ((op1 , i1 , \u03b31 ), ...",
                    "sid": 384,
                    "ssid": 240,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", (opm , im , \u03b3m )\u2295 , there exists j1 , 1 \u2264 j1 \u2264 k and there exists j2 ,1 \u2264 j2 \u2264 m, such that op1 = op2 = R, i1 = i2 and \u03b31 \u2022= \u03b32 . j1 j2 j1 j2 j1 j2 A na\u00a8\u0131ve algorithm for converting a given FSRA into an equivalent linearized one is to convert it to an FSA and then determinize it.",
                    "sid": 385,
                    "ssid": 241,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the worst case, this results in an exponential increase in the network size.",
                    "sid": 386,
                    "ssid": 242,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As the following theorem shows, FSRA linearization is NP-complete.",
                    "sid": 387,
                    "ssid": 243,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Theorem 6 FSRA linearization is NP-complete.",
                    "sid": 388,
                    "ssid": 244,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Proof 2 Evidently, given an FSRA A, it can be verified in polynomial time that A is linearized.",
                    "sid": 389,
                    "ssid": 245,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, FSRA linearization is in NP.",
                    "sid": 390,
                    "ssid": 246,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let \u03c6 be a CNF formula with m clauses and n variables.",
                    "sid": 391,
                    "ssid": 247,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Construct an FSRA A such that L(A) = {E} if \u03c6 is satisfiable, otherwise L(A) = \u2205.",
                    "sid": 392,
                    "ssid": 248,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let x1 , ...",
                    "sid": 393,
                    "ssid": 249,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", xn be the variables of \u03c6.",
                    "sid": 394,
                    "ssid": 250,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Define A = (Q, q0 , \u03a3, \u0393, n, 1, \u03b4, F\u2295, such that: \u2022 Q = {q0 , q1 , ...",
                    "sid": 395,
                    "ssid": 251,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", qn+m } \u2022 F = {qn+m } \u2022 \u03a3 is irrelevant (choose any \u03a3).",
                    "sid": 396,
                    "ssid": 252,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 \u0393 = {T, F}.",
                    "sid": 397,
                    "ssid": 253,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 \u03b4 = {(qi\u22121 , E, (W, i, T), qi ) | 1 \u2264 i \u2264 n}\u222a {(qi\u22121 , E, (W, i, F), qi ) | 1 \u2264 i \u2264 n} \u222a {(qn+i\u22121 , E, (R, j, T), qn+i ) | 1 \u2264 i \u2264 m and xj occurs in the i-th clause} \u222a {(qn+i\u22121 , E, (R, j, F), qn+i ) | 1 \u2264 i \u2264 m and xj occurs in the i-th clause} Notice that each path in A is of length m + n. The first n arcs in the path write an assignment into the registers, then it is possible to traverse the remaining m arcs in the path only if the assignment stored into the registers satisfies \u03c6.",
                    "sid": 398,
                    "ssid": 254,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, for the CNF formula (x1 \u2228 x2 \u2228 x5 ) \u2227 (x1 \u2228 x2 ) \u2227 (x3 \u2228 x4 \u2228 x5 ), the FSRA of Figure 10 is constructed.",
                    "sid": 399,
                    "ssid": 255,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Observe that the number of states and arcs in this FSRA is O(mn).",
                    "sid": 400,
                    "ssid": 256,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Now, linearize A into an FSRA A\u2217 and assume this can be done in polynomial time.",
                    "sid": 401,
                    "ssid": 257,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By the definition of linearized FSRA, A\u2217 does not contain E-arcs.",
                    "sid": 402,
                    "ssid": 258,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, E \u2208 L(A\u2217 ) iff the initial state of A\u2217 is also a final one.",
                    "sid": 403,
                    "ssid": 259,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hence, \u03c6 is satisfiable iff the initial state of A\u2217 is also a final one.",
                    "sid": 404,
                    "ssid": 260,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022",
                    "sid": 405,
                    "ssid": 261,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "a regular expression language for fsras",
            "number": "4",
            "sents": [
                {
                    "text": "Regular expressions are a formal way for defining regular languages.",
                    "sid": 406,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Regular language operations construct regular expressions in a convenient way.",
                    "sid": 407,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Several toolboxes (software packages) provide extended regular expression description languages and compil 68 Figure 10 FSRA for a given CNF formula.",
                    "sid": 408,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ers of the expressions to finite-state devices, automata, and transducers (see Section 1).",
                    "sid": 409,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We provide a regular expression language for constructing FSRAs, the denotations of whose expressions are FSRAs.",
                    "sid": 410,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the following discussion we assume the regular expression syntax of XFST (Beesley and Karttunen 2003) for basic expressions.7 Definition Let Actions\u0393 = {R, W}\u00d7 {0, 1, 2, ...",
                    "sid": 411,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", n \u2212 1}\u00d7 \u0393, where n is the number of registers and \u0393 is the register alphabet.",
                    "sid": 412,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If R is a regular expression and a \u2208 (Actions\u0393 + is a series of register operations, then the following are also regular expressions: a 1 R, a 1 1R, a <1 R, and a <1<1 R. We now define the denotation of each of the above expressions.",
                    "sid": 413,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let R be a regular expression whose denotation is the FSRA A, and let a \u2208 (Actions\u0393 + . The denotation of a <1 R is an FSRA A\u2217 obtained from A by adding a new node, q, which becomes the initial node of A\u2217, and an arc from q to the initial node of A; this arc is labeled by E and associated with a. Notice that in the regular expression a <1 R, R and a can contain operations on joint registers.",
                    "sid": 414,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In some cases, one would like to distinguish between the registers used in a and in R. Usually, it is up to the user to correctly manipulate the usage of registers, but in some cases automatic distinction seems desirable.",
                    "sid": 415,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, if R includes a circumfix operator (see below), its corresponding FSRA will contain register operations created automatically by the operator.",
                    "sid": 416,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Instead of remembering that circumfixation always uses register 1, one can simply distinguish between the registers of a and R via the a <1<1 R operator.",
                    "sid": 417,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This operator has the same general effect as the previous one, but the transition relation in its FSRA uses fresh registers that are added to the machine.",
                    "sid": 418,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In a similar way, the operators a 1 R and a 1 1R are translated into networks.",
                    "sid": 419,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The difference between these operators and the previous ones is that here, the register operations in a are executed after traversing all the arcs in the FSRA denoted by R. Using these additional operators, it is easy to show that every FSRA has a corresponding regular expression denoting it, by a trivial modification of the construction presented by Kleene (1956).",
                    "sid": 420,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Example 8 Consider the case of vowel harmony in Warlpiri (Sproat 1992), where the vowel of suffixes agrees in certain aspects with the vowel of the stem to which it is attached.",
                    "sid": 421,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "7 In particular, concatenation is denoted by juxtaposition and E is denoted by 0..",
                    "sid": 422,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "69 A simplified account of the phenomenon is that suffixes come in two varieties, one with \u2018i\u2019 vowels and one with \u2018u\u2019 vowels.",
                    "sid": 423,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Stems whose last vowel is \u2018i\u2019 take suffixes of the first variety, whereas stems whose last vowel is \u2018u\u2019 or \u2018a\u2019 take the other variety.",
                    "sid": 424,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The following examples are from Sproat (1992) (citing Nash (1980)): 1.",
                    "sid": 425,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "maliki+ki.li+.li+lki+ji+li (dog+PROP+ERG+then+me+they) 2.",
                    "sid": 426,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "kud.",
                    "sid": 427,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "u+ku.lu+.lu+lku+ju+lu (child+PROP+ERG+then+me+they) 3.",
                    "sid": 428,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "minija+ku.lu+.lu+lku+ju+lu (cat+PROP+ERG+then+me+they) An FSRA that accepts the above three words is denoted by the following complex regular expression: define LexI [m a l i k i]; % words ending in \u2018i\u2019 define LexU [k u d u]; % words ending in \u2018u\u2019 define LexA [m i n i j a]; % words ending in \u2018a\u2019 ! Join all the lexicons and write to register 1 \u2018u\u2019 or \u2018i\u2019 ! according to the stem\u2018s last vowel.",
                    "sid": 429,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "define Stem [<(W,1,i)> <1 LexI] | [<(W,1,u)> <1 [LexU | LexA]]; ! Traverse the arc only if the scanned symbol is the content of ! register 1.",
                    "sid": 430,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "define V [<(R,1,i)> 1 i] | [<(R,1,u)> 1 u]; define PROP [+ k V l V]; % PROP suffix define ERG [+ l V]; % ERG suffix define Then [+ l k V]; % suffix indicating \u2018then\u2019 define Me [+ j V]; % suffix indicating \u2018me\u2019 define They [+ l V]; % suffix indicating \u2018they\u2019 ! define the whole network define WarlpiriExample Stem PROP ERG Then Me They; Register 1 stores the last vowel of the stem, eliminating the need to duplicate paths for each of the different cases.",
                    "sid": 431,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The lexicon is divided into three separate lexicons (LexI, LexU, LexA), one for each word ending (\u2018i\u2019, \u2018u\u2019, or \u2018a\u2019 respectively).",
                    "sid": 432,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The separate lexicons are joined into one (the variable Stem) and when reading the last letter of the base word, its type is written into register 1.",
                    "sid": 433,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then, when suffixing the lexicon base words, the variable V uses the the content of register 1 to determine which of the symbols \u2018i\u2019, \u2018u\u2019 should be scanned and allows traversing the arc only if the correct symbol is scanned.",
                    "sid": 434,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that this solution is applicable independently of the size of the lexicon, and can handle other suffixes in the same way.",
                    "sid": 435,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Example 9 Consider again Example 7.",
                    "sid": 436,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The FSRA constructed for Arabic nominative definite and indefinite nouns can be denoted by the following regular expression: ! Read the definite article (if present).",
                    "sid": 437,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Store in register 1 whether the noun is definite or indefinite.",
                    "sid": 438,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Store in register 2 the actual form of the definite article.",
                    "sid": 439,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "70 define Prefix [<(W,1,indef)> <1 0] | [<(W,1,def),(W,2,l)> <1 \u2019al] | [<(W,1,def),(W,2,$)> <1 \u2019a$] | [<(W,1,def),(W,2,d)> <1 \u2019ad]; ! Normal base - definite and indefinite define Base [ [<(R,2,l)> <1 0] | [<(R,1,indef)> <1 0] ] [ [k i t a a b] | [q a m a r] ]; ! Bases beginning with $ - definite and indefinite define $Base [ [<(R,2,$)> <1 0] | [<(R,1,indef)> <1 0] ] [$ a m s]; ! Bases beginning with d - definite and indefinite define dBase [ [<(R,2,d)> <1 0] | [<(R,1,indef)> <1 0] ] [d a f t a r]; ! Read definite and indefinite suffixes.",
                    "sid": 440,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "define Suffix [<(R,1,def)> 1 u] | [<(R,1,indef)> 1 un]; ! The complete network.",
                    "sid": 441,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "define ArabicExample Prefix [Base | $Base | dBase] Suffix; The variable Prefix denotes the arcs connecting the first two states of the FSRA, in which the definite article (if present) is scanned and information indicating whether the word is definite or not is saved into register 1.",
                    "sid": 442,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, if the word is definite then register 2 stores the actual form of the definite article.",
                    "sid": 443,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The lexicon is divided into several parts: The Base variable denotes nouns that do not trigger assimilation.",
                    "sid": 444,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Other variables ($Base, dBase) denote nouns that trigger assimilation, where for each assimilation case, a different lexicon is constructed.",
                    "sid": 445,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each part of the lexicon deals with both its definite and indefinite nouns by allowing traversing the arcs only if the register content is appropriate.",
                    "sid": 446,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The variable Suffix denotes the correct suffix, depending on whether the noun is definite or indefinite.",
                    "sid": 447,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is possible using the information that was stored in register 1 by the variable Prefix.",
                    "sid": 448,
                    "ssid": 43,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "linguistic applications. ",
            "number": "5",
            "sents": [
                {
                    "text": "We demonstrated in examples 5 and 6 that FSRAs can model some non-concatenative phenomena more efficiently than standard finite-state devices.",
                    "sid": 449,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We now introduce new regular expression operators, accounting for our motivating linguistic phenomena, and show how expressions using these operators are compiled into the appropriate FSRA.",
                    "sid": 450,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5.1 Circumfixes.",
                    "sid": 451,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We introduce a dedicated regular expression operator for circumfixation and show how expressions using this operator are compiled into the appropriate FSRA.",
                    "sid": 452,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The operator accepts a regular expression, denoting a set of bases, and a set of circumfixes, each of which is a pair of regular expressions (prefix, suffix).",
                    "sid": 453,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It yields as a result an FSRA obtained by applying each circumfix to each of the bases.",
                    "sid": 454,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The main purpose of this operator is to deal with cases in which the circumfixes are pairs of strings, but it is defined such that the circumfixes can be arbitrary regular expressions.",
                    "sid": 455,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Definition Let \u03a3 be a finite set such that D, {, }, (, \u2295, \u2297 \u2208/ \u03a3.",
                    "sid": 456,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We define the \u2297 operation to be of the form R \u2297 {(\u03b21 D\u03b31 \u2295(\u03b22 D\u03b32 \u2295 ...",
                    "sid": 457,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(\u03b2m D\u03b3m \u2295} 71 where: m \u2208 N is the number of circumfixes; R is a regular expression over \u03a3 denoting the set of bases; and \u03b2i , \u03b3i for 1 \u2264 i \u2264 m are regular expressions over \u03a3 denoting the prefix and suffix of the i-th circumfix, respectively.",
                    "sid": 458,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that R, \u03b2i , \u03b3i may denote infinite sets.",
                    "sid": 459,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To define the denotation of this operator, let A\u03b2 , A\u03b3 be the FSRAs denoted by \u03b2i , \u03b3i , respectively.",
                    "sid": 460,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The operator yields an i i FSRA constructed by concatenating three FSRAs.",
                    "sid": 461,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first is the FSRA constructed from the union of the FSRAs A\u2217\u03b2 , ...",
                    "sid": 462,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", A\u2217\u03b2 , where each A\u2217\u03b2 is an FSRA obtained from A\u03b2 1 m i i by adding a new node, q, which becomes the initial node of A\u2217\u03b2 , and an arc from q to the initial node of A\u03b2 ; this arc is labeled by E and associated with ((W, 1, \u03b2i D\u03b3i )\u2295 (register 1 is used to store the circumfix).",
                    "sid": 463,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, the register operations of the FSRA A\u03b2 are shifted by one register in order not to cause undesired effects by the use of register 1.",
                    "sid": 464,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The second FSRA is the FSRA denoted by the regular expression R (again, with one register shift) and the third is constructed in the same way as the first one, the only difference being that the FSRAs are those denoted by \u03b31 , ...",
                    "sid": 465,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", \u03b3m and the associated register operation is ((R, 1, \u03b2i D\u03b3i )\u2295.",
                    "sid": 466,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that the concatenation operation, defined in Section 3.2.2, adjusts the register operations in the FSRAs to be concatenated, to avoid undesired effects caused by using joint registers.",
                    "sid": 467,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use this operation to concatenate the three FSRAs, leaving register 1 unaffected (to handle the circumfix).",
                    "sid": 468,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Example 10 Consider the participle-forming combinations in German, e.g., the circumfix get.",
                    "sid": 469,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A simplified account of the phenomenon is that German verbs in their present form take an n suffix but in participle form they take the circumfix get.",
                    "sid": 470,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The following examples are from Sproat (1992): sa\u00a8useln \u2018rustle\u2019 gesa\u00a8uselt \u2018rustled\u2019 bru\u00a8 sten \u2018brag\u2019 gebru\u00a8 stet \u2018bragged\u2019 The FSRA of Figure 11, which accepts the four forms, is denoted by the regular expression [s a\u00a8 usel | br u\u00a8 st e] \u2297 {(EDn\u2295(g eDt\u2295} This regular expression can be easily extended to accept more German verbs in other forms.",
                    "sid": 471,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "More circumfixation phenomena in other languages such as Indonesian and Arabic can be modeled in the same way using this operator.",
                    "sid": 472,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 11 Participle-forming combinations in German.",
                    "sid": 473,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "72 Example 11 Consider again Example 5.",
                    "sid": 474,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The FSRA accepting all the possible combinations of stems and the Hebrew circumfixes ha, htut, mE can be denoted by the regular expression R \u2297 {(hDa\u2295(htDut\u2295(mDE\u2295} where R denotes an FSA accepting the roots.",
                    "sid": 475,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5.2 Interdigitation.",
                    "sid": 476,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Next, we define a dedicated operator for interdigitation.",
                    "sid": 477,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It accepts a set of regular expressions, representing a set of roots, and a list of patterns, each of which containing exactly n slots.",
                    "sid": 478,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It yields as a result an FSRA denoting the set containing all the strings created by splicing the roots into the slots in the patterns.",
                    "sid": 479,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, consider the Hebrew roots r.$.m, p.&.l, p.q.d and the Hebrew patterns hitDaDeD, miDDaD, haDDaDa.",
                    "sid": 480,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The roots are all trilateral, and the patterns have three slots each.",
                    "sid": 481,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given these two inputs, the new operator yields an FSRA denoting the set {hitra$em, hitpa&el, hitpaqed, mir$am, mip&al, mipqad, har$ama, hap&ala, hapqada }.",
                    "sid": 482,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Definition Let \u03a3 be a finite set such that D, {, }, (, \u2295, \u2295 \u2208/ \u03a3.",
                    "sid": 483,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We define the splice operation to be of the form {(\u03b111 , \u03b112 , ..., \u03b11n \u2295, (\u03b121 , \u03b122 , ..., \u03b12n \u2295, ..., (\u03b1m1 , \u03b1m2 , ..., \u03b1mn \u2295} \u2295 {(\u03b211 D\u03b212 D...\u03b21n D\u03b21 n+1 \u2295, (\u03b221 D\u03b222 D...\u03b22n D\u03b22 n+1 \u2295, ..., (\u03b2k1 D\u03b2k2 D...\u03b2kn D\u03b2k n+1 \u2295} where: \u2022 n \u2208 N is the number of slots (represented by \u2018D\u2019) in the patterns into which the roots letters should be inserted.",
                    "sid": 484,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 m \u2208 N is the number of roots to be inserted.",
                    "sid": 485,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 k \u2208 N is the number of patterns.",
                    "sid": 486,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 \u03b1ij, \u03b2ij are regular expressions (including regular expressions denoting FSRAs).",
                    "sid": 487,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The left set is a set of roots to be inserted into the slots in the right set of patterns.",
                    "sid": 488,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the sake of brevity, \u03b2i and \u03b1i are used as shorthand notations for \u03b2i1 D\u03b2i2 D...D\u03b2i(n+1) and \u03b1i1 \u03b1i2 ...\u03b1in , respectively.",
                    "sid": 489,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Consider first the case where \u03b1ij \u2208 \u03a3 \u222a {E} for 1 \u2264 i \u2264 m and 1 \u2264 j \u2264 n and \u03b2ij \u2208 \u03a3 \u222a {E} for 1 \u2264 i \u2264 k and 1 \u2264 j \u2264 n + 1.",
                    "sid": 490,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this case the splice operation yields as a result an FSRA1 A = (Q, q0 , \u03a3, \u0393, 3, \u03b4, F\u2295, such that L(A) = {\u03b2j1 \u03b1i1 \u03b2j2 \u03b1i2 ...\u03b2jn \u03b1in \u03b2j(n+1) | 1 \u2264 i \u2264 m , 1 \u2264 j \u2264 k}, where: \u2022 Q = {q0 , q1 , ..., q2n+1 } \u2022 F = {q2n+1 } \u2022 \u03a3 = ({\u03b1ij| 1 \u2264 i \u2264 m , 1 \u2264 j \u2264 n} \u222a {\u03b2ij | 1 \u2264 i \u2264 k , 1 \u2264 j \u2264 n + 1} \\ {E} 73 Figure 12 Interdigitation FSRA \u2013 general.",
                    "sid": 491,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 \u0393 = {\u03b2i | 1 \u2264 i \u2264 k} \u222a {\u03b1i| 1 \u2264 i \u2264 m} \u222a {#}.",
                    "sid": 492,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 \u03b4 = {(q0 , \u03b2i1 , W, 1, \u03b2i , q1 )| 1 \u2264 i \u2264 k} \u222a {(q1 , \u03b1i1 , W, 2, \u03b1i , q2 )| 1 \u2264 i \u2264 m} \u222a {(q2j\u22122 , \u03b2ij , R, 1, \u03b2i , q2j\u22121 )| 1 \u2264 i \u2264 k , 2 \u2264 j \u2264 n + 1} \u222a {(q2j\u22121 , \u03b1ij , R, 2, \u03b1i , q2j )| 1 \u2264 i \u2264 m , 2 \u2264 j \u2264 n} This FSRA is shown in Figure 12.",
                    "sid": 493,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It has 3 registers, where register 1 remembers the pattern and register 2 remembers the root.",
                    "sid": 494,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that the FSRA will have 3 registers and 2n + 2 states for any number of roots and patterns.",
                    "sid": 495,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The number of arcs is k \u00d7 (n + 1) + m \u00d7 n. In the (default) case of trilateral roots, for m roots and k patterns the resulting machine has a constant number of states and O(k + m) arcs.",
                    "sid": 496,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the general case, where \u03b1ij and \u03b2ij can be arbitrary regular expressions, the construction of the FSRA denoted by this operation is done in the same way as in the case of circumfixes with two main adjustments.",
                    "sid": 497,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first is that in this case the final FSRA is constructed by concatenating 2n + 1 intermediate FSRAs (n FSRAs for the n parts of the roots and n + 1 FSRAs for the n + 1 parts of the patterns).",
                    "sid": 498,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The second is that here, 2 registers are used to remember both the root and the pattern.",
                    "sid": 499,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We suppress the detailed description of the construction.",
                    "sid": 500,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Example 12 Consider again the Hebrew roots r.$.m, p.&.l, p.q.d and the Hebrew patterns hitDaDeD, miDDaD, and haDDaDa.",
                    "sid": 501,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The splice operation {(r, $, m\u2295(p, &, l\u2295(p, q, d\u2295} \u2295 {(hitDaDeD\u2295(miDDaD\u2295(haDDaDa\u2295} 74 yields the FSRA of Figure 13.",
                    "sid": 502,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The E-arc was added only for the convenience of the drawing.",
                    "sid": 503,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It should be noted that like other processes of derivational morphology, Hebrew word formation is highly idiosyncratic: Not all roots combine with all patterns, and there is no systematic way to determine when such combinations will be realized in the language.",
                    "sid": 504,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Yet, this does not render our proposed operators useless: One can naturally characterize classes of roots and classes of patterns for which all the combinations exist.",
                    "sid": 505,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, even when such a characterization is difficult to come by, the splice operator can be used, in combination with other extended regular expression operators, to define complex expressions for generating the required language.",
                    "sid": 506,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is compatible with the general approach for using finite-state techniques, implementing each phenomenon independently and combining them together using closure properties.",
                    "sid": 507,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5.3 Reduplication.",
                    "sid": 508,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We now return to the reduplication problem as was presented in example 3.",
                    "sid": 509,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We extend the finite-state registered model to efficiently accept Ln = {ww | w \u2208 \u03a3\u2217, |w| = n}, a finite instance of the general problem, which is arguably sufficient for describing reduplication in natural languages.",
                    "sid": 510,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Using FSRAs as defined above does not improve space efficiency, because a separate path for each reduplication is still needed.",
                    "sid": 511,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that the different symbols in Ln have no significance except the pattern they create.",
                    "sid": 512,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, FSRAs are extended in order to be able to identify a pattern without actually distinguishing between different symbols in it.",
                    "sid": 513,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The extended model, FSRA*, is obtained from the FSRA1 model by adding a new symbol, \u2018*\u2019, assumed not to belong to \u03a3, and by forcing \u0393 to be equal to \u03a3.",
                    "sid": 514,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The \u2018*\u2019 indicates equality between the input symbol and the designated register content, eliminating the need to duplicate paths for different symbols.",
                    "sid": 515,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 13 Interdigitation example.",
                    "sid": 516,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "75 Definition Let \u2217 \u2208/ \u03a3.",
                    "sid": 517,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An FSRA* is an FSRA1 where \u03a3 = \u0393 (and thus includes \u2019#\u2019) and the transition function is extended to be \u03b4 \u2286 Q \u00d7 \u03a3 \u222a {E, \u2217} \u00d7 {R, W}\u00d7 {0, 1, 2, ...",
                    "sid": 518,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", n \u2212 1}\u00d7 \u03a3 \u222a {\u2217} \u00d7 Q. The extended meaning of \u03b4 is as follows: \u2022 (s, \u03c3, R, i, \u03b3, t) \u2208 \u03b4, (s, \u03c3, W, i, \u03b3, t) \u2208 \u03b4 where \u03c3, \u03b3 \u2022= \u2217 imply the same as before.",
                    "sid": 519,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 (s, \u03c3, R, i, \u2217, t) \u2208 \u03b4 and (s, \u2217, R, i, \u03c3, t) \u2208 \u03b4 for \u03c3 \u2022= E imply that if the automaton is in state s, the input symbol is \u03c3 and the content of the i-th register is the same \u03c3, then the automaton may enter state t. \u2022 (s, \u03c3, W, i, \u2217, t) \u2208 \u03b4 and (s, \u2217, W, i, \u03c3, t) \u2208 \u03b4 for \u03c3 \u2022= E imply that if the automaton is in state s and the input symbol is \u03c3, then the content of the i-th register is changed to \u03c3, and the automaton may enter state t. \u2022 (s, \u2217, R, i, \u2217, t) \u2208 \u03b4 implies that if the automaton is in state s, the input symbol is some \u03c3 \u2208 \u03a3 and the content of the i-th register is the same \u03c3, then the automaton may enter state t. \u2022 (s, \u2217, W, i, \u2217, t) \u2208 \u03b4 implies that if the automaton is in state s and the input symbol is some \u03c3 \u2208 \u03a3, then the content of the i-th register is changed to the same \u03c3, and the automaton may enter state t. With this extended model we can construct an efficient registered automaton for Ln : The number of registers is n+1.",
                    "sid": 520,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Registers 1, ..., n remember the first n symbols to be duplicated.",
                    "sid": 521,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 14 depicts an extended registered automaton that accepts Ln for n = 4.",
                    "sid": 522,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that the number of states depends only on n and not on the size of \u03a3.",
                    "sid": 523,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 15.",
                    "sid": 524,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "schematically depicts an extended registered automaton that accepts Ln for some n \u2208 N. The language {ww | |w|\u2264 n} for some n \u2208 N can be generated by a union of FSRA*, each one generating Ln for some i \u2264 n. Since n is usually small in natural language reduplication, the resulting automaton is manageable, and in any case, considerably smaller than the na\u00a8\u0131ve automaton.",
                    "sid": 525,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5.4 Assimilation.",
                    "sid": 526,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In example 7, FSRAs are used to model assimilation in Arabic nominative definite nouns.",
                    "sid": 527,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Using the FSRA* model defined above, further reduction in the network size can be achieved.",
                    "sid": 528,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The FSRA* of Figure 16 accepts all the nominative definite forms of the Arabic nouns kitaab, qamar, and daftar (more nouns can be added in a similar way).",
                    "sid": 529,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Register 1 stores information about the actual form of the definite article, to ensure that assimilation occurs when needed and only then.",
                    "sid": 530,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that in this FSRA, in contrast to Figure 14 Reduplication for n = 4.",
                    "sid": 531,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "76 Figure 15 Reduplication \u2013 general case.",
                    "sid": 532,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "the FSRA of Figure 8, the definite Arabic article al is not scanned as one symbol but as two separate symbols.",
                    "sid": 533,
                    "ssid": 85,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "finite-state registered transducers. ",
            "number": "6",
            "sents": [
                {
                    "text": "We extend the FSRA model to finite-state registered transducers (FSRT), denoting relations over two finite alphabets.",
                    "sid": 534,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The extension is done by adding to each transition an output symbol.",
                    "sid": 535,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This facilitates an elegant solution to the problem of binary incrementors which was introduced in Example 4.",
                    "sid": 536,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Example 13 Consider again the 32-bit incrementor example introduced in Example 4.",
                    "sid": 537,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recall that a sequential transducer for an n-bit binary incrementor would require 2n states and a similar number of transitions.",
                    "sid": 538,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Using the FSRT model, a more efficient n-bit transducer can be constructed.",
                    "sid": 539,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A 4-bit FSRT incrementor is shown in Figure 17.",
                    "sid": 540,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first four transitions copy the input string into the registers, then the input is scanned (using the registers) from right to left (as the carry moves), calculating the result, and the last four transitions output the result (in case the input is 1n , an extra 1 is added in the beginning).",
                    "sid": 541,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notice that this transducer guarantees linear recognition time, since from each state only one arc can be traversed in each step, even when there are E-arcs.",
                    "sid": 542,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the same way, an n-bit transducer can be constructed for all n \u2208 N. Such a transducer will have n registers, 3n + 1 states and 6n arcs.",
                    "sid": 543,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The FSRT model solves the incrementor problem in much the same way it is solved by vectorized finite-state Figure 16 FSRA* for Arabic nominative definite nouns.",
                    "sid": 544,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "77 Figure 17 4-bit incrementor using FSRT.",
                    "sid": 545,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "automata, but the FSRT solution is more intuitive and is based on existing finite-state techniques.",
                    "sid": 546,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is easy to show that FSRTs, just like FSRAs, are equivalent to their non-registered counterparts.",
                    "sid": 547,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It immediately implies that FSRTs maintain the closure properties of regular relations.",
                    "sid": 548,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As in FSRAs, implementing the closure properties directly on FSRTs is essential for benefiting from their space efficiency.",
                    "sid": 549,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The common operators such as union, concatenation, etc., are implemented in the same ways as in FSRAs.",
                    "sid": 550,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A direct implementation of FSRT composition is a na\u00a8\u0131ve extension of ordinary transducer composition, based on the intersection construction of FSRAs.",
                    "sid": 551,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We explicitly define these operations in CohenSygal (2004).",
                    "sid": 552,
                    "ssid": 19,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "implementation and evaluation. ",
            "number": "7",
            "sents": [
                {
                    "text": "In order to practically compare the space and time performance of FSRAs and FSAs, we have implemented the special operators introduced in Sections 4 and 5 for circumfixation and interdigitation, as well as direct construction of FSRAs.",
                    "sid": 553,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have compared FSRAs with ordinary FSAs by building corresponding networks for circumfixation, interdigitation, and n-bit incrementation.",
                    "sid": 554,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For circumfixation, we constructed networks for the circumfixation of 1,043 Hebrew roots and 4 circumfixes.",
                    "sid": 555,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For interdigitation we constructed a network accepting the splicing of 1,043 roots into 20 patterns.",
                    "sid": 556,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For n-bit incrementation we constructed networks for 10-bit, 50-bit, and 100-bit incrementors.",
                    "sid": 557,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 1 displays the size of each of the networks in terms of states, arcs, and actual file size.",
                    "sid": 558,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "78 Table 1 Space comparison between FSAs and FSRAs.",
                    "sid": 559,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Operation Network type States Arcs Registers File size Circ umf ixat ion FS A 8 1 1 3 , 8 2 4 \u2013 4 7 k B (4 circ umf ixes , 1,04 3 root s) FS RA 3 5 6 3 6 0 1 1 6 k B Inte rdig itati on FS A 12 ,5 27 31 ,0 77 \u2013 4 5 1 k B (20 patt erns , 1,04 3 root s) FS RA 5 8 3 , 2 5 9 2 6 7 k B10 bit incr eme ntor Se qu ent ial FS T 2 6 8 3 2 2 \u2013 7 k B FS RT 3 1 6 0 1 0 2 k B50 bit incr eme ntor Se qu ent ial FS T 23 ,3 28 24 ,6 02 \u2013 6 0 0 k B FS RT 1 5 1 3 0 0 5 0 8 k B 100-bit incrementor Sequential FST 176,653 181,702 \u2013 4.73Mb FS RT 3 0 1 6 0 0 1 0 0 1 7 k B Table 2 Time comparison between FSAs and FSRAs.",
                    "sid": 560,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "20 0 wo rds 1,0 00 wo rds 5,0 00 wo rds Circ umf ixat ion FS A 0 . 0 1 s 0 . 0 2 s 0 . 0 8 s (4 circ umf ixes , 1,04 3 root s) FS RA 0 . 0 1 s 0 . 0 2 s 0 . 0 9 s Inte rdig itati on FS A 0 . 0 1 s 0 . 0 2 s 1 s (20 patt erns , 1,04 3 root s) FS RA 0 . 3 5 s 1 . 4 2 s 1 0 . 1 1 s10 bit incr eme ntor Se qu ent ial FS T 0 . 0 1 s 0 . 0 5 s 0 . 1 7 s FS RT 0 . 0 1 s 0 . 0 6 s 0 . 2 3 s50 bit incr eme ntor Se qu ent ial FS T 0 . 1 3 s 0 . 2 s 0 . 5 9 s FS RT 0 . 0 8 s 0 . 4 s 1 . 6 s Clearly, FSRAs provide a significant reduction in the network size.",
                    "sid": 561,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, we could not construct an n-bit incrementor FSA for any n greater than 100 as a result of memory problems, whereas using FSRAs we had no problem constructing networks even for n = 50, 000.",
                    "sid": 562,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, we compared the recognition times of the two models.",
                    "sid": 563,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For that purpose, we used the circumfixation, interdigitation, 10-bit incrementation, and 50-bit incrementation networks to analyze 200, 1,000, and 5,000 words.",
                    "sid": 564,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As can be seen in Table 2, time performance is comparable for the two models, except for interdigitation, where FSAs outperform FSRAs by a constant factor.",
                    "sid": 565,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The reason is that in this network the usage of registers is massive and thereby, there is a higher cost to the reduction of the network size, in terms of analysis time.",
                    "sid": 566,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is an instance of the common tradeoff of time versus space: FSRAs improve the network size at the cost of slower analysis time in some cases.",
                    "sid": 567,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When using finite-state devices for natural language processing, often the generated networks become too large to be practical.",
                    "sid": 568,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In such cases, using FSRAs can make network size manageable.",
                    "sid": 569,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Using the closure constructions one can build desired networks of reasonable size, and at the end decide whether to convert them to ordinary FSAs, if time performance is an issue.",
                    "sid": 570,
                    "ssid": 18,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "conclusions. ",
            "number": "8",
            "sents": [
                {
                    "text": "In this work we introduce finite-state registered networks (automata and transducers), an extension of finite-state networks which adds a limited amount of memory, in the 79 form of registers, to each transition.",
                    "sid": 571,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We show how FSRAs can be used to efficiently model several non-concatenative morphological phenomena, including circumfixation, root and pattern word formation in Semitic languages, vowel harmony, and limited reduplication.",
                    "sid": 572,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The main advantage of finite-state registered networks is their space efficiency.",
                    "sid": 573,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We show that every FSA can be simulated by an equivalent FSRA with three states and two registers.",
                    "sid": 574,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the motivating linguistic examples, we show a significant decrease in the number of states and the number of transitions.",
                    "sid": 575,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, to account for all the possible combinations of r roots and p patterns, an ordinary FSA requires O(r \u00d7 p) arcs whereas an FSRA requires only O(r + p).",
                    "sid": 576,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a non-linguistic example, we show a transducer that computes n-bit increments of binary numbers.",
                    "sid": 577,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While an ordinary (sequential) FST requires O(2n ) states and arcs, an FSRT which guarantees linear recognition time requires only O(n) states and arcs.",
                    "sid": 578,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In spite of their efficiency, finite-state registered networks are equivalent, in terms of their expressive power, to ordinary finite state networks.",
                    "sid": 579,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We provide an algorithm for converting FSRAs to FSAs and prove the equivalence of the models.",
                    "sid": 580,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, we provide direct constructions of the main closure properties of FSAs for FSRAs, including concatenation, union, intersection, and composition.",
                    "sid": 581,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order for finite-state networks to be useful for linguistic processing, we provide a regular expression language denoting FSRAs.",
                    "sid": 582,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, we provide a set of extended regular expression operators that denote FSRAs and FSRTs.",
                    "sid": 583,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We demonstrate the utility of the operators by accounting for a variety of complex morphological and phonological phenomena, including circumfixation (Hebrew and German), root-and- pattern (Hebrew), vowel harmony (Warlpiri), assimilation (Arabic), and limited reduplication.",
                    "sid": 584,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These dedicated operators can be used in conjunction with standard finite state calculi, thereby providing a complete set of tools for the computational treatment of non-concatenative morphology.",
                    "sid": 585,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This work opens a variety of directions for future research.",
                    "sid": 586,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An immediate question is the conversion of FSAs to FSRAs.",
                    "sid": 587,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While it is always possible to convert a given FSA to an FSRA (simply add one register which is never used), we believe that it is possible to automatically convert space inefficient FSAs to more compact FSRAs.",
                    "sid": 588,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A prerequisite is a clear understanding of the parameters for minimization: These include the number of states, arcs, and registers, and the size of the register alphabet.",
                    "sid": 589,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For a given FSRA, the number of states can always be reduced to a constant (theorem 3) and registers can be done away with entirely (by converting the FSRA to an FSA, Section 3.1).",
                    "sid": 590,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In contrast, minimizing the number of arcs in an FSRA is NP-hard (Section 3.4).",
                    "sid": 591,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A useful conversion of FSAs to FSRAs must minimize some combination of these parameters, and while it may be intractable in general, it can be practical in many special cases.",
                    "sid": 592,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, the case of finite languages (acyclic FSAs) is both of practical importance and \u2014 we conjecture \u2014 can result in good compaction.",
                    "sid": 593,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "More work is also needed in order to establish more properties of FSRTs.",
                    "sid": 594,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, we did not address issues such as sequentiality or sequentiability for this model.",
                    "sid": 595,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Similarly, FSRA\u2217 can benefit from further research.",
                    "sid": 596,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All the closure constructions forFSRA\u2217s can be done in a similar way to FSRAs, with the exception of intersection.",
                    "sid": 597,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For in tersection, we believe that the use of predicates (van Noord and Gerdemann 2001b) can be beneficial.",
                    "sid": 598,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, the use of predicates can be beneficial for describing natural language reduplication where the reduplication is not as bounded as the example we deal with in this work.",
                    "sid": 599,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, the FSRA\u2217 model can be extended into transducers.",
                    "sid": 600,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, in Section 7 we discuss an implementation of FSRAs.",
                    "sid": 601,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Although we have used this system to construct networks for several phenomena, we are interested in 80 constructing a network for describing the complete morphology of a natural language containing many non-concatenative phenomena, e.g., Hebrew.",
                    "sid": 602,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A morphological analyzer for Hebrew, based on finite-state calculi, already exists (Yona and Wintner 2005), but is very space-inefficient and, therefore, hard to maintain.",
                    "sid": 603,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It would be beneficial to compact such a network using FSRTs, and to inspect the time versus space tradeoff on such a comprehensive network.",
                    "sid": 604,
                    "ssid": 34,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgments",
            "number": "",
            "sents": [
                {
                    "text": "We are grateful to Dale Gerdemann for his help and inspiration.",
                    "sid": 605,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We thank Victor Harnik and Nissim Francez for their comments on an earlier version of this paper.",
                    "sid": 606,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We are also thankful to the anonymous reviewers, whose comments helped substantially to improve this article.",
                    "sid": 607,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This research was supported by The Israel Science Foundation (grant no. 136/01).",
                    "sid": 608,
                    "ssid": 38,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}