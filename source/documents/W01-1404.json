{
    "ID": "W01-1404",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Existing studies show that a weighted context-free transduction of reasonable quality can be effectively learned from examples.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This paper investigates the approximation of such transduction by means of weighted rational transduction.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The advantage is increased processing speed, which benefits real- time applications involving spoken language.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Several studies have investigated automatic or partly automatic learning of transductions for machine translation.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Some of these studies have concentrated on finite-state or extended finite-state machinery, such as (Vilar and others, 1999), others have chosen models closer to context-free grammars and context-free transduction, such as (Alshawi et al., 2000; Watanabe et al., 2000; Yamamoto and Matsumoto, 2000), and yet other studies cannot be comfortably assigned to either of these two frameworks, such as (Brown and others, 1990) and (Tillmann and Ney, 2000).",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper we will investigate both context- free and finite-state models.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The basis for our study is context-free transduction since that is a powerful model of translation, which can in many cases adequately describe the changes of word The second address is the current contact address; supported by the Royal Netherlands Academy of Arts and Sciences; current secondary affiliation is the German Research Center for Artificial Intelligence (DFKI).",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "order between two languages, and the selection of appropriate lexical items.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, for limited domains, automatic learning of weighted context-free transductions from examples seems to be reasonably successful.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, practical algorithms for computing the most likely context-free derivation have a cubic time complexity, in terms of the length of the input string, or in the case of a graph output by a speech recognizer, in terms of the number of nodes in the graph.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For certain lexicalized context-free models we even obtain higher time complexities when the size of the grammar is not to be considered as a parameter (Eisner and Satta, 1999).",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This may pose problems, especially for real-time speech systems.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, we have investigated approximation of weighted context-free transduction by means of weighted rational transduction.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The finite-state machinery for implementing the latter kind of transduction in general allows faster processing.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We can also more easily obtain robustness.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We hope the approximating model is able to preserve some of the accuracy of the context-free model.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the next section, we discuss preliminary definitions, adapted from existing literature, making no more than small changes in presentation.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Section 3 we explain how context-free transduction grammars can be represented by ordinary context-free grammars, plus a phase of postprocessing.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The approximation is discussed in Section 4.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As shown in Section 5, we may easily process input in a robust way, ensuring we always obtain output.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Section 6 discusses empirical results, and we end the paper with conclusions.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "preliminaries. ",
            "number": "2",
            "sents": [
                {
                    "text": "2.1 hierarchical alignment The input to our algorithm is a corpus consisting of pairs of sentences related by an hierarchical alignment (Alshawi et al., 2000).",
                    "sid": 22,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In what follows, the formalization of this concept has been slightly changed with respect to the above reference, to suit our purposes in the remainder of this article.",
                    "sid": 23,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The hierarchically aligned sentence pairs in the corpus are 5tuples satisfying the following.",
                    "sid": 24,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first two components, and , are strings, called the source string and the target string, respectively, the lengths of which are denoted by and . We let and denote the sets of string positions and respectively.",
                    "sid": 25,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Further, (resp.",
                    "sid": 26,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": ") is a mapping from positions in (resp.",
                    "sid": 27,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": ") to pairs of lists of positions from (resp.",
                    "sid": 28,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "), satisfying the following: if a position is mapped to a pair , then the positions in the list are in strictly increasing order; we let \u201c \u201d denote list- concatenation, and represents a list consisting of a single element . Each position in (resp.",
                    "sid": 29,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": ") should occur at most once in the image of (resp.",
                    "sid": 30,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This means that and assign dependency structures to the source and target strings.",
                    "sid": 31,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A further restriction on and requires some auxiliary definitions.",
                    "sid": 32,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let be either or . We define as the function that maps each position to the list of positions when . If is a string , and is a list of string positions in , then represents the string . If is a single position, then represents the symbol . We now say that is projective if maps each position to some interval of positions . We will assume that both.",
                    "sid": 33,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "and are projective.",
                    "sid": 34,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(Strictly speaking, our algorithm would still be applicable if they were not projective, but it would treat the hierarchical alignment as if the symbols in the source and target strings had been reordered to make and projective.)",
                    "sid": 35,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, a reasonable hierarchical alignment satisfies , where or when or , respectively, which means that all symbols in the string are indirectly linked to the \u2018dummy\u2019 position 0.",
                    "sid": 36,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Lastly, is the union of and a subset of that relates positions in the two strings.",
                    "sid": 37,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is such that imply and imply ; in other words, a position in one string is related to at most one position in the other.",
                    "sid": 38,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, for each there is a pair such that occurs in one of the two lists of and occurs in one of the two lists of ; this means that positions can only be related if their respective \u201cmother\u201d positions are related.",
                    "sid": 39,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that this paper does not discuss how hierarchical alignments can be obtained from unannotated corpora of bitexts.",
                    "sid": 40,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is the subject of existing studies, such as (Alshawi et al., 2000).",
                    "sid": 41,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.2 context-free transduction Context-free transduction was originally called syntax-directed transduction in (Lewis II and Stearns, 1968), but since in modern formal language theory and computational linguistics the term \u201csyntax\u201d has a much wider range of meanings than just \u201ccontext-free syntax\u201d, we will not use the original term here.",
                    "sid": 42,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A (context-free) transduction grammar is a 5tuple , where is a finite set of nonterminals, is the start symbol, and are the source and target alphabets, and is a finite set of productions of the form , where , and , such that each nonterminal in occurs exactly once in and each nonterminal in occurs ex actly once in .1 If we were to replace each RHS pair by only its first part , we would obtain a context-free grammar for the source language, and if we were to replace each RHS pair by its second part , we would obtain a context-free grammar for the target language.",
                    "sid": 43,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The combination of the two halves of such a RHS indicates how a parse for 1 Note that we ignore the case that a single nonterminal occurs twice or more in or ; if we were to include this case, some tedious complications of notation would result, without any theoretical gain such as an increase of generative power.",
                    "sid": 44,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We refer to (Lewis II and Stearns, 1968) for the general case.",
                    "sid": 45,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "the source language can be related to a parse for the target language, and this defines a transduction between the languages in an obvious way.",
                    "sid": 46,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An example of a transduction grammar is: SubjIObj \u201clike\u201d ObjSubj ObjSubj SubjIObj \u201cpla\u02c6\u0131t\u201d SubjIObj \u201cI\u201d \u201cme\u201d ObjSubj \u201chim\u201d \u201cil\u201d This transduction defines that a sentence \u201cI like him\u201d can be translated by \u201cil me pla\u02c6\u0131t\u201d.",
                    "sid": 47,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We can reduce the generative power of context- free transduction grammars by a syntactic restriction that corresponds to the bilexical context-free grammars (Eisner and Satta, 1999).",
                    "sid": 48,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let us define a bilexical transduction grammar as a transduction grammar which is such that: there is a mapping from the set of nonterminals to . Due to this property, we may write each nonterminal as to indicate that it is mapped to the pair , where and , where is a so called delexicalized nonterminal.",
                    "sid": 49,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We may write as , where is a dummy symbol at the dummy string position . Further, each production is of one of the following five forms: 2.3 obtaining a context-free transduction from the corpus We extract a context-free transduction grammar from a corpus of hierarchical alignments, by locally translating each hierarchical alignment into a set of productions.",
                    "sid": 50,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The union of all these sets for the whole corpus is then the transduction grammar.",
                    "sid": 51,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Counting the number of times that identical productions are generated allows us to assign probabilities to the productions by maximum likelihood estimation.",
                    "sid": 52,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We will consider a method that uses only one delexicalized nonterminal . For a pair , we have a nonterminal or a nonterminal , depending on whether non- terminals are lexicalized by both source and target alphabets, or by just the source alphabet.",
                    "sid": 53,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let us call that nonterminal . Each pair of positions gives rise to one production.",
                    "sid": 54,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Suppose that and each position in this pair is related by to some position from , which we will call , respectively, and similarly, suppose that and each position in this pair is related by to some position from , which we will call . Then the production.",
                    "sid": 55,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "is given by For convenience, we also allow productions of the form: where and . In the experiments in Section 6, we also consider nonterminals that are lexicalized only by the source alphabet, which means that these nonterminals can be written as , where . The motivation is to restrict the grammar size and to increase the coverage.",
                    "sid": 56,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Bilexical transduction grammars are equivalent to the dependency transduction model from (Alshawi et al., 2000).",
                    "sid": 57,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that both halves of the RHS contain the same nonterminals but possibly in a different order.",
                    "sid": 58,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, if any position in or is not related to some other position by , then the production above contains, instead of a nonterminal, a substring on which that position is projected by or , respectively.",
                    "sid": 59,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "E.g. if there is no position such that , then instead of we have the string . In general, we cannot adapt the above algorithm to produce transduction grammars that are bilexical.",
                    "sid": 60,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, a production of the form: cannot be broken up into smaller, bilexical productions.2 However, the hierarchical alignments that we work with were produced by an algorithm that ensures that bilexical grammars suffice.",
                    "sid": 61,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Formally, this applies when the following cannot occur: there are and such that , and occur in , and occur in and , and or and . For example, if the non-bilexical production we would obtain is: then the bilexical transduction grammar that our algorithm produces contains:",
                    "sid": 62,
                    "ssid": 41,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "reordering as postprocessing. ",
            "number": "3",
            "sents": [
                {
                    "text": "In the following section we will discuss an algorithm that was devised for context-free grammars.",
                    "sid": 63,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To make it applicable to transduction, we propose a way to represent bilexical transduction grammars as ordinary context-free grammars.",
                    "sid": 64,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the new productions, symbols from the source and target alphabets occur side by side, but whereas source symbols are matched by the parser to the input, the target symbols are gathered into output strings.",
                    "sid": 65,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our case, the unique output string the parser eventually produces from an input string is obtained from the most likely derivation that matches that input string.",
                    "sid": 66,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2 That bilexical transduction grammars are less powerful than arbitrary context-free transduction grammars can be shown formally; cf.",
                    "sid": 67,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Section 3.2.3 of (Aho and Ullman, 1972).",
                    "sid": 68,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That the nonterminals in both halves of a RHS in the transduction grammar may occur in a different order is solved by introducing three special symbols, the reorder operators, which are interpreted after the parsing phase.",
                    "sid": 69,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These three operators will be written as \u201c \u201d, \u201c \u201d and \u201c \u201d.",
                    "sid": 70,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In a given string, there should be matching triples of these operators, in such a way that if there are two such triples, then they either occur in two isolated sub- strings, or one occurs nested between the \u201c \u201d and the \u201c \u201d or nested between the \u201c \u201d and the \u201c \u201d of the other triple.",
                    "sid": 71,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The interpretation of an occurrence of a triple, say in an output string , is that the two enclosed substrings should be reordered, so that we obtain . Both the reorder operators and the symbols of the target alphabet will here be marked by a horizontal line to distinguish them from the source alphabet.",
                    "sid": 72,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, the two productions from the transduction grammar are represented by the following two context-free productions: In the first production, the RHS nonterminals occur in the same order as in the left half of the original production, but reorder operators have been added to indicate that, after parsing, some sub- strings of the output string are to be reordered.",
                    "sid": 73,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our reorder operators are similar to the two operators and from (Vilar and others, 1999), but the former are more powerful, since the latter allow only single words to be moved instead of whole phrases.",
                    "sid": 74,
                    "ssid": 12,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "finite-state approximation. ",
            "number": "4",
            "sents": [
                {
                    "text": "There are several methods to approximate context-free grammars by regular languages (Nederhof, 2000).",
                    "sid": 75,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We will consider here only the so called RTN method, which is applied in a simplified form.3 3 As opposed to (Nederhof, 2000), we assume here that all nonterminals are mutually recursive, and the grammar contains self-embedding.",
                    "sid": 76,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have observed that typical grammars that we obtain in the context of this article indeed have the property that almost all nonterminals belong to the same mutually recursive set.",
                    "sid": 77,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A finite automaton is constructed as follows.",
                    "sid": 78,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each nonterminal from the grammar we introduce two states and . For each production we introduce states , and we add epsilon transitions from to and from to . The initial state of the automaton is and the only final state is , where is the start symbol of the grammar.",
                    "sid": 79,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If a symbol in the RHS of a production is a terminal, then we add a transition from to labelled by . If a symbol in the RHS is a nonterminal , then we add epsilon transitions from to and from to . The resulting automaton is determinized and minimized to allow fast processing of input.",
                    "sid": 80,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that if we apply the approximation to the type of context-free grammar discussed in Section 3, the transitions include symbols from both source and target alphabets, but we treat both uniformly as input symbols for the purpose of determinizing and minimizing.",
                    "sid": 81,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This means that the driver for the finite automaton still encounters nondeterminism while processing an input string, since a state may have several outgoing transitions for different output symbols.",
                    "sid": 82,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, we ignore any weights that might be attached to the context-free productions, since determinization is problematic for weighted automata in general and in particular for the type of automaton that we would obtain when carrying over the weights from the context-free grammar onto the approximating language following (Mohri and Nederhof, 2001).",
                    "sid": 83,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Instead, weights for the transitions of the finite automaton are obtained by training, using strings that are produced as a side effect of the computation of the grammar from the corpus.",
                    "sid": 84,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These strings contain the symbols from both the source and target strings mixed together, plus occurrences of the reorder operators where needed.",
                    "sid": 85,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A English/French example might be: I me like pla\u02c6\u0131t him il The way these strings were obtained ensures that they are included in the language generated by the context-free grammar, and they are therefore also accepted by the approximating automaton due to properties of the RTN approximation.",
                    "sid": 86,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The weights are the negative log of the probabilities obtained by maximum likelihood estimation.",
                    "sid": 87,
                    "ssid": 13,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "robustness. ",
            "number": "5",
            "sents": [
                {
                    "text": "The approximating finite automaton cannot ensure that the reorder operators \u201c \u201d, \u201c \u201d and \u201c \u201d occur in matching triples in output strings.",
                    "sid": 88,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There are two possible ways to deal with this problem.",
                    "sid": 89,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First, we could extend the driver of the finite automaton to only consider derivations in which the operators are matched.",
                    "sid": 90,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is however counter to our need for very efficient processing, since we are not aware of any practical algorithms for finding matching brackets in paths in a graph of which the complexity is less than cubic.",
                    "sid": 91,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, we have chosen a second approach, viz.",
                    "sid": 92,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "to make the postprocessing robust, by inserting missing occurrences of \u201c \u201d or \u201c \u201d and removing redundant occurrences of brackets.",
                    "sid": 93,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This means that any string containing symbols from the target alphabet and occurrences of the reorder operators is turned into a string without reorder operators, with a change of word order where necessary.",
                    "sid": 94,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Both the transduction grammar and, to a lesser extent, the approximating finite automaton suffer from not being able to handle all strings of symbols from the source alphabet.",
                    "sid": 95,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With finite-state processing however, it is rather easy to obtain robustness, by making the following three provisions: 1.",
                    "sid": 96,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To the nondeterministic finite automaton we.",
                    "sid": 97,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "add one epsilon transition from the initial state to , for each nonterminal . This means that from the initial state we may recognize an arbitrary phrase generated by some nonterminal from the grammar.",
                    "sid": 98,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.",
                    "sid": 99,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After the training phase of the weighted.",
                    "sid": 100,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(minimal deterministic) automaton, all transitions that have not been visited obtain a fixed high (but finite) weight.",
                    "sid": 101,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This means that such transitions are only applied if all others fail.",
                    "sid": 102,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.",
                    "sid": 103,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The driver of the automaton is changed so.",
                    "sid": 104,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "that it restarts at the initial state when it gets stuck at some input word, and when necessary, that input word is deleted.",
                    "sid": 105,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The out put string with the lowest weight obtained so far (preferably attached to final states, or to other states with outgoing transitions labelled by input symbols) is then concatenated with the output string resulting from processing subsequent input.",
                    "sid": 106,
                    "ssid": 19,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "experiments. ",
            "number": "6",
            "sents": [
                {
                    "text": "We have investigated a corpus of English/Japanese sentence pairs, related by hierarchical alignment (see also (Bangalore and Riccardi, 2001)).",
                    "sid": 107,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have taken the first 500, 1000, 1500, . . .",
                    "sid": 108,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "aligned sentence pairs from this corpus to act as training corpora of varying sizes; we have taken 300 other sentence pairs to act as test corpus.",
                    "sid": 109,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have constructed a bilexical transduction grammar from each training corpus, in the form of a context-free grammar, and this grammar was approximated by a finite automaton.",
                    "sid": 110,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The input sentences from the test corpus were then processed by context-free and finite-state machinery (in the sequel referred to by cfg and fa, respectively).",
                    "sid": 111,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have also carried out experiments with robust finite-state processing, as discussed in Section 5, which is referred to by robust fa.",
                    "sid": 112,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If we append 2 after a tag, this mean that , otherwise (see Section 2.3).",
                    "sid": 113,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The reorder operators from the resulting output strings were applied in a robust way as explained in Section 5.",
                    "sid": 114,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The output strings were then compared to the reference output from the corpus, resulting in Figure 1.",
                    "sid": 115,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our metric is word accuracy, which is based on edit distance.",
                    "sid": 116,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For a pair of strings, the edit distance is defined as the minimum number of substitutions, insertions and deletions needed to turn one string into the other.",
                    "sid": 117,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The word accuracy of a string with regard to a string is defined to be , where is the edit distance between and and is the length of . To allow a comparison with more established techniques (see e.g.",
                    "sid": 118,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(Bangalore and Riccardi, 2001)), we also take into consideration a simple tive target symbols and reorder operators following a source symbol in the training sentences are treated as a single symbol by the bigram model, and only those may be output after that source symbol.",
                    "sid": 119,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since our construction is such that target symbols always follow source symbols they are a translation of (according to the automatically obtained hierarchical alignment), this modification to the bigram model prevents output of totally unrelated target symbols that could otherwise result from a standard bigram model.",
                    "sid": 120,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It also ensures that a bounded number of output symbols per input symbol are produced.",
                    "sid": 121,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The fraction of sentences that were transduced (i.e. that were accepted by the grammar or the automaton), is indicated in Figure 2.",
                    "sid": 122,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since robust fa(2) and bigram are able to transduce all input, they are not represented here.",
                    "sid": 123,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that the average word accuracy is computed only with respect to the sentences that could be transduced, which explains the high accuracy for small training corpora in the cases of cfg(2) and fa(2), where the few sentences that can be transduced are mostly short and simple.",
                    "sid": 124,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 3 presents the time consumption of transduction for the entire test corpus.",
                    "sid": 125,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These data support our concerns about the high costs of context-free processing, even though our parser relies heavily on lexicalization.4 Figure 4 shows the sizes of the automata after determinization and minimization.",
                    "sid": 126,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Determinization for the largest automata indicated in the Figure took more than 24 hours for both fa(2) and robust fa(2) , which suggests these methods become unrealistic for training corpus sizes considerably larger than 10,000 bitexts.",
                    "sid": 127,
                    "ssid": 21,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "conclusions. ",
            "number": "7",
            "sents": [
                {
                    "text": "For our application, context-free transduction has a relatively high accuracy, but it also has a high time consumption, and it may be difficult to obtain robustness without further increasing the time costs.",
                    "sid": 128,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These are two major obstacles for use in spoken language systems.",
                    "sid": 129,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have tried to obtain a rational transduction that approximates a bigram model, trained on the strings comprising 4 It uses a trie to represent productions (similar to ELR.",
                    "sid": 130,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "both source and target sentences and reorder oper ators, as explained in Section 4.",
                    "sid": 131,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the purposes of predicting output symbols, a series of consecu parsing (Nederhof, 1994)), postponing generation of output for a production until all nonterminals and all input symbols from the right-hand side have been found.",
                    "sid": 132,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 0.9 0.8 0.7 c f g 2 c f g fa2 fa big ra m robust_fa2 robust_fa 0.6 0.5 0.4 0.3 0.2 0 1000 2000 3000 4000 5000 6000 7000 8000 training corpus size Figure 1: Average word accuracy for transduce d sentences . 1 0.8 fa fa2 cfg cfg2 0.6 0.4 0.2 0 0 1000 2000 3000 4000 5000 6000 7000 8000 training corpus size Figure 2: Fraction of the sentences that were transduced.",
                    "sid": 133,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "context-free transduction, preserving some of its accuracy.",
                    "sid": 134,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our experiments show that the automata we obtain become very large for training corpora of increasing sizes.",
                    "sid": 135,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This poses a problem for deter- minization.",
                    "sid": 136,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We conjecture that the main source of the excessive growth of the automata lies in noise in the bitexts and their hierarchical alignments.",
                    "sid": 137,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is a subject for further study whether we can reduce the impact of this noise, e.g. by clustering of source symbols, or by removing some infrequent, idiosyncratic rules from the obtained transduction grammar.",
                    "sid": 138,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Also, other methods of regular approximation of context-free grammars may be considered.",
                    "sid": 139,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In comparison to a simpler model, viz.",
                    "sid": 140,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "bi- grams, our approximating transductions do not have a very high accuracy, which is especially worrying since the off-line costs of computation are much higher than in the case of bigrams.",
                    "sid": 141,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The relatively low accuracy may be due to sparseness of data when attaching weights to transitions: the size of the minimal deterministic automaton grows much faster than the size of the training corpus it is constructed from, and the same training corpus is used to train the weights of the transitions of the automaton.",
                    "sid": 142,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thereby, many transitions do not obtain accurate weights, and unseen input sentences are not translated accurately.",
                    "sid": 143,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The problems described here may be avoided by leaving out the determinization of the automaton.",
                    "sid": 144,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This however leads to two new problems: training of the weights requires more sophisticated algorithms, and we may expect an increase in the time needed to transduce input sentences, since now both source and target symbols give 1.6e+06 1.4e+06 1.2e+06 1e+06 800000 600000 400000 cfg2 cfg robust_fa2 robust_fa f a 2 f a 4.5e+06 4e+06 3.5e+06 3e+06 2.5e+06 2e+06 1.5e+06 1e+06 robust_fa2 fa2 rob u s t _ f a f a 200000 500000 0 0 1000 2000 3000 4000 5000 6000 7000 8000 training corpus size 0 0 1000 2000 3000 4000 5000 6000 7000 8000 training corpus size Figure 3: Time consumption of transduction.",
                    "sid": 145,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "rise to nondeterminism.",
                    "sid": 146,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Whether these problems can be overcome requires further study.",
                    "sid": 147,
                    "ssid": 20,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgements",
            "number": "",
            "sents": [
                {
                    "text": "This work is a continuation of partly unpublished experiments by Srinivas Bangalore, which includes regular approximation of grammars obtained from hierarchical alignments.",
                    "sid": 148,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Many ideas in this paper originate from frequent discussions with Hiyan Alshawi, Srinivas Bangalore and Mehryar Mohri, for which I am very grateful.",
                    "sid": 149,
                    "ssid": 22,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}