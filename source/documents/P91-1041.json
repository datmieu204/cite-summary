{
    "ID": "P91-1041",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Graph unification is the most expensive part of unification-based grammar parsing.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It often takes over 90% of the total parsing time of a sentence.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We focus on two speedup elements in the design of unification algorithms: 1) elimination of excessive copying by only copying successful unifications, 2) Finding unification failures as soon as possible.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have developed a scheme to attain these two elements without expensive overhead through temporarily modifying graphs during unification to eliminate copying during unification.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We found that parsing relatively long sentences (requiring about 500 top-level unifications during a parse) using our algorithm is approximately twice as fast as parsing the same sentences using Wroblewski's algorithm.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "motivation",
            "number": "1",
            "sents": [
                {
                    "text": "Graph unification is the most expensive part of unification-based grammar parsing systems.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, in the three types of parsing systems currently used at ATR ], all of which use graph unification algorithms based on [Wroblewski, 1987], unification operations consume 85 to 90 percent of the total cpu time devoted to a parse.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2 The number of unification operations per sentence tends to grow as the grammar gets larger and more complicated.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An unavoidable paradox is that when the natural language system gets larger and the coverage of linguistic phenomena increases the writers of natural language grammars tend to rely more on deeper and more complex path equations (cycles and frequent reentrancy) to lessen the complexity of writing the grammar.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a result, we have seen that the number of unification operations increases rapidly as the coverage of the grammar grows in contrast to the parsing algorithm itself which does not seem to *Visiting Research Scientist.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Local email address: tomabech%al~-la.al~.co.jp@ uunet.UU.NET.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1The three parsing systems are based on: 1.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Earley's algorithm, 2.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "active chartparsing, 3.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "generalized LR parsing.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2In the large-scale HPSG-based spoken Japanese analysis system developed at ATR, sometimes 98 percent of the elapsed time is devoted to graph unification ([Kogure, 1990]).",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ATR Interpreting Telephony Research Laboratories* Seikacho,Sorakugun, Kyoto 61902 JAPAN grow so quickly.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, it makes sense to speed up the unification operations to improve the total speed performance of the natural language systems.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our original unification algorithm was based on [Wroblewskl, 1987] which was chosen in 1988 as the then fastest algorithm available for our application (HPSG based unification grammar, three types of parsers (Earley, TomitaLR, and active chart), unification with variables and cycles 3 combined with Kasper's ([Kasper, 1987]) scheme for handling disjunctions.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In designing the graph unification algorithm, we have made the following observation which influenced the basic design of the new algorithm described in this paper: Unification does not always succeed.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As we will see from the data presented in a later section, when our parsing system operates with a relatively small grammar, about 60 percent of the unifications attempted during a successful parse result in failure.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If a unification falls, any computation performed and memory consumed during the unification is wasted.",
                    "sid": 22,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As the grammar size increases, the number of unification failures for each successful parse increases 4.",
                    "sid": 23,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Without completely rewriting the grammar and the parser, it seems difficult to shift any significant amount of the computational burden to the parser in order to reduce the number of unification failures 5.",
                    "sid": 24,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Another problem that we would like to address in our design, which seems to be well documented in the existing literature is that: Copying is an expensive operation.",
                    "sid": 25,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The copying of a node is a heavy burden to the parsing system.",
                    "sid": 26,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "[Wroblewski, 1987] calls it a \"computational sink\".",
                    "sid": 27,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Copying is expensive in two ways: 1) it takes time; 2) it takes space.",
                    "sid": 28,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Copying takes time and space essentially because the area in the random access memory needs to be dynamically allocated which is an expensive operation.",
                    "sid": 29,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "[Godden, 1990] calculates the computation time cost of copying to be about 67 per- 3Please refer to [Kogure, 1989] for trivial time modification of Wroblewski's algorithm to handle cycles.",
                    "sid": 30,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4We estimate over 80% of unifications to be failures in our large-scale speech-to-speech translation system under development.",
                    "sid": 31,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5Of course, whether that will improve the overall performance is another question.",
                    "sid": 32,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "cent of the total parsing time in his TIME parsing system.",
                    "sid": 33,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This time/space burden of copying is nontrivial when we consider the fact that creation of unnecessary copies will eventually trigger garbage collections more often (in a Lisp environment) which will also slow down the overall performance of the parsing system.",
                    "sid": 34,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In general, parsing systems are always short of memory space (such as large LR tables of TomitaLR parsers and expan~ng tables and charts of Farley and active chart parsers\"), and the marginal addition or subtraction of the amount of memory space consumed by other parts of the system often has critical effects on the performance of these systems.",
                    "sid": 35,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Considering the aforementioned problems, we propose the following principles to be the desirable conditions for a fast graph unification algorithm: \u2022 Copying should be performed only for successful unifications.",
                    "sid": 36,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Unification failures should be found as soon as possible.",
                    "sid": 37,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By way of definition we would like to categorize excessive copying of dags into Over Copying and Early Copying.",
                    "sid": 38,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our definition of over copying is the same as Wroblewski's; however, our definition of early copying is slightly different.",
                    "sid": 39,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Over Copying: Two dags are created in order to create one new dag.",
                    "sid": 40,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "-This typically happens when copies of two input dags are created prior to a destructive unification operation to build one new dag.",
                    "sid": 41,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "([Godden, 1990] calls such a unification: Eager Unification.).",
                    "sid": 42,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When two arcs point to the same node, over copying is often unavoidable with incremental copying schemes.",
                    "sid": 43,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "\u2022 Early Copying: Copies are created prior to the failure of unification so that copies created since the beginning of the unification up to the point of failure are wasted.",
                    "sid": 44,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Wroblewski defines Early Copying as follows: \"The argument dags are copied before unification started.",
                    "sid": 45,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the unification falls then some of the copying is wasted effort\" and restricts early copying to cases that only apply to copies that are created prior to a unification.",
                    "sid": 46,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Restricting early copying to copies that are made prior to a unification leaves a number of wasted copies that are created during a unification up to the point of failure to be uncovered by either of the above definitions for excessive copying.",
                    "sid": 47,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We would like Early Copying to mean all copies that are wasted due to a unification failure whether these copies are created before or during the actual unification operations.",
                    "sid": 48,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Incremental copying has been accepted as an effective method of minimizing over copying and eliminat6For example, our phoneme-based generalized LR parser for speech input is always running on a swapping space be- causethe LR table is too big.",
                    "sid": 49,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ing early copying as defined by Wroblewski.",
                    "sid": 50,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, while being effective in minimizing over copying (it over copies only in some cases of convergent arcs into one node), incremental copying is ineffective in eliminating early copying as we define it.",
                    "sid": 51,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "7 Incremental copying is ineffective in eliminating early copying because when a gra_ph unification algorithm recurses for shared arcs (i.e. the arcs with labels that exist in both input graphs), each created unification operation recursing into each shared arc is independent of other recursive calls into other arcs.",
                    "sid": 52,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In other words, the recursive calls into shared arcs are non-deterministic and there is no way for one particular recursion into a shared arc to know the result of future recursions into other shared arcs.",
                    "sid": 53,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus even if a particular recursion into one arc succeeds (with minimum over copying and no early copying in Wroblewski's sense), other arcs may eventually fail and thus the copies that are created in the successful arcs are all wasted.",
                    "sid": 54,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We consider it a drawback of incremental copying schemes that copies that are incrementally created up to the point of failure get wasted.",
                    "sid": 55,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This problem will be particularly felt when we consider parallel implementations of incremental copying algorithms.",
                    "sid": 56,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because each recursion into shared arcs is non-deterministic,parallel processes can be created to work concurrently on all arcs.",
                    "sid": 57,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In each of the parallelly created processes for each shared arc, another recursion may take place creating more parallel processes.",
                    "sid": 58,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While some parallel recursive call into some arc may take time (due to a large number of sub- arcs, etc.) another non-deterministic call to other arcs may proceed deeper and deeper creating a large number of parallel processes.",
                    "sid": 59,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the meantime, copies are incrementally created at different depths of subgraphs as long as the subgraphs of each of them are unified successfully.",
                    "sid": 60,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This way, when a failure is finally detected at some deep location in some subgraph, other numerous processes may have created a large number of copies that are wasted.",
                    "sid": 61,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, early copying will be a significant problem when we consider the possibility of parallelizing the unification algorithms as well.",
                    "sid": 62,
                    "ssid": 62,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "our scheme. ",
            "number": "2",
            "sents": [
                {
                    "text": "We would like to introduce an algorithm which addresses the criteria for fast unification discussed in the previous sections.",
                    "sid": 63,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It also handles cycles without over copying (without any additional schemes such as those introduced by [Kogure, 1989]).",
                    "sid": 64,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a data structure, a node is represented with eight fields: type, arc-list, comp-arc-list, forward, copy, comp-arc-mark, forward-mark, and copy-mark.",
                    "sid": 65,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Although this number may seem high for a graph node data structure, the amount of memory consumed is not significantly different from that consumed by other 7'Early copying' will henceforth be used to refer to early copying as defined by us.",
                    "sid": 66,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "algorithms.",
                    "sid": 67,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Type can be represented by three bits; comp-arc-mark, forward-mark, and copy-mark can be represented by short integers (i.e. fixnums); and comp- arc-list (just like arc-lis0 is a mere collection of pointers to memory locations.",
                    "sid": 68,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus this additional information is trivial in terms of memory cells consumed and because of this dam structure the unification algorithm itself can remain simple.",
                    "sid": 69,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "NODE type +...............",
                    "sid": 70,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ arc-list + ...............",
                    "sid": 71,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ comp-arc-list +...............",
                    "sid": 72,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ forward +...............",
                    "sid": 73,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ copy +...............",
                    "sid": 74,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ comp-arc-mark ARC + ...............",
                    "sid": 75,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ forward-mark I label I +...............",
                    "sid": 76,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ copy-mark I value I +...............",
                    "sid": 77,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "+ Figure 1: Node and Arc Structures The representation for an arc is no different from that of other unification algorithms.",
                    "sid": 78,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each arc has two fields for 'label' and 'value'.",
                    "sid": 79,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'Label' is an atomic symbol which labels the arc, and 'value' is a pointer to a node.",
                    "sid": 80,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The central notion of our algorithm is the dependency of the representational content on the global timing clock (or the global counter for the current generation of unification algorithms).",
                    "sid": 81,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This scheme was used in [Wroblewski, 1987] to invalidate the copy field of a node after one unification by incrementing a global counter.",
                    "sid": 82,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is an extremely cheap operation but has the power to invalidate the copy fields of all nodes in the system simultaneously.",
                    "sid": 83,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our algorithm, this dependency of the content of fields on global timing is adopted for arc lists, forwarding pointers, and copy pointers.",
                    "sid": 84,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus any modification made, such as adding forwarding links, copy links or arcs during one top-level unification (unify0) to any node in memory can be invalidated by one increment operation on the global timing counter.",
                    "sid": 85,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "During unification (in unifyl) and copying after a successful unification, the global timing ID for a specific field can be checked by comparing the content of mark fields with the global counter value and if they match then the content is respected; if not it is simply ignored.",
                    "sid": 86,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus the whole operation is a trivial addition to the original destructive unification algorithm (Pereira's and Wroblewski's unifyl).",
                    "sid": 87,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have two kinds of arc lists 1) arc-list and comp- arc-list.",
                    "sid": 88,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Arc-list contains the arcs that are permanent (i.e., usual graph arcs) and compare-list contains arcs that are only valid during one graph unification operation.",
                    "sid": 89,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also have two kinds of forwarding links, i.e., permanent and temporary.",
                    "sid": 90,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A permanent forwarding link is the usual forwarding link found in other algorithms ([Pereira, 1985], [Wroblewski, 1987], etc).",
                    "sid": 91,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Temporary forwarding links are links that are only valid during one unification.",
                    "sid": 92,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The currency of the temporary links is determined by matching the content of the mark field for the links with the global counter and if they match then the content of this field is respected 8.",
                    "sid": 93,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As in [Pereira, 1985], we have three types of nodes: 1) :atomic, 2) :bottom 9, and 3) :complex.",
                    "sid": 94,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": ":atomic type nodes represent atomic symbol values (such as Noun), :bottom type nodes are variables and :complex type nodes are nodes that have arcs coming out of them.",
                    "sid": 95,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Arcs are stored in the arc-list field.",
                    "sid": 96,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The atomic value is also stored in the arc-list if the node type is :atomic.",
                    "sid": 97,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": ":bottom nodes succeed in unifying with any nodes and the result of unification takes the type and the value of the node that the :bottom node was unified with.",
                    "sid": 98,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": ":atomic nodes succeed in unifying with :bottom nodes or :atomic nodes with the same value (stored in the arc-lis0.",
                    "sid": 99,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unification of an :atomic node with a :complex node immediately fails.",
                    "sid": 100,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": ":complex nodes succeed in unifying with :bottom nodes or with :complex nodes whose subgraphs all unify.",
                    "sid": 101,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Arc values are always nodes and never symbolic values because the :atomic and :bottom nodes may be pointed to by multiple arcs (just as in structure sharing of :complex nodes) depending on grammar constraints, and we do not want arcs to contain terminal atomic values.",
                    "sid": 102,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 2 is the central quasi-destructive graph unification algorithm and Figure 3 shows the algorithm for copying nodes and arcs (called by unify0) while respecting the contents of comp-arc-lists.",
                    "sid": 103,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The functions Complementarcs(dg 1,dg2) and Inter- sectarcs(dgl,dg2) are similar to Wroblewski's algorithm and return the set-difference (the arcs with labels that exist in dgl but not in rig2) and intersection (the arcs with labels that exist both in dgl and dg2) respectively.",
                    "sid": 104,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "During the set-difference and set- intersection operations, the content of comp-arc-lists are respected as parts of arc lists if the comp-arc- marks match the current value of the global timing counter.",
                    "sid": 105,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Dereferencedg(dg) recursively traverses the forwarding link to return the forwarded node.",
                    "sid": 106,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In doing so, it checks the forward-mark of the node and if the forward-mark value is 9 (9 represents a permanent forwarding link) or its value matches the current 8We do not have a separate field for temporary forwarding links; instead, we designate the integer value 9 to represent a permanent forwarding link.",
                    "sid": 107,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We start incrementing the global counter from 10 so whenever the forward-mark is not 9 the integer value must equal the global counter value to respect the forwarding link.",
                    "sid": 108,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "9Bottom is called leaf in Pereira's algorithm.",
                    "sid": 109,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "value of *unify-global-counter*, then the function returns the forwarded node; otherwise it simply returns the input node.",
                    "sid": 110,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Forward(dgl, dg2, :forward-type) puts (the pointer to) dg2 in the forward field of dgl.",
                    "sid": 111,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the keyword in the function call is :temporary, the current value of the *unify-global-counter* is written in the forward-mark field of dgl.",
                    "sid": 112,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the keyword is :permanent, 9 is written in the forward-mark field of dgl.",
                    "sid": 113,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our algorithm itself does not require any permanent forwarding; however, the functionality is added because the grammar reader module that reads the path equation specifications into dg feature-structures uses permanent forwarding to merge the additional grammatical specifications into a graph structure 1\u00b0.",
                    "sid": 114,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The temporary forwarding links are necessary to handle reentrancy and cycles.",
                    "sid": 115,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As soon as unification (at any level of recursion through shared arcs) succeeds, a temporary forwarding link is made from dg2 to dgl (dgl to dg2 if dgl is of type :bottom).",
                    "sid": 116,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, during unification, a node already unified by other recursive calls to unifyl within the same unify0 call has a temporary forwarding link from dg2 to dgl (or dgl to dg2).",
                    "sid": 117,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a result, if this node becomes an input argument node, dereferencing the node causes dgl and dg2 to become the same node and unification immediately succeeds.",
                    "sid": 118,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus a subgraph below an already unified node will not be checked more than once even if an argument graph has a cycle.",
                    "sid": 119,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Also, during copying done subsequently to a successful unification, two ares converging into the same node will not cause over copying simply because if a node already has a copy then the copy is returned.",
                    "sid": 120,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, as a case that may cause over copies in other schemes for dg2 convergent arcs, let us consider the case when the destination node has a corresponding node in dgl and only one of the convergent arcs has a corresponding are in dgl.",
                    "sid": 121,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This destination node is already temporarily forwarded to the node in dgl (since the unification check was successful prior to copying).",
                    "sid": 122,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Once a copy is created for the corresponding dgl node and recorded in the copy field of dgl, every time a convergent arc in dg2 that needs to be copied points to its destination node, dereferencing the node returns the corresponding node in dgl and since a copy of it already exists, this copy is returned.",
                    "sid": 123,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus no duplicate copy is created H. roWe have been using Wroblewski's algorithm for the unification part of the parser and thus usage of (permanent) forwarding links is adopted by the grammar reader module to convert path equations to graphs.",
                    "sid": 124,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, permanent forwarding is done when a :bottom node is to be merged with other nodes.",
                    "sid": 125,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "nCopying of dg2 ares happens for arcs that exist in dg2 but not in dgl (i.e., Complementarcs(dg2,dgl)).",
                    "sid": 126,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Such arcs are pushed to the cornp-arc-list of dgl during unify1 and are copied into the are-list of the copy during subsequent copying.",
                    "sid": 127,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If there is a cycle or a convergence in arcs in dgl or in ares in dg2 that do not have corresponding arcs in dg 1, then the mechanism is even simpler than the one discussed here.",
                    "sid": 128,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A copy is made once, and the same copy is simply returned QUASI-DESTRUCTIVE GRAPH UNIFICATION FUNCTION unify-dg(dg 1,dg2); result ~ catch with tag 'unify-fail calling unify0(dgl,dg2); increment *unify-global-counter*; ;; starts from 10 12 retum(result); END; FUNCTION unify0(dg 1,dg2); if '*T* = unifyl(dgl,dg2); THEN copy .--- eopydg-with-comp-arcs(dgl); return(copy); END; FUNCTION unify1 (dglunderef, dg2underef); dgl ,-- dereferencedg(dglunderef); dg2 ~-- dereferencedg(dg2underef); IF (dgl = dg2)I3THEN return('*T*); ELSE IF (dgl.type = :bottom) THEN forward-dg(dg 1,dg2,:ternporary); return('*T*); ELSE IF (dg2.type = :bottom) THEN forward-dg(dg2,dg 1,:temporary); return('*T*); ELSE IF (dgl.type = :atomic AND dg2.type = :atomic) THEN IF (dgl.arc-list = dg2.are-list)14THEN forward-dg(dg2,dg 1,:temporary); return('*T*); ELSE throwlSwith keyword 'unify-fail; ELSE IF (dgl.type = :atomic OR dg2.type = :atomic) THEN throw with keyword 'unify-fail; ELSE new ~ complementarcs(dg2,dgl); shared ~-- intersectarcs(dgl,dg2); FOR EACH arc IN shared DO unifyl (destination of the shared arc for dgl, destination of the shared arc for dg2); forward-dg(dg2,dg 1,:temporary); 1~ dg 1.comp-arc-mark *-- *unify-global-counter*; dgl.comp-arc-list ,-- new; return ('*T*); END; Figure 2: The Q-D.",
                    "sid": 129,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unification Functions every lime another convergent arc points to the original node.",
                    "sid": 130,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is because axes are copied only from either dgl or dg2.",
                    "sid": 131,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "129 indicates a permanent forwarding link.",
                    "sid": 132,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "13Equal in the 'eq' sense.",
                    "sid": 133,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because of forwarding and cycles, it is possible that dgl and dg2 are 'eq'.",
                    "sid": 134,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "X4Arc-list contains atomic value if the node is of type :atomic.",
                    "sid": 135,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "lSCatch/throw construct; i.e., immediately return to un/fydg.",
                    "sid": 136,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "16This will be executed only when all recursive calls into unifyl succeeded.",
                    "sid": 137,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Otherwise, a failure would have caused QUASI-DESTRUCTIVECOPYING ] FUNCTION copy-dg-with-comp-arcs(dgundere0; dg ~ dereferencedg(dgundere0; IF (dg.copy is nonempty AND dg.copy-mark = *unify-global-counter*) THEN return(dg.copy);a7 ELSE IF (dg.type = :atomic) THEN copy ,-- create-node0; Is copy.type ,-- :atomic; copy.are-list ,--- rig.are-list; dg.copy ,-- copy; dg.eopy-mark ,--- *unify-global-counter*; return(copy); ELSE IF (dg.type = :bottom) THEN copy *- ereatenodeO; copy.type .-- :bottom; dg.copy ,-- copy; dg.copy-mark ~-- *unify-global-counter*; return(copy); ELSE copy *- create-node(); copy.type ,-- :complex; FOR ALL are IN dg.are-list DO newarc ,- copy-are-and-comp-arc(are); push newarc into copy.are-list; IF (dg.compare-list is nonempty AND dg.comp-arc-mark = *unify-global-counter*) THEN FOR ALL comp-arc IN dg.compare-list DO neware ,-- copy-arc-and-comp-arc(comp-arc); push neware into copy.are-list; dg.copy 4-- copy; dg.copy-mark ,-- *unify-global-counter*; return (copy); END; FUNCTION copy-arc-and-comp-arcs(input-arc); label ,--- input-arc.label; value ,-- copy-dg-with-comp-arcs(input-are.value); return a new arc with label and value; END; Figure 3: Node and Arc Copying Functions Figure 4 shows a simple example of quasi-destructive graph unification with dg2 convergent arcs.",
                    "sid": 138,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The round nodes indicate atomic nodes and the rectangular nodes indicate bottom (variable) nodes.",
                    "sid": 139,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First, top-level unifyl finds that each of the input graphs has arc-a and arc-b (shared).",
                    "sid": 140,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then unifyl is recursively called.",
                    "sid": 141,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "At step two, the recursion into arc-a locally succeeds, and a temporary forwarding link with time- stamp(n) is made from node [-]2 to node s. At the third step (recursion into arc-b), by the previous forwarding, node f12 already has the value s (by dereferencing).",
                    "sid": 142,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then this unification returns a success and a temporary forwarding link with time-stamp(n) is created from an immediate return to unify.dg.",
                    "sid": 143,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "17I.e., the existing copy of the node.",
                    "sid": 144,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "lSCreates an empty node structure.",
                    "sid": 145,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "node [-] 1 to node s. At the fourth step, since all recursive unifications (unifyls) into shared arcs succeeded, top-level unifyl creates a temporary forwarding link with time-stamp(n) from dag2's root node to dagl's root node, and sets arc-c (new) into comp-arc-list of dagl and returns success ('*T*).",
                    "sid": 146,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "At the fifth step, a copy of dagl is created respecting the content of comp- arc-list and dereferencing the valid forward links.",
                    "sid": 147,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This copy is returned as a result of unification.",
                    "sid": 148,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "At the last step (step six), the global timing counter is incremented (n =:, n+ 1).",
                    "sid": 149,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After this operation, temporary forwarding links and comp-arc-lists with time-stamp (< n+l) will be ignored.",
                    "sid": 150,
                    "ssid": 88,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, the original dagl and dag2 are recovered in a constant time without a costly reversing operations.",
                    "sid": 151,
                    "ssid": 89,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(Also, note that recursions into shared-arcs can be done in any order producing the same result).",
                    "sid": 152,
                    "ssid": 90,
                    "kind_of_tag": "s"
                },
                {
                    "text": "unifyl(dagl,dag2) SHARF~-Ia, b} S \" t For each node with arc-a.",
                    "sid": 153,
                    "ssid": 91,
                    "kind_of_tag": "s"
                },
                {
                    "text": "unifyl( s, [ ]2) dag 1 dag2 a b forward(n) For each node witbare-b.",
                    "sid": 154,
                    "ssid": 92,
                    "kind_of_tag": "s"
                },
                {
                    "text": "unifyl([ ]i,[ ]2) forward(n) dagl.",
                    "sid": 155,
                    "ssid": 93,
                    "kind_of_tag": "s"
                },
                {
                    "text": "forwxd(n) dag2 a/.., ]b-'.fist(n)={c} a//Jb~C ot forward(n) copy-comp-ar\u02d8-list(dag 1) copy.",
                    "sid": 156,
                    "ssid": 94,
                    "kind_of_tag": "s"
                },
                {
                    "text": "of dagl (n) dag~dag2 S t S ~.~~..~ j ~ t forward(n) copy ofdagl(n) dagl dag2 Figure4: A Simple Example of Quasi-Destructive Graph Unification As we just saw, the algorithm itself is simple.",
                    "sid": 157,
                    "ssid": 95,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The basic control structure of the unification is similar to Pereira's and Wroblewski's unifyl.",
                    "sid": 158,
                    "ssid": 96,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The essential difference between our unifyl and the previous ones is that our unifyl is non-destructive.",
                    "sid": 159,
                    "ssid": 97,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is because the complementarcs(dg2,dgl) are set to the comp-arc-list of dgl and not into the are-list of dgl.",
                    "sid": 160,
                    "ssid": 98,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, as soon as we increment the global counter, the changes made to dgl (i.e., addition of complement arcs into compare-list) vanish.",
                    "sid": 161,
                    "ssid": 99,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As long as the comp-arc-mark value matches that of the global counter the content of the comp-arc-list can be considered a part of arc-list and therefore, dgl is the result of unification.",
                    "sid": 162,
                    "ssid": 100,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hence the name quasi-destructive graph unification.",
                    "sid": 163,
                    "ssid": 101,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to create a copy for subsequent use we only need to make a copy of dgl before we increment the global counter while respecting the content of the comp-arc-list of dgl.",
                    "sid": 164,
                    "ssid": 102,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus instead of calling other unification functions (such as unify2 of Wroblewski) for incrementally ere- ating a copy node during a unification, we only need to create a copy after unification.",
                    "sid": 165,
                    "ssid": 103,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, if unification fails no copies are made at all (as in [Karttunen, 1986]'s scheme).",
                    "sid": 166,
                    "ssid": 104,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because unification that recurses into shared ares carries no burden of incremental copying (i.e., it simply checks if nodes are compatible), as the depth of unification increases (i.e., the graph gets larger) the speedup of our method should get conspicuous if a unification eventually fails.",
                    "sid": 167,
                    "ssid": 105,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If all unifications during a parse are going to be successful, our algorithm should be as fast as or slightly slower than Wroblewski's algorithm 19.",
                    "sid": 168,
                    "ssid": 106,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since a parse that does not fail on a single unification is unrealistic, the gain from our scheme should depend on the amount of unification failures that occur during a unification.",
                    "sid": 169,
                    "ssid": 107,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As the number of failures per parse increases and the graphs that failed get larger, the speedup from our algorithm should become more apparent.",
                    "sid": 170,
                    "ssid": 108,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, the characteristics of our algorithm seem desirable.",
                    "sid": 171,
                    "ssid": 109,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the next section, we will see the actual results of experiments which compare our unification algorithm to Wroblewski's algorithm (slightly modified to handle variables and cycles that are required by our HPSG based grammar).",
                    "sid": 172,
                    "ssid": 110,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "experiments. ",
            "number": "3",
            "sents": [
                {
                    "text": "Table 1 shows the results of our experiments using an HPSG-based Japanese grammar developed at ATR for a conference registration telephone dialogue domain.",
                    "sid": 173,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "19h may be slightly slower becauseour unification recurses twice on a graph: once to unify and once to copy, whereas in incremental unification schemes copying is performed during the same recursion as unifying.",
                    "sid": 174,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Additional bookkeeping for incremental copying and an additional set-difference operation (i.e, complementarcs(dgl,dg2)) during unify2 may offset this, however.",
                    "sid": 175,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'Unifs' represents the total number of unifications during a parse (the number of calls to the top-level 'unify- dg', and not 'unifyl').",
                    "sid": 176,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'USrate' represents the ratio of successful unifications to the total number of unifications.",
                    "sid": 177,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We parsed each sentence three times on a Symbolics 3620 using both unification methods and took the shortest elapsed time for both methods ('T' represents our scheme, 'W' represents Wroblewski's algorithm with a modification to handle cycles and variables2\u00b0).",
                    "sid": 178,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Data structures are the same for both unification algorithms (except for additional fields for a node in our algorithm, i.e., comp-arc-list, comp-arc- mark, and forward-mark).",
                    "sid": 179,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Same functions are used to interface with Earley's parser and the same subfunctions are used wherever possible (such as creation and access of arcs) to minimize the differences that are not purely algorithmic.",
                    "sid": 180,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'Number of copies' represents the number of nodes created during each parse (and does not include the number of arc structures that are created during a parse).",
                    "sid": 181,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'Number of conses' represents the amount of structure words consed during a parse.",
                    "sid": 182,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This number represents the real comparison of the amount of space being consumed by each unification algorithm 0ncluding added fields for nodes in our algorithm and arcs that are created in both algorithms).",
                    "sid": 183,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We used Earley's parsing algorithm for the experiment.",
                    "sid": 184,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The Japanese grammar is based on HPSG analysis ([Pollard and Sag, 1987]) covering phenomena such as coordination, case adjunction, adjuncts, control, slash categories, zero-pronouns, interrogatives, WH constructs, and some pragmatics (speaker, hearer relations, politeness, etc.)",
                    "sid": 185,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "([Yoshimoto and Kogure, 1989]).",
                    "sid": 186,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The grammar covers many of the important linguistic phenomena in conversational Japanese.",
                    "sid": 187,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The grammar graphs which are converted from the path equations contain 2324 nodes.",
                    "sid": 188,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We used 16 sentences from a sample telephone conversation dialog which range from very short sentences (one word, i.e., iie 'no') to relatively long ones (such as soredehakochirakarasochiranitourokuyoushiwoookuriitashimasu \" In that case, we [speaker] will send you [hearer] the registration form.').",
                    "sid": 189,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, the number of (top-level) unifications per sentence varied widely (from 6 to over 500).",
                    "sid": 190,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "~Cycles can be handled in Wroblewski's algorithm by checking whether an arc with the same label already exists when arcs are added to a node.",
                    "sid": 191,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "And ff such an arc already exists, we destructively unify the node which is the destination of the existing arc with the node which is the destination of the arc being added.",
                    "sid": 192,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If such an arc does not exist, we simply add the arc.",
                    "sid": 193,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "([Kogure, 1989]).",
                    "sid": 194,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, cycles can be handled very cheaply in Wroblewski's algorithm.",
                    "sid": 195,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Handling variables in Wroblewski's algorithm is basically the same as in our algorithm (i.e., Pereira's scheme), and the addition of this functionality can be ignored in terms of comparison to our algorithm.",
                    "sid": 196,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our algorithm does not require any additional scheme to handle cycles in input dgs.",
                    "sid": 197,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "sent# Unifs USrate Elapsed time(sec) Num of Copies Num of Conses T W T W T W 1 6 0.5 1.066 1 113 85 107 1231 1451 2 i01 0.35 1.897 2 899 1418 2285 15166 23836 3 24 0.33 1.206 1 290 129 220 1734 2644 5 305 0.39 12.151 17 309 5529 9092 57405 93035 6 59 0.38 1.254 1 601 608 997 6873 10763 7 6 0.38 1.016 1 030 85 107 1175 1395 8 81 0.39 3.499 4 452 1780 2406 18718 24978 9 480 0.38 18.402 34 653 9466 15756 96985 167211 i0 555 0.39 26.933 47 224 11789 18822 119629 189997 ii 109 0.40 4.592 5 433 2047 2913 21871 30531 12 428 0.38 13.728 24 350 7933 13363 81536 135808 13 559 0.38 15.480 42 357 9976 17741 102489 180169 14 52 0.38 1.977 2 410 745 941 8272 10292 15 77 0.39 3.574 4 688 1590 2137 16946 22416 16 77 0.39 3.658 4 431 1590 2137 16943 22413 Table 1: Comparison of our algorithm with Wroblewski's",
                    "sid": 198,
                    "ssid": 26,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "discussion: comparison to other approaches. ",
            "number": "4",
            "sents": [
                {
                    "text": "The control structure of our algorithm is identical to that of [Pereira, 1985].",
                    "sid": 199,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, instead of storing changes to the argument (lags in the environment we store the changes in the (lags themselves non-destructively.",
                    "sid": 200,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because we do not use the environment, the log(d) overhead (where d is the number of nodes in a dag) associated with Pereira's scheme that is required during node access (to assemble the whole dag from the skeleton and the updates in the environment) is avoided in our scheme.",
                    "sid": 201,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We share the principle of storing changes in a restorable way with [Karttunen, 1986]'s reversible unification and copy graphs only after a successful unification.",
                    "sid": 202,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Karttunen originally introduced this scheme in order to replace the less efficient structure-sharing implementations ([Pereira, 1985], [Karttunen and Kay, 1985]).",
                    "sid": 203,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Karttunen's method 21, whenever a destructive change is about to be made, the attribute value pairs 22 stored in the body of the node are saved into an array.",
                    "sid": 204,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The dag node structure itself is also saved in another array.",
                    "sid": 205,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These values are restored after the top level unification is completed.",
                    "sid": 206,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(A copy is made prior to the restoration operation if the unification was a successful one.)",
                    "sid": 207,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The difference between Karttunen's method and ours is that in our algorithm, one increment to the global counter can invalidate all the changes made to nodes, while in Karttunen's algorithm each node in the entire argument graph that has been destructively modified must be restored separately by retrieving the attribute-values saved in an 21Thediscussion ofKartunnen's method is based on the D- PATR implementation on Xerox 1100 machines ([Karttunen, 1986]).",
                    "sid": 208,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "~'Le., arc structures: 'label' and 'value' pairs in our vocabulary.",
                    "sid": 209,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "array and resetting the values into the dag structure skeletons saved in another array.",
                    "sid": 210,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In both Karttunen's and our algorithm, there will be a non-destructive (reversible, and quasi-destructive) saving of intersection arcs that may be wasted when a subgraph of a particular node successfully unifies but the final unification fails due to a failure in some other part of the argument graphs.",
                    "sid": 211,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is not a problem in our method because the temporary change made to a node is performed as pushing pointers into already existing structures (nodes) and it does not require entirely new structures to be created and dynamically allocated memory (which was necessary for the copy (create-node) operation), z3 [Godden, 1990] presents a method of using lazy evaluation in unification which seems to be one SUCC~sful actualization of [Karttunen and Kay, 1985]'s lazy evaluation idea.",
                    "sid": 212,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One question about lazy evaluation is that the efficiency of lazy evaluation varies depending upon the particular hardware and programming language environment.",
                    "sid": 213,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, in CommonLisp, to attain a lazy evalaa_tion, as soon as a function is delayed, a closure (or a structure) needs to be created receiving a dynamic allocation of memory Oust as in creating a copy node).",
                    "sid": 214,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, there is a shift of memory and associated computation consumed from making copies to making closures.",
                    "sid": 215,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In terms of memory cells saved, although the lazy scheme may reduce the total number of copies created, if we consider the memory consumed to create closures, the saving may be significantly canceled.",
                    "sid": 216,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In terms of speed, since delayed evaluation requires additional bookkeeping, how schemes such as the one introduced by [Godden, 1990] would compare with non- lazy incremental copying schemes is an open question.",
                    "sid": 217,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unfortunately Godden offers a comparison of his algo Z3Although, in Karttunen's method it may become rather expensive ff the arrays require resizing during the saving operation of the subgraphs.",
                    "sid": 218,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "rithm with one that uses a full copying method (i.e. his Eager Copying) which is already significantly slower than Wroblewski's algorithm.",
                    "sid": 219,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, no comparison is offered with prevailing unification schemes such as Wroblewski's.",
                    "sid": 220,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With the complexity for lazy evaluation and the memory consumed for delayed closures added, it is hard to estimate whether lazy unification runs considerably faster than Wroblewski's incremental copying scheme, ~",
                    "sid": 221,
                    "ssid": 23,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "conclusion. ",
            "number": "5",
            "sents": [
                {
                    "text": "The algorithm introduced in this paper runs significantly faster than Wroblewski's algorithm using Ear- ley's parser and an HPSG based grammar developed at ATR.",
                    "sid": 222,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The gain comes from the fact that our algorithm does not create any over copies or early copies.",
                    "sid": 223,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Wroblewski's algorithm, although over copies are essentially avoided, early copies (by our definition) are a significant problem because about 60 percent of unifications result in failure in a successful parse in our sample parses.",
                    "sid": 224,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The additional set-difference operation required for incremental copying during unify2 may also be contributing to the slower speed of Wroblewski's algorithm.",
                    "sid": 225,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given that our sample grammar is relatively small, we would expect that the difference in the performance between the incremental copying schemes and ours will expand as the grammar size increases and both the number of failures ~ and the size of the wasted subgraphs of failed unifications become larger.",
                    "sid": 226,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since our algorithm is essentially parallel, patallelization is one logical choice to pursue further speedup.",
                    "sid": 227,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Parallel processes can be continuously created as unifyl reeurses deeper and deeper without creating any copies by simply looking for a possible failure of the unification (and preparing for successive copying in ease unification succeeds).",
                    "sid": 228,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "So far, we have completed a preliminary implementation on a shared memory parallel hardware with about 75 percent of effective parallelization rate.",
                    "sid": 229,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With the simplicity of our algorithm and the ease of implementing it (compared to both incremental copying schemes and lazy schemes), combined with the demonstrated speed of the algorithm, the algorithm could be a viable alternative to existing unification algorithms used in current ~That is, unless some new scheme for reducing excessive copying is introduced such as scucture-sharing of an unchanged shared-forest ([Kogure, 1990]).",
                    "sid": 230,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Even then, our criticism of the cost of delaying evaluation would still be valid.",
                    "sid": 231,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Also, although different in methodology from the way suggested by Kogure for Wroblewski's algorithm, it is possible to at~in structure-sharing of an unchanged forest in our scheme as well.",
                    "sid": 232,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have already developed a preliminary version of such a scheme which is not discussed in this paper.",
                    "sid": 233,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Z~For example, in our large-scale speech-to-speech translation system under development, the USrate is estimated to be under 20%, i.e., over 80% of unifications are estimated to be failures.",
                    "sid": 234,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "natural language systems.",
                    "sid": 235,
                    "ssid": 14,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgments",
            "number": "",
            "sents": [
                {
                    "text": "The author would like to thank Akira Kurematsu, Tsuyoshi Morimoto, Hitoshi Iida, Osamu Furuse, Masaaki Nagata, Toshiyuki Takezawa and other members of ATR and Masaru Tomita and Jaime Carbonell at CMU.",
                    "sid": 236,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thanks are also due to Margalit Zabludowski and Hiroaki Kitano for comments on the final version of this paper and Takako Fujioka for assistance in implementing the parallel version of the algorithm.",
                    "sid": 237,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Appendix: Implementation The unification algorithms, Farley parser and the HPSG path equation to graph converter programs are implemented in CommonLisp on a Symbolics machine.",
                    "sid": 238,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The preliminary parallel version of our unification algorithm is currently implemented on a Sequent/Symmetry closely-coupled shared-memory parallel machine running Allegro CLiP parallel Common- Lisp.",
                    "sid": 239,
                    "ssid": 18,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}