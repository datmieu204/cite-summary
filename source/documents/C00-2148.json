{
    "ID": "C00-2148",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "We present a class-based approach to building a verb lexicon that makes explicit the close asso\u00ad ciation between syntax and semantics for Levin classes.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have used Lexicalized Tree Adjoin\u00ad ing Grammars to capture the syntax associated with each verb class and have augmented the trees to in\u00ad clude sclcctional restrictions.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, semantic predicates arc associated with each tree, which al\u00ad low for a compositional interpretation.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "The difficulty of achieving adequate handcrafted semantic representations has limited the field of natural language processing to applications that can be contained within well-clefinccl sub-domains.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Despite many different lexicon clcvclopmcnt ap\u00ad proaches (Mel'cuk, 1988; Copestakc and Sanfil\u00ad ippo, 1993; Lowe et al., 1997), the field has yet to develop a clear consensus on guidelines for a computational lexicon.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One of the most controver\u00ad sial areas in building such a lexicon is polysemy: how senses can be computationally distinguished and characterized.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We address this problem by em\u00ad ploying compositional semantics and the adjunction of syntactic phrases to support regular verb sense extensions.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This differs from the Lexical Concep\u00ad tual Structure (LCS) approach exemplified by Voss (1996), which requires a separate LCS representa\u00ad tion for each possible sense extension.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this pa\u00ad per we describe the construction of VcrbNet, a verb lexicon with explicitly stated syntactic and seman\u00ad tic information for individual lexical items, using Levin verb classes (Levin, 1993) to systematically construct lexical entries.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use Lexicalizecl Tree Adjoining Grammar (LTAG) (Joshi, 1987; Schabes, 1990) to capture the syntax for each verb class, and associate semantic predicates with each tree.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Although similar ideas have been explored for verb sense extension (Pustejovsky, 1995; Goldberg, 1995), our approach of applying LTAG to the prob\u00ad lem of composing and extending verb senses is novel.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "LTAGs have an extended domain of local\u00ad ity that captures the arguments of a verb in a local manner.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The association of semantic predicates to a tree yields a complete semantics for the verb.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "More\u00ad over, the operation of adjunction in LTAGs provides a mechanism for extending verb senses.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "levin classes. ",
            "number": "2",
            "sents": [
                {
                    "text": "Levin verb classes arc based on the ability of a verb to occur in diathesis alternations, which arc pairs of syntactic frames that arc in some sense meaning preserving.",
                    "sid": 15,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The fundamental assumption is that the syntactic frames arc a direct reflection of the under\u00ad lying semantics.",
                    "sid": 16,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, Levin classes exhibit in\u00ad consistencies that have hampered researchers' abil\u00ad ity to reference them directly in applications.",
                    "sid": 17,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Many verbs are listed in multiple classes, some of which have conflicting sets of syntactic frames.",
                    "sid": 18,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Dang ct al.",
                    "sid": 19,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1998) showed that multiple listings could in some cases be interpreted as regular sense extensions, and defined intcrsectivc Levin classes, which are a more fine-grained, syntactically and semantically coher\u00ad ent refinement of basic Levin classes.",
                    "sid": 20,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We represent these verb classes and their regular sense extensions in the LTAG formalism.",
                    "sid": 21,
                    "ssid": 7,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "lexicalized tree adjoining grammars. ",
            "number": "3",
            "sents": [
                {
                    "text": "3.1 Overview of formalism.",
                    "sid": 22,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Lcxicalizcd Tree Adjoining Grammars consist of a finite set of initial and auxiliary elementary trees, and two operations to combine them.",
                    "sid": 23,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The min\u00ad imal, non-recursive linguistic structures of a lan\u00ad guage, such as a verb and its complements, arc cap\u00ad tured by initial trees.",
                    "sid": 24,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recursive structures of a lan\u00ad guage, such as prepositional modifiers which result in syntactically embedded VPs, arc represented by auxiliary trees.",
                    "sid": 25,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Elementary trees are combined by the operations of substitution and adjunction.",
                    "sid": 26,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Substitution is a sim\u00ad ple operation that replaces a leaf of a tree with a new tree.",
                    "sid": 27,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Adjunction is a splicing operation that replaces an internal node of an elementary tree with an aux\u00ad iliary tree.",
                    "sid": 28,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Every tree is associated with a lexical item of the language, called the anchor of the tree.",
                    "sid": 29,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The tree represents the domain over which the lex\u00ad ical item can directly specify syntactic constraints, such as subject-verb number agreement, or seman\u00ad tic constraints, such as selectional restrictions, all of which are implemented as features.",
                    "sid": 30,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "LTAGs are more powerful than context free gram\u00ad mars (CFG), allowing localization of so-called un\u00ad bounded dependencies that cannot be handled by CFGs.",
                    "sid": 31,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There are critical benefits to lexical seman\u00ad tics that are provided by the extended domain of locality of the lexicalized trees.",
                    "sid": 32,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each lexical en\u00ad try corresponds to a tree.",
                    "sid": 33,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the lexical item is a verb, the corresponding tree is a skeleton for an en\u00ad tire sentence with the verb already present, anchor\u00ad ing the tree as a terminal symbol.",
                    "sid": 34,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The other parts of the sentence will be substituted or adjoined in at appropriate places in the skeleton tree in the cou.rse of the derivation.",
                    "sid": 35,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The composition of trees dunng parsing is recorded in a derivation tree.",
                    "sid": 36,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The deriva\u00ad tion tree nodes correspond to lexically anchored el\u00ad ementary trees, and the arcs are labeled with infor\u00ad mation about how these trees were combined to pro\u00ad duce the parse.",
                    "sid": 37,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since each lexically anchored initial tree corresponds to a semantic unit, the derivation tree closely resembles a semantic-dependency rep\u00ad resentation.",
                    "sid": 38,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.2 Semantics for TAGs.",
                    "sid": 39,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There is a range of previous work in incorporating semantics into TAG trees.",
                    "sid": 40,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Stone and Doran (1997) describe a system used for generation that simul\u00ad taneously constructs the semantics and syntax of a sentence using LTAGs.",
                    "sid": 41,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Joshi and VijayShanker (1999), and Kallmeyer and Joshi (1999), describe the semantics of a derivation tree as a set of attach\u00ad ments of trees.",
                    "sid": 42,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The semantics of these attachments is given as a conjunction of formulae in a flat seman\u00ad tic representation.",
                    "sid": 43,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They provide a specific method\u00ad ology for composing semantic representations n.mch like Candito and Kahane (1998), where the direc\u00ad tionality of dominance in the derivation tree should be interpreted according to the operations used to build it.",
                    "sid": 44,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Kallmeyer and Joshi also use a flat semantic representation to handle scope phenomena involv\u00ad ing quantifiers.",
                    "sid": 45,
                    "ssid": 24,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "description of the verb lexicon. ",
            "number": "4",
            "sents": [
                {
                    "text": "VerbNet can be viewed in both a static and a dy\u00ad namic way.",
                    "sid": 46,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The static aspect refers to the verb and class entries and how they are organized, providing the characteristic descriptions of a verb sense or a verb class (Kipper et a!., 2000).",
                    "sid": 47,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The dynamic as\u00ad pect of the lexicon constrains the entries to allow a compositional interpretation in LTAG derivation trees, representing extended verb meanings by in\u00ad corporating adjuncts.",
                    "sid": 48,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Verb classes allow us to capture generalizations about verb behavim: Each verb class lists the the\u00ad matic roles that the predicate-argument stmcture of its members allows, and provides descriptions of the syntactic frames conesponding to licensed con\u00ad stmctions, with selectional restrictions defined for each argument in each frame.",
                    "sid": 49,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 Each frame also includes semantic predicates describing the partic\u00ad ipants at various stages of the event described by the frame.",
                    "sid": 50,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Verb classes are hierarchically organized, ensur\u00ad ing that each class is coherent -that is, all its mem\u00ad bers have common semantic elements and share a common set of thematic roles and basic syntactic frames.",
                    "sid": 51,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This requires some manual restmcturing of the original Levin classes, which is facilitated by us\u00ad ing intersective Levin classes.",
                    "sid": 52,
                    "ssid": 7,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "compositional semantics. ",
            "number": "5",
            "sents": [
                {
                    "text": "We use TAG elementary trees for the description of allowable frames and associate semantic predi\u00ad cates with each tree, as was done by Stone and Do\u00ad ran.",
                    "sid": 53,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The semantic predicates are primitive enough so that many may be reused in different trees.",
                    "sid": 54,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By using TAGs we get the additional benefit of an ex\u00ad isting parser that yields derivations and derived trees from which we can construct the compositional se\u00ad mantics of a given sentence.",
                    "sid": 55,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We decompose each event E into a tripar\u00ad tite structure in a manner similar to Moens and Steedman (1988), introducing a time function for each predicate to specify whether the predicate is true in the preparatory (during(E)), culmination (end(E)), or consequent (result(E)) stage of an event.",
                    "sid": 56,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Initial trees capture the semantics of the basic senses of verbs in each class.",
                    "sid": 57,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, many 'These restrictions arc more like preferences that generate a preferred reading of a sentence.",
                    "sid": 58,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They may be relaxed depend\u00ad ing on the domain of a particular application.",
                    "sid": 59,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "S [ cvcnt=E] NP\"\"Yl1- VI' [ cvcnt=E] [ +animate ] I v I run mof;ion(dm\u00b7ing(E), Xargl) S [ cvent=E2 ] NPa,.uo1- VI' [ cvcnt=El ] [+animate]V NP\"\"!ill 1 [ +animate ] run cau.se(during(E2), Xm\u00b7go, El)/\\ rnotion(dur\u00b7ing(El), Xm\u00b7gl) Figure 1: Induced action alternation for the Run verbs verbs in the Run class can occur in the induced ac\u00ad tion alternation, in which the subject of the intransi\u00ad tive sentence has the same thematic role as the direct object in the transitive sentence.",
                    "sid": 60,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 1 shows the initial trees for the transitive and intransitive vari\u00ad ants for the Run class, along with their semantic predicates.",
                    "sid": 61,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The entity in motion is given by argl, associated with the syntactic subject of the intransi\u00ad tive tree and the direct object of the transitive tree.",
                    "sid": 62,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The event denoted by the transitive variant is a com\u00ad position of two subevents: Hl refers to the event of ar\u00b7gl running, and E2 refers to the event of an entity (ar\u00b7gO) causing event El.",
                    "sid": 63,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Predicates are associated with not only the verb trees, but also the auxiliary trees.",
                    "sid": 64,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use a flat semantic representation like that of Kallmeyer and Joshi, and the semantics of a sentence is the con\u00ad junction of the semantic predicates of the trees used to derive the sentence.",
                    "sid": 65,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 2 shows an auxiliary tree for a path prepositional phrase headed by \"to\", along with its associated semantic predicate.",
                    "sid": 66,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When the PP tree for \"to the park\" is adjoined into the intransitive tree for \"John ran\", the semantic in\u00ad terpretation is the conjunction of the two predicates motion( during( E ),john) 1\\ goal( end( E ),john, park); adjunction into the transitive tree for \"Bill ran the horse\" yields cause(durin[i(E2),bill,EI) 1\\ nw\u00ad tion( during( El ),horse) 1\\ goal( end( E1 ),horse, park).",
                    "sid": 67,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In both cases, the argument Xm\u00b7.qO.argl (john or horse) for the auxiliary tree is nonlocal and comes from the adjunction site.2 The arguments are re\u00ad covered from the derivation tree, following Candito and Kahane.",
                    "sid": 68,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When an initial tree is substituted into another tree, the dependency mirrors the derivation structure, so the variables associated with the sub 2 X,,.",
                    "sid": 69,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "o.a,.",
                    "sid": 70,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "I is the variable associated with the entity in mo\u00ad stituting tree can be referenced as arguments in the host tree's predicates.",
                    "sid": 71,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When an auxiliary tree is adjoined, the dependency for the adjunction is re\u00ad versed, so that variables associated with the host tree can be referenced as arguments in the adjoin\u00ad ing tree's predicates.",
                    "sid": 72,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "VI' VP\"''f 1o* I'P [cvcnt=E] I' NP\",.Yd to Figure 2: Auxiliary path PP tree The tripartite event structure allows us to express the semantics of classes of verbs like change of state verbs whose description requires reference to a complex event structure.",
                    "sid": 73,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the case of a verb such as \"break\", it is important to make a distinc\u00ad tion between the state of the object before the end of the action and the new state that results after\u00ad wards.",
                    "sid": 74,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This event structure also handles the cona\u00ad tive construction, in which there is an intention of a goal during the event, that is not achieved at the end of the event.",
                    "sid": 75,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The example of the cona\u00ad tive construction shown in Figure 3 expresses the intention of hitting something.",
                    "sid": 76,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because the in\u00ad tention is not satisfied the semantics do not in\u00ad clude the predicates manner( end( E),force.fitl,Xm\u00b7go) 1\\ contact( end( E),Xargo.Xm\u00b7gl), that express the completion of the contact with impact event.",
                    "sid": 77,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The ability of verbs to take on extended senses 9 9 tion (m\u00b7gl) in the tree to which the PP adjoins (nrgO).",
                    "sid": 78,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "in sentences based on their adjuncts is captured in a S [ cvent=E] NPa,.9o-!- VI' [ cvcnl=E]V NPa.\u00b7vl-l 1 hit S [ cvcnt=E] NPargo+ V I' V VP I hit V PI' IP NPa,.gl-!",
                    "sid": 79,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 a t manner(during(E), directedmotion, Xm\u00b7go)l\\ contact(end(E), Xa1\u00b7gO, Xm\u00b7gl)l\\ manneT(dm\u00b7ing(E), directedmotion, Xargo) manneT(end(E), forceful, Xa1\u00b7go) Figure 3: Syntax and semantics of transitive and conative construction for Hit verbs natural way by the TAG operation of adjunction and our conjunction of semantic predicates.",
                    "sid": 80,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The orig\u00ad inal Hit verb class does not include movement of the direct object as part of the meaning of hit; only sudden contact has to be established.",
                    "sid": 81,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By adjoining a path PP such as \"across NP\", we get an extended meaning, and a change in Levin class membership to the Throw class.",
                    "sid": 82,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 4 shows the class-specific auxiliary tree anchored by the preposition \"across\" together with its semantic predicates, introducing a motion event that immediately follows (meets) the contact event.",
                    "sid": 83,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "VP [ evcnt=E ] on the LTAG formalism, for which we already have a large English grammar.",
                    "sid": 84,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Palmer et a!.",
                    "sid": 85,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1998) de\u00ad fined compositional semantics for classes of verbs implemented in LTAG, representing general seman\u00ad tic components (e.g., motion, manner) as features on the nodes of the trees.",
                    "sid": 86,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our use of separate log\u00ad ical forms gives a more detailed semantics for the sentence, so that for an event involving motion, it is possible to know not only that the event has a motion semantic component, but also which entity is actu\u00ad ally in motion.",
                    "sid": 87,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This level of detail is necessary for applications such as animation of natural language instructions (Bindiganavale et a!., 2000).",
                    "sid": 88,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Another important contribution of this work is that by divid\u00ad ing each event into a tripartite structure, we permit a more precise definition of the associated semantics.",
                    "sid": 89,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "VPa,.9o'1 cvcnt=Ea,.9 o] PP P NPargd I a c r o s s meets(Em\u00b7go, E.)",
                    "sid": 90,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "I\\ Finally, the operation of adjunction in TAGs pro\u00ad vides a principled approach to representing the type of regular polysemy that has been a major obstacle in building verb lexicons.",
                    "sid": 91,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Researching whether a TAG grammar for Verb\u00ad motion( during( E), Xm\u00b7gO.a1\u00b7gi)I\\ via(dm\u00b7ing(E), XargO.a1\u00b7gl, Xargt) Figure 4: Auxiliary tree for \"across\"",
                    "sid": 92,
                    "ssid": 40,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "conclusion. ",
            "number": "6",
            "sents": [
                {
                    "text": "We have presented a class-based approach to build\u00ad ing a verb lexicon that makes explicit and imple\u00ad ments the close association between syntax and se\u00ad mantics, as postulated by Levin.",
                    "sid": 93,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The power of the lexicon comes from its dynamic aspect that is based Net can be automatically constructed by using de\u00ad velopment tools such as Xi a eta!.",
                    "sid": 94,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(1999) or Candito (1996) is part of our next step.",
                    "sid": 95,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also expect to be able to factor out some class-specific auxiliary trees to be used across several verb classes.",
                    "sid": 96,
                    "ssid": 4,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgments. ",
            "number": "7",
            "sents": [
                {
                    "text": "The authors would like to thank the anonymous re\u00ad viewers for their valuable comments.",
                    "sid": 97,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This research was partially supported by NSF grants IIS9800658 and IIS9900297 and CAPES grant 091495.",
                    "sid": 98,
                    "ssid": 2,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}