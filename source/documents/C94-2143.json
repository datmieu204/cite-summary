{
    "ID": "C94-2143",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "The revised graph unification algorithms presented here are more efficient because they reduce the amount of copying that was necessary because of the assumption that data-structure sharing in inputs occurs only when feature-structure sharing occurs.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Constraint-based linguistic frameworks use logical systems called feature logics (Kasper & Rounds, 1986; Shieber, 1989; Srnolka, 1988), which describe linguistic objects by using logical formulas called feature descriptions that have as their models feature structures or typed feature structures.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Shieber (1989) argued that if the canonical models of finite formulas of a feature logic were themselves finite, we could use them to compute over instead of theorem-proving over the for- nmlas themselves.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This would be advantageous if we had efficient algorithms for manipulating the canonical models.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The most important operation on models- feature structures or typed feature structures is combining the information two models contain.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This operation is traditionally called unification, although recently it has come to be more suitably called informational union.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This unification operation is significant not only theoretically but also practically because the efficiency of systems based on constraint-based formalisms depends on the (typed) feature structure unification and/or feature description unification algorithms they use.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 This dependency is especially crucial for monostratal formalisms -that is, formalisms which use only (typed) feature structures such as HPSG (Pollard & Sag, 1987) and JPSG (Gunji, 1987)?",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The efficiency of (typed) feature structure unification has been improved by developing algorithms that take as their inputs two directed graphs representing (typed) feature structures, copy all or part of them, and give a directed graph representing the unification result.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These algorithms are thus called graph unification.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Previous researeh has identified graph copying as a significant overhead and has attempted to reduce this overhead by lazy copying and structure sharing.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unification algorithms developed so far, however, including those allowing structure sharing seem to 1For example, the TASL1NK natural language system uses 80% of the processing time for feature structure unification and other computations required by unification, i.e., feature structure pre-copying (Godden, 1990).",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2For example, a spoken-style .Japanese sentence analysis system based on HPSG (Kogure, 1989) uses 90%-98% of the processing time for feature structure unification.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "syn | Fig.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1: Matrix notation for a typed feature structure.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "contradict structure sharing because they assmne the two input graphs never share their parts with each other.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This \"structure sharing\" assumption prevents the initial data structures fl'om sharing structures for representing linguistic principles and lexical information even though many lexical items share common information and such initial data structure sharing could significantly reduce the amount of data structures required, thus making natural language systems much more efficient.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, even if the structure sharing assumption holds initially, unification algorithms allowing structure sharing can yield situations that violate the assumption.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The ways in which such unification algorithms are used are therefore restricted and this restriction reduces their efficiency.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This paper proposes a solution to this \"structure sharing problem\" and provides three algorithms.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Section 2 briefly explains typed feature structures, Section 3 defines the structure sharing problem, and Section 4 presents key ideas used in solving this problem and provides three graph unification algorithms that increase the efficiency of feature structure unification in constraint-based natural language processing.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "typed feature structures. ",
            "number": "2",
            "sents": [
                {
                    "text": "The concept of typed feature structures attgments the concept of feature structures.",
                    "sid": 22,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A typed feature structure consists of a set of feature-value pairs in which each value is a typed feature structure.",
                    "sid": 23,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set of type symbols is partially ordered by subsumption ordering _<7 and constitutes a lattice in which the greatest element T corresponds to 'no information' and the least element J_ corresponds to 'over-defined' or 'inconsistency.'",
                    "sid": 24,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For any two type symbols a, b in this lattice, their least npper bound and greatest lower bound are respectively denoted a VT b and a AT- It).",
                    "sid": 25,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Typed feature strnctures are represented in matrix notation as shown in Fig.",
                    "sid": 26,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1, where syn, agr, sg, and 3rd are type symbols; agree, hum, per, and subj are feature symbols; and X is a tag symbol.",
                    "sid": 27,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A feature- address that is, a finite (possibly empty) string of feature symbols is used to specify a feature value of an embedded structure.",
                    "sid": 28,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Fig.",
                    "sid": 29,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1, for example, the structure at the feature-address agree . uum, where '.' is the concatenation operator, is said to have sg as its type symbol.",
                    "sid": 30,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The root feature-address is de- l \\\\su bj agrec li ~.syn a/agr~ fl re c ++ N sg 3rd Fig.",
                    "sid": 31,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2: Graph representation of a typed feature struc- l, ure.",
                    "sid": 32,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "noted by '(.'",
                    "sid": 33,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To specify token-identity in matrix notation, a tag symbol is used: feature-address values with the same tag symbol arc token-identical, and those featm'e-addresses with the token-identical value are said to corefer.",
                    "sid": 34,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "/n Fig.",
                    "sid": 35,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1, the feature-addresses agree and subj \u2022 agree corefer.",
                    "sid": 36,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A typed feature, structure is also represented by a rooted, connected, directed graph within which each node corresponds to a typed feature structure and is labeled with a type symbol (and, optionally, a tag symbol) and each arc corresponds to a feature.-value pair and is labeled with a ti'~ature symbol.",
                    "sid": 37,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Fig.",
                    "sid": 38,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2 illustrates the graph representation of the typed feature structure whose matrix notation is shown in Fig.",
                    "sid": 39,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1.",
                    "sid": 40,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In a graph representation, the values at corefcrent Ihatureaddresscs that is, token-identical values are represented by the same node.",
                    "sid": 41,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'['he set of typed featm:e structures is also partially ordered by a subsumption ordering that is an exten--siou of the subsnmptiol, ordering on the set of type symbols.",
                    "sid": 42,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A typed feature structure tl is less than or equal to tu (written as tl <, in) if and only if tt is iuconsistent (that is, if it includes the type symbol ]_) or (i) t~ 's type symbol al is less than or equal to t~'s type symbol a2 (a~ _<7 ap.); (ii) each h'.atur(~ f of 12 exists in ll and has a value 12, f such that its counter= part ttj is less than or equal to t2,j'; m'/] (iii) each coreference relation holding in 12 also holds in 11.",
                    "sid": 43,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'.l'his subsumpl, ion ordering serves its the basis for (Mining two lattice operations: generalization (the least upper bound or join) and unitlcation (the greatest lower bound or meet).",
                    "sid": 44,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Typed feature structures have been formalized in several ways, such as by using .I/%types (MtKaci, 198~).",
                    "sid": 45,
                    "ssid": 24,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "the structure sharing proi1lem. ",
            "number": "3",
            "sents": [
                {
                    "text": "3.1 Graph Unification Algorithms.",
                    "sid": 46,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The destructive unitlcation algorithnl presenled by Aitq(aci is the starting point in increasing the efliciency of graph unification.",
                    "sid": 47,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is a node-merging process that uses the Unio>Find algorithm, which wits originally devek)t)ed for testing tinite automata equivalence (llopcroft & Karp, 1971), in a manner w.'ry similar to that of the unification algorithm for rational terms (llnet, 197(i).",
                    "sid": 48,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(',iveu two root nodes of graphs representing (typed) feature structures, this algorithm simultaneously traverses a pair of input nodes with the same feature-address, putting them node structure tsymbol {a type symbol) a7c8 (a set of arc structures} generation {an integer) forward NIL I {a node st,'ucturc) NIL I {~ node structure} copy I (a copydcp structure) arc structure label (~ feature symbol} vahw {a node structure) copydep structure generation | {an integer} deps [ (a set of node and arc p~irs) Fig.",
                    "sid": 49,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3: I)ata structures for nondestructive unification an<l LING unification.",
                    "sid": 50,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "into a new and larger coreference class, and then returns the lnerged graph, Since the destructive unification process modifies its input graphs, they must first be copied if their contents are to bc preserved.",
                    "sid": 51,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Nondeterminism in parsing, for example, requires the preservation of graph structures not only for initial graphs representing lcxical entries and phrase structure rules but also for those representing well-formed intermediate structures.",
                    "sid": 52,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Although the overhead for this copying is significant, it is impossible to represent a resul.-taut unitied graph without creating any new strut tures.",
                    "sid": 53,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unnecessary copying, though, must be identified and minimized.",
                    "sid": 54,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Wroblewski (1987) delined two kinds of unnecessary copying- over-copying (copying structures not needed to represent resultant graphs) and early-copying (copying structures even though unitication fails) -but this account is flawed because the resultant graph is assumed to consist only of newly created structures even if parts of the inputs that are not changed during mtitication could be shared with the resultant graph.",
                    "sid": 55,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A more eNcient unification algorithm would avoid this redundant copying (copying structures that can be shared by the input and resultant graphs) (Kogure, 1990).",
                    "sid": 56,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To distinguish structure sharing at the implementation level fl'om that at the logical lew'l (that is, coreference relations between feature-addresses), the lbrmer is called data-structure sharing and the latter is called feature-structure sharing (Tomabechi, 1992).",
                    "sid": 57,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'['he key approaches to reducing the amount of structures copied are lazy copying and data-structure sharing.",
                    "sid": 58,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For lazy copying, Karttnnen (1986) proposed a reversible unification that saves the original contents of the.",
                    "sid": 59,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "inputs into prealloeated areas immediately before destructive modification, copies the resultant graph if necessary, and then restores the original contents by undoing all the changes made during mlitication.",
                    "sid": 60,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Wroblewski (1987), on the other hand, proposed a uondestructiw~ unitication with incremental copying.",
                    "sid": 61,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given two graphs, Wroblewski's algorithm simultaneously traverses each pair of input nodes with the same feature-address and creates a (:ommon copy of the input nodes.",
                    "sid": 62,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The nondestructive unification algorithm for typed feature structures uses the data structures shown in Fig.",
                    "sid": 63,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.",
                    "sid": 64,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "a The algorithm connects an input node and its copy node with a copy link that is, it sets the copy node as the input's copy field value.",
                    "sid": 65,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The link is meaningflfl during only one unification process and thus enables nondestructive modification.",
                    "sid": 66,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4 Using an idea similar to Karttunen's, Tomabechi (1991) proposed a quasi-destructive unification that uses node structures with fields for keeping update information that survives only during the unification process.",
                    "sid": 67,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 Unification algorithms allowing data-structure sharing (DSS unification algorithms) are based on two approaches: the Boyer and Moore approach, which was originally developed for term unification in theorem-proving (Boyer & Moore, 1972) and was adopted by Pereira (1985); and the lazy copying suggested by Karttnnen ~nd Kay (1985).",
                    "sid": 68,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recent lazy copying unification algorithms are based on Wroblewski's or Tomabeehi's schema: Godden (1990) proposed a unification algorithm that uses active data structures, Kogure (1990) proposed a lazy incremental copy graph (LING) unification that uses dependency-directed eol)yiug, and Emeie (1991) proposed a lazy-incremental copying (LIC) unification that uses chronological dereference.",
                    "sid": 69,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These algorithms are b0,sed on Wroblewski's algorithm, and Tomabechi (1992) has proposed a data-structure-sharing version of his quasi-destructive unification.",
                    "sid": 70,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.2 The Structure Sharing Problem.",
                    "sid": 71,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The graph unification algorithms mentioned so far-- perhaps all those developed so far--assume that data- structure sharing between two input structures occurs only when feature-structure sharing occurs between feature-addresses they represent.",
                    "sid": 72,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This \"structure sharing\" assumption prevents data-structure sharing between initial data structures for representing linguistic principles and lexical information even though many lexical items share common information.",
                    "sid": 73,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, many lexical items in a traditional syntactic categories such as noun, intransitive verb, transitive verb, and so on share most of their syntactic information and differ in their semantic aspects such as semantic sortal restriction.",
                    "sid": 74,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Such initial data-structure sharing could significantly reduce the amount of data structures required and could therefore reduce page- swapping and garbage-collection and make natural language processing systems much more efficient.",
                    "sid": 75,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, even if the structure sharing assumption holds initially, applying a DSS unification algorithm in natural language processing such as parsing and generation can give rise to situations that violate the assumption.",
                    "sid": 76,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Consider, for example, JPSGaFor the nondestructive unification algorithm, the node structure takes as its copy field value either NJ L or a node structure only.",
                    "sid": 77,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4In this algorithm each unification process has an integer as its process identifier and each node created in a process has the identifier as its generation field vMue.",
                    "sid": 78,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A copy link is meaningful only if its destination node has the current process identifier.",
                    "sid": 79,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Such a node is called ~current.'",
                    "sid": 80,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "~The technique used to control the lifetime of update data is the same as that of Wroblewski's algorithm.",
                    "sid": 81,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "based parsing.",
                    "sid": 82,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "There are only a few phrase structure rules in this fl'amework and the Complement-Head Construction rule of the form 'M --+ C It' is applied very frequently.",
                    "sid": 83,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For instance, consider constructing a structure of the form [vP~ NP2 [vP, NP1 VII.",
                    "sid": 84,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When the rule is applied, the typed feature structure for the rule is unified with the structure resulting from embedding the typed feature structure for NPl at the feature-address for the complement daughter in the rule (e.g., dtrs.",
                    "sid": 85,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "cdtr), and the unification result is then unified with the structure resulting from embedding the typed feature structure for V at the feature-address for the head daughter.",
                    "sid": 86,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because not every substructure of the structure for the rule always changed during such a unification process, there may be some substructures shared by the strneture for the rule and the structure for VP1.",
                    "sid": 87,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, when constructing VP2 there may be unexpected and unde- sired data-structure sharing between the structures.",
                    "sid": 88,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let me illustrate what happens in such eases by using a simple example.",
                    "sid": 89,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Suppose that we use the non-destructive unification algorithm or one of its data- structure sharing versions, the LING or I,IC algorithm.",
                    "sid": 90,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The nondestructive and LING unification algorithms use the data structures shown in Fig.",
                    "sid": 91,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3, and the LIC algorithm uses the same data structures except that its ~zode structure has no forward field.",
                    "sid": 92,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Consider unification of the typed feature structures tl and t2 shown in Fig.",
                    "sid": 93,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4(a).",
                    "sid": 94,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Suppose that t, and t2 are respectively represented by the directed graphs in Fig.",
                    "sid": 95,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4(b) whose root nodes are labeled by tag symbols X0 and X4.",
                    "sid": 96,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is, tj's substructure at feature-address f2 and t2'S substructure at ]'1 are represented by the same data structure while feature- structure sharing does not hold between them, and tl's substructure at ]3 and t2's substructure at; f4 are represented by the same data structure while feature- structure sharing does not hold between them.",
                    "sid": 97,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each of the algorithms simultaneously traverses a pair of input nodes with the same feature-address both of the inputs have Dora the root feature-address to leaf feature-addresses, makes a common copy of them to represent the unification result of that feature-address, and connects the input and ontput nodes with copy links.",
                    "sid": 98,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For any feature-address that only one of the inputs has, the nondestructive unification algorithm copies the subgraph whose root is the node for that feature-address and adds the copied subgraph to the output structure, whereas the LING and LIC algorithms make the node shared by the input and outpnt structures.",
                    "sid": 99,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the case shown in Fig.",
                    "sid": 100,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4(b) the root nodes of the inputs nodes with the tag symbols Xo and X4 are first treated by creating a common copy of them (i.e., the output node with Yo), connecting the input and output nodes with copy links, and setting bo = ao A:r a4 as the copy's lsymbol wdue.",
                    "sid": 101,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then the input nodes' arc structures are treated.",
                    "sid": 102,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Snt> pose that the pair off1 arcs is treated first.",
                    "sid": 103,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After the input nodes at feature-address fl are treated in the same manner as the root nodes, the pair of fie arcs is treated.",
                    "sid": 104,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this case, tl's node at f2 (labeled X2) already has a copy link because the node is also used as t2's node at ]'1 so that the destination node of the link is used as this featnre-address's output node.",
                    "sid": 105,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Af k *~* tt : a0 f2 II2 , I ] Lfa aa t2 : a4 la a~ , (a) Input typed feature structures.",
                    "sid": 106,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "input tl Int)ut t2 X0:a0 Xva\u02d8 :,/ \":..-:: :,/\" ,\\:, x:, / \", ', /;()utl)ut la \",,,\\\\/,: \\, .....",
                    "sid": 107,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Yo:bo i ~'\\ / ] , i k, ,,,\\ s,/ s,,, ,.",
                    "sid": 108,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Yl:bl ~ copy lin k (b) Snapshot of incremental graph ratification allowing data-structure sharing, ta : t)o Xa:aa ' LA: t)a II.",
                    "sid": 109,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "At t2 : t)o aa LA: aa where, ])0 =: a 0 A,] \"14~ bl --alA7 a2Av a~, ID2 ~ at A'I a:~, |)3 = a2 A7 aE,.",
                    "sid": 110,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(c) Wrong graph unili(:ation outl)ut (ta) and the cot-- rect unifi(-ation of the inputs (t~ At Zp,,).",
                    "sid": 111,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "l\"ig.",
                    "sid": 112,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4: An examph; of incorrect graph unitication.",
                    "sid": 113,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ter the common label arcs are treated, unique label arcs are treated.",
                    "sid": 114,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The nondestructive, unitication algorithm copies tl's Ca and t~'s f4 arcs and adds them go the output root node, whercas the LING and tIC a.1gorithms make the input and output structures share their destination nodes, t:'inally, the I,ING and MC algorithms obtain gr~l)h t: n represented in matrix notation ill Fig.",
                    "sid": 115,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4(('i)just over the correct result.",
                    "sid": 116,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The nondestructive unification algorithni obtains the same typed feature structure.",
                    "sid": 117,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The reversible and the quasi-destructiw', unification algoril, hms are also ,mable to obtain the correct result for this example becatlS(; these Mgorithms cmmot represent two update nodes by using a single node.",
                    "sid": 118,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, none of tile ctiicient unification algorithms developed re, ce, ntly obtains the correct results R)r such a case.",
                    "sid": 119,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Avoiding such wrong unification results requires undesirable copying.",
                    "sid": 120,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We can, for example, avoid getting the wrong result by interleaving tile application of any non-DSS unilication algorithm between N)plications of a I)SS unitication algorithm, but such bypassing requires two unilication programs and reduces the efficiency gain of I)SS unification.",
                    "sid": 121,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This prechlsion of useful data-structure sharing is referred to here as the 'structur~ sharing\" problem.",
                    "sid": 122,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It has been shown that all the/)SS mfiticat.ion nlgo rithins lncntioned above are subject to tMs problem even if the structure sharing assumption holds initially.",
                    "sid": 123,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Non-I)SS unification Mgorithms are also subject to the problem because their inputs are created 1)y applying not only the unitication operation but also operations such as embedding and extraction, in most implelnentations of which data-structure shar.",
                    "sid": 124,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "hag occurs t)etween their input and output structures.",
                    "sid": 125,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1!3ven non-l)SS unification algorithms must there, fore take such inputs into act(mat, and this requires undesirable copying.",
                    "sid": 126,
                    "ssid": 81,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "a solution '1'o the structure sharing problem ",
            "number": "4",
            "sents": [
                {
                    "text": "4.1 Key Ideas.",
                    "sid": 127,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The example ill Section 3 suggests that the structlu'e sharing l)roblem has two sources, which concern not only the increnmntal Col)ying al)proach but also other al)proaches.",
                    "sid": 128,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The tirst source is the way of rec, ording ul)date inibrmation.",
                    "sid": 129,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the incremental Col)ying at)- proach, this corresponds to the way of copying structures.",
                    "sid": 130,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is, while calculating t l A t t, 2 the incr(:men tal copying process does not (lisl, inguish between the copies cremated tuq tim sul>strucl;ures of the left input l t and the copies created as tile substructures of the right input t2.",
                    "sid": 131,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a result, a copy node oft1 's node at f~ature-address p can be used as a copy node of t~'s nod(', at a feature-address, and vice versa.",
                    "sid": 132,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Fig.",
                    "sid": 133,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4(10, fbr example, tile copy of t2's node al; f2 is wrongly used as the copy of tl's node at fl.",
                    "sid": 134,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This causes unexpected and wrong data-structure sharing in the r(~sultant graph and this in turn catlses unexpect(~d and wrong feature-structure sharing in the resultant (typed) fc~t, ure s'[,rllcttlro.",
                    "sid": 135,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Ill other apl)roachcs , such as the quasi-destructiw~ apl/roach , the source of the structure sharing prol)lem is that each node structure has tMds for keeping information on only two typed feature structures one for the original and one R)r tilt: result wheretm fields for keeping information on three typed feature structures are needed one for tl> original and one for each of the two results, One way to solve this problem is therel'ore to nlake each node keep information on thre, c typed fe, ttturc structures: in the increnrental COl)ying apl)roach ca(;h nod(: must have two copy tields, and in the quasi-do, structive ;t[)t)roach each llode l)lUSt have two sets of llelds for updates.",
                    "sid": 136,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'Fhe second source of the structure sharing prob lem is the method of data-stru(:ture sharing between input and output structures.",
                    "sid": 137,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unexpected and wrong data-structure sh~ring may result if a node shared by the leg and right inputs is used as part of the left input, intended to be shared between the left input and output, at the same time it is used as part of the right input, intended to be shared between the right input Fig.",
                    "sid": 138,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5: The node structure lbr the revised nondestructive unitication.",
                    "sid": 139,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "node structure tsymbol (a type symbol} arcs (a set of arc structures) generation {an integer) forward NIL [(a ,,ode structure) lcopy NIL [ (a node structure) rcopy NIL[ {a node structure) and output.",
                    "sid": 140,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Fig.",
                    "sid": 141,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4(b), for example, tl's node at feature-address f~ is shared as t3's node at the same feature-address, and the same node as t2's node at f4 is shared as ta's node at the same feature-address.",
                    "sid": 142,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This problem can be solved easily by keeping information on data-structure sharing status; that is, by adding to the node structure a new field for this purpose and using it thus: when a unification algorithm makes a node shared (for example, between the left inpnt and output), it records this information on the node; later when tilt algorithm attempts to make the node shared, it does this only if this data-structure sharing is between the left input and output.",
                    "sid": 143,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.2 Algorithms.",
                    "sid": 144,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This section first describes a non-DSS unification algorithm that discards the structure sharing assumption and thus permits initial data-structure sharing, and then it describes two DSS unification algorithms.",
                    "sid": 145,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Revised Nondestructive Unifi(:ation This Mgorithm uses, instead of the node structure shown in Fig.",
                    "sid": 146,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3, the node structure in Fig.",
                    "sid": 147,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5.",
                    "sid": 148,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is, the algorithm uses two kinds of copy links: Icopy for the left input and rcopy for the right input.",
                    "sid": 149,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Tilt revised nondestructive unification procedure for typed feature structures is shown in Figs.",
                    "sid": 150,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6 and 7.",
                    "sid": 151,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given two root nodes of directed graphs, the top-level procedure Unify assigns a new unification process identifier, generation, and invokes Unify_Aux.",
                    "sid": 152,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This procedure first dereferences both input nodes.",
                    "sid": 153,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This dereference process differs from the original one in that it follows up fortvard and lcopy links for the left input node and forward and rcopy links for the right input node.",
                    "sid": 154,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This revised dereference process eliminates the first source of the structure-sharing problena.",
                    "sid": 155,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then Unify_A*tx calculates the meet of the type symbol.",
                    "sid": 156,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the meet is \u00b1, which means inconsistency, it finishes by returning _L Otherwise Unify_Auz obtains tilt output node and sets the meet as its tsymbol value.",
                    "sid": 157,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The output node is created only when neither input nodt is current; otherwise the output node is a current input node.",
                    "sid": 158,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then Un*fy_Aux treats arcs.",
                    "sid": 159,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This procedure assmnes the existence of two procedures: Share&Arc_Pair,s and Complement_Arcs.",
                    "sid": 160,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The former gives two lists of arcs each of which contains ares whose labels exist in both input nodes with the same are label order; the latter gives one list of arcs whose labels are unique to the first input node.",
                    "sid": 161,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each arc pair obtained by Shared_A re_Pairs, Unify_A ux applies itself recursively to the value pair.",
                    "sid": 162,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "And for each arc obtained by Complement_Ares, it copies its value.",
                    "sid": 163,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let us compare the newly introduced cost and the PROCEDURE Unify(nodcl, node2) generation *-- generation + 1 ; return( Un@_A ux( node l , node2)) ENDPROCEDURE PROCEDURE I/n(fy_Aux(nodel, node2) node1 +-- Dereference_L(nodel); node2 +-- Dereference_R( node2 ) ; IF node1 = node2 AND Currcnt_p(nodel) THEN return(node l) ENDIF newtsymbol ~-nodel.tsymbol A7 node2.tsymbol; IF newtsymbol = \u00b1 THEN return(\u00b1) ENDIF; newnode ~-- Get_Out_Node(node1, node2, newtaymbol); ( sares l , ,,'cs2} ~ ,~'hared_A rc_Pai,'s( node l , node2); caresl ~ Complement_Arcs(nodel, node2); cares2 *-Complement_Arcs(node2, node1); FOR (sarel,sarc2) IN (saresl,sarcs2} DO newvaluc ~-Unifg_Aux(sarcl, value, sarc2,value); IF ncwvalue-k THEN return(\u00b1) ELSE new~)al~te *-- Add_Arc(newnode, sarcl.label, newvalue); IF newvalue = \u00b1 THEN return(A_) ENDIF ENDIF ENDFOR; IF newnode # node l THEN FOR care IN carcst DO newvalue *-Copy_Node_L( carc.vah~e ); newnode ~-Add_Arc( ncwnodc, care.label, newvaluc) ENDFOR ELSE IF ncwnode \u02d8 node2 THEN FOR carc IN carcs2 DO newvahte +-- Copy_Nodc_l~(care.value); newnode Add_Arc( newnode, care.label, newvalue) ENDFOR ENDIF; rcturn(ncwnodc) ENDPROCEDURE PROCEDURE Dereference_L( node) IF Node_p(node.forward) THEN return(1)ereference_L( node.forward) ) ELSE IF Curret_Nade_p(node.lcopv ) \"/['HEN return( Dereferenec_L( node.lcopy) ) ELSE return(node) ENDIF ENDPROCEDURE Fig.",
                    "sid": 164,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6: The revised nondestructive unification procedure (1).",
                    "sid": 165,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "effect of this revision.",
                    "sid": 166,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This revised version differs from the original in thai, it uses two dereference procedures that are tile same as tim original dereference procedure except that they use different fields.",
                    "sid": 167,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, on the one hand, the overhead introduced to this revision is only the use of one additional field of the node structure.",
                    "sid": 168,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On the other hand, although this revised version does not introduce new data-structure sharing, it can safely' treat data-structure sharing in ini- PROCEDURE (;ct_Out_Node( node l , node& tsymbol) IF Current_p(nodel)AND Current_p(node2) THEN nodc2.forward +-- nodel; nodel.tsyrnbol ~-tsymbol; return( nodc [ ) ELSE IF Current_p(nodel) THEN node2.rcopy ~ nodeI ; node l, tsymbol ~-tsymbol; return( node l ) ELSE IF Current_p(node2) THEN nodel.h:opy ~-nodc2; node2.tsymbol ~-- tsymbol; return(node2) ELSE newnode ~-Creutc_NodeO; nodel.lcopy ~-newnode; nodel.rcopy ~ newnnde; newnode.tsymbol ~-tsgmbol; return( newnode ) ENDIF ENDPROCEDUR.E Fig.",
                    "sid": 169,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "7: The revised nondestructiw', unification procedure (2), tial data structures.",
                    "sid": 170,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This can significantly reduce the amount of initial data structures required for linguistic descriptions, especiMly for lexical descriptions, and thus reduce garbage-collection and page-sw~q)ping.",
                    "sid": 171,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Revised LING Unification L[N(I uniliet~tion is based on nondestructive unification and uses copy-dependency information to implement data-structure sharing.",
                    "sid": 172,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For a unique label arc, instead of its vMue being copied, the value itself is used as the output vMuc and copy-dependency relations are recorded to provide R)r later modification of shared structures.",
                    "sid": 173,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This algorithm uses a revised Copy~Node procedure that takes as its input two node structures (nodel and node2) and one arc structure, arc 1 where node.l is the node to be COl)ied.",
                    "sid": 174,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The structure arel is an arc to node J, and node t is an ancestor node of node.l -that is, the node fi'om which arel departs and the revised procedure is as follows: (i) if nodel' (the dereference result of node.t) is current, then Copy_Node returns nodel' to indicate that l, he ancestor node2 must be copied imme-.",
                    "sid": 175,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "diately; otherwise, (ii) Copy_Arcs is applied to node l' and if it returns several arc copies, Copy_Node creates a new copy node and then adds to the new node the arc copies and arcs of node[' that are not copied, and returns the ne.w node to indicate the an-eestor node having to be coiffed immediately; otherwise, (iii) Copy_Node registors the copy-dependency between the nodel' and the ancestor node node2 that is, it adds the pair consisting of the ancestor node node2 a.nd the arc arc I into the copy field of node 1 '- and returns Nil, to indicate that the ancestor must not be copied immediatelyfi When a new copy of a node is needed later, this algorithm will copy struceIn tile ],IN(-; unlfica.iton Mgorithm, ~t node structure's copy field is used to keep either copy iuform~ttion or copy- dependency inform~ttion.",
                    "sid": 176,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When tile', field keeps copy- dependency inform;ttion, its v~hle is a copydep structure consisting of an integer generation field- and a set of PROCEDURE Copy_Node_L(node, arc, ancestor) node ~-Derference_L( node); IF Current_p(node) THEN return( node); ELSE IF node.reuse: -\" rused THEN return( Simple_ Copy_Node_L( nodc ) ) ENDIF newarcs ~-Copy_A rcs_L( node); IF newarcs 5\u0141 0 THEN newnodc ~-Create_No&O; uewnode.tsymbol ~ node.tsymbol; node.lcopy ~-- newnode; FOIl.",
                    "sid": 177,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "arc IN nodc.arcs DO newarc *-- Find_Are( arc.labcl, newarcs); IF Arc_p(newarc) THEN newvalne ~-A dd_A rc( newnodc, arc.label, n eware, vahte ) ELSE newv(thte ~-A dd_Arc( ncwnode, arc.lab(l, are.value) ENDIF ENDFOR; return( newnode) ELSE IF Copydep_p(node.leopy)AND node.lcopy.generation = generation THEN n ode.",
                    "sid": 178,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Icopy.",
                    "sid": 179,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "deps ~-nod~2eopv.deps u {((,neestor, .r4}; node,rettsc ~--ltlsed; return(NIL) ELSE copydcp ~ Create_CopydePO; copydcp.gcneration ~ gcneration; ,'.opydep.d,,ps ,-- ((rLncesto,', are)}; node.leopy ,-.",
                    "sid": 180,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "eopydep; node.",
                    "sid": 181,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "reuse ~-lused; return(NIL) ENDIF ENDPROCEDUI1,E PROCEDURE Copy_Ares_L(node) newarcs ~-0; FOR arc IN node.arcs DO newnode ~-Copg_Nodc( arc. v(due, are, node); IF Nodc_p(newnode) THEN newarc ~ Create_Are(arc.label, newnode ); newarcs +-- newarcs U {newarc} ENDIF ENDFOR; ENDPROCEDUR,E Fig.",
                    "sid": 182,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "8: The new revised Copy_Node procedure.",
                    "sid": 183,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "tures by using the copy-depe,ldency information in its copy field (in the revised Get_Out_Node procedure for the 13NG unification).",
                    "sid": 184,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It substitutes arcs with newly copied nodes for existing arcs.",
                    "sid": 185,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus the antecedent nodes are also copied.",
                    "sid": 186,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The revised L[NCI unification is based on the revised nondestructive unification and uses a node structure consisting of the fields in the node structure shown in Fig.",
                    "sid": 187,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 and a new field reuse [br indicat node and arc pMrsdeps field (see Fig.",
                    "sid": 188,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3).",
                    "sid": 189,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The technique used to control tile lifetime of copy-dependency information is tile same as tha.t of copy information.",
                    "sid": 190,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That is, the deps field value is meaningN1 only when the generation vadne is equM to the unification process identifier.",
                    "sid": 191,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ing data-structure sharing status.",
                    "sid": 192,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When the top-level unification procedure is invoked, it sets two new symbols to the two variables lused and fused.",
                    "sid": 193,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That a node structure has as its reuse field value the lused value means that it is used as part of the left input, and that it has as its reuse value the rused value means that it is used as part of the right input,.",
                    "sid": 194,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The revised LING unification uses two new revised Copy_Node procedures, Copy_Node_L (shown in Fig.",
                    "sid": 195,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "8) and the analogons preocedure Copy_Node_It These procedures are respectively used to treat the left and right inputs and they differ from the corresponding original procedure in two places.",
                    "sid": 196,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First, instead of step (i) above, if ~odel' (the dereference result of no&l) is current, Cop?l_Node_l, (or Copy_Node_R) returns 7~ode l' to indicate that tire ancestor, node2, must be copied immediately.",
                    "sid": 197,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "But if node1' has as its reuse field value the fused (or lused) value, it creates a copy of the whole subgraph whose root is nodel'and returns the eopied structure also to indica~,c that the ancestor node must be copied immediately.",
                    "sid": 198,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Second, in step (iii), they register data-structure sharing status that is, they set the lused (or fused) value to the reuse field of node l\" as well as register copy-dependency information.",
                    "sid": 199,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This revised LING unification ensures safety in data-structure sharing.",
                    "sid": 200,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Again let us compare the newly introduced conrputational costs and the effect of l, his revision.",
                    "sid": 201,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The newly introduced costs are the additional cost of the revised dereference procedures (which is the same as in the previous one) and the cost of checking reuse status.",
                    "sid": 202,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The former cost is small, as shown in the discussion of the previous algorithm, ~nd the latter cost is also small.",
                    "sid": 203,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These costs are thus not significant relative to the efficiency gain obtained by this revision.",
                    "sid": 204,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Revised Quasi-Destructive Unification The strncturesharillg version of quasi-destructive unification keeps update information in the field meaningful only during l, he unification.",
                    "sid": 205,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After a suceessful unification is obtained, this algorithm copies the unification result and attempts data-structure sharing.",
                    "sid": 206,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This algorithm can be revised to ensure safety in dal, a-structurc sharing hy using a node structure including two sets of fields for update information and one reuse field and by checking node reuse status while eopying.",
                    "sid": 207,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "CONCLUSION The graph unification algorithms described ira this paper increase the efIiciency of feature structure unification by discarding tile assumption that data-structure sharing between two input structures nccurs only when the t~ature-structure sharing occurs lyetween the feature-addresses they represent.",
                    "sid": 208,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All graph unification algorithms proposed so far make this assumption and are therefore required to copy all or part of their input strucl, ures when there is a possibility of violating it.",
                    "sid": 209,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "'['his copying reduces their etIiciency.",
                    "sid": 210,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This pape.r analyzed this problem and points out key ideas for solving it.",
                    "sid": 211,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Revised procedures tbr nondestructive unification, LING unification, and quasi-destructive unification have been developed.",
                    "sid": 212,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These algorithms make the use of feature structures in constraint-based natural language processing mnch more elficient.",
                    "sid": 213,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The key ideas in this paper can also be used to make the incremental graph generalization algorithm (Kogure, 1993) more efficient,",
                    "sid": 214,
                    "ssid": 88,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgments",
            "number": "",
            "sents": [
                {
                    "text": "1 thank Akira Shimazu, Mikio Nakmto, and other colleagues in the Dialogue Understanding Group at the NTT Basic Research Laboratories for their encouragement and thought-prow)king discussions.",
                    "sid": 215,
                    "ssid": 89,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}