{
    "ID": "C90-2039",
    "citations": [
        {
            "Number": 1,
            "refer_ID": "C90-2039",
            "refer_sids": [
                21,
                22,
                23
            ],
            "refer_text": "itowever, the problem with his method is that a unitication result graph consists only of newly created structures.This is unnecessary because there are often input snbgraphs that can be used as part of the result graph without any modification, or as sharable parts between one of the input graphs and the result graph.Copying sharable parts is called redundant copying.",
            "cite_ID": "P99-1061",
            "cite_maker_sids": [
                48
            ],
            "cite_sids": [
                48
            ],
            "cite_text": "While an improvement over simple destructive unification, Tomabechi's approach still suffers from what Kogure (Kogure, 1990) calls redundant copying.",
            "label": [
                "Implication_Citation"
            ]
        },
        {
            "Number": 2,
            "refer_ID": "C90-2039",
            "refer_sids": [
                205,
                206
            ],
            "refer_text": "Furthermore, structure sharing increases the portion of token identical substructures of FSs which makes it efficient to keep unification results of substructures of FSs and reuse them.This reduces repeated calculation of substructures.",
            "cite_ID": "C90-3046",
            "cite_maker_sids": [
                102
            ],
            "cite_sids": [
                102,
                103
            ],
            "cite_text": "This is inefficient with many copy operations due to unfications of unnecessary features that do not contribute to successful unification [6].Thus treatments such as strategic unification [6] have been developed.",
            "label": [
                "Aim_Citation"
            ]
        },
        {
            "Number": 3,
            "refer_ID": "C90-2039",
            "refer_sids": [
                3
            ],
            "refer_text": "The other, called ti~e strategic incremental copy graph unification method, uses an early failure finding strategy which first tries to unify :;ubstructures tending to fail in unification; this method is; based on stochastic data on tim likelihood of failure and ,'educes unnecessary computation.",
            "cite_ID": "P91-1031",
            "cite_maker_sids": [
                49
            ],
            "cite_sids": [
                49
            ],
            "cite_text": "This observation is the basis for a reordering method proposed by Kogure [1990].",
            "label": [
                "Implication_Citation"
            ]
        },
        {
            "Number": 4,
            "refer_ID": "C90-2039",
            "refer_sids": [
                186,
                187,
                188
            ],
            "refer_text": "in this method, theretbre, the failure tendency information is acquired by a learning process.That is, the SING unification method applied in an analysis system uses the failure tendency information acquired by a learning analysis process.in the learning process, when FS unification is applied, feature treatment orders are randomized for the sake of random extraction.",
            "cite_ID": "P91-1031",
            "cite_maker_sids": [
                62
            ],
            "cite_sids": [
                62
            ],
            "cite_text": "Thus for any automatic counting scheme some constant shuffling and reshuffling of the conjunct order needs to be applied until the order stabilizes (see also [Kogure 1990]).",
            "label": [
                "Method_Citation"
            ]
        },
        {
            "Number": 5,
            "refer_ID": "C90-2039",
            "refer_sids": [
                39,
                40,
                78
            ],
            "refer_text": "This paper proposes an FS unification method that allows structure sharing with constant m'der node access time.This method achieves structure sharing by introducing lazy copying to Wroblewski's incremental copy graph unification method.Then, the unification of tl anti t2 is defined as their greatest lower bound or the meet.",
            "cite_ID": "E93-1008",
            "cite_maker_sids": [
                49
            ],
            "cite_sids": [
                49
            ],
            "cite_text": "The lazy copying approach ([Kogure, 1990], and [Emele, 1991] for lazy copying in TFS with historical backtracking) copies only overlapping parts of the structure.",
            "label": [
                "Method_Citation"
            ]
        },
        {
            "Number": 6,
            "refer_ID": "C90-2039",
            "refer_sids": [
                23,
                205
            ],
            "refer_text": "Copying sharable parts is called redundant copying.Furthermore, structure sharing increases the portion of token identical substructures of FSs which makes it efficient to keep unification results of substructures of FSs and reuse them.",
            "cite_ID": "C92-2068",
            "cite_maker_sids": [
                21
            ],
            "cite_sids": [
                21
            ],
            "cite_text": "\u2022 Data-Structure Sharing: Two or more distinct graphs share the same subgraph by converging on the same node the notion of structure-sharing at the data structure level. [Kogure, 1990] calls copying of such structures Redundant Copying.",
            "label": [
                "Method_Citation"
            ]
        },
        {
            "Number": 7,
            "refer_ID": "C90-2039",
            "refer_sids": [
                205
            ],
            "refer_text": "Furthermore, structure sharing increases the portion of token identical substructures of FSs which makes it efficient to keep unification results of substructures of FSs and reuse them.",
            "cite_ID": "P91-1041",
            "cite_maker_sids": [
                16
            ],
            "cite_sids": [
                16
            ],
            "cite_text": "2In the large-scale HPSG-based spoken Japanese analysis system developed at ATR, sometimes 98 percent of the elapsed time is devoted to graph unification ([Kogure, 1990]).",
            "label": [
                "Implication_Citation"
            ]
        },
        {
            "Number": 8,
            "refer_ID": "C90-2039",
            "refer_sids": [
                11,
                14
            ],
            "refer_text": "For example, a spoken Present.Japanese analysis system based on llPSG[Kogure 891 uses 90% - 98% of the elapsed time in FS unification.",
            "cite_ID": "P91-1041",
            "cite_maker_sids": [
                230
            ],
            "cite_sids": [
                230
            ],
            "cite_text": "That is, unless some new scheme for reducing excessive copying is introduced such as scucture-sharing of an unchanged shared-forest ([Kogure, 1990]).",
            "label": [
                "Results_Citation"
            ]
        },
        {
            "Number": 9,
            "refer_ID": "C90-2039",
            "refer_sids": [
                203,
                22,
                23,
                24
            ],
            "refer_text": "The LING unification method achieves structure sharing without the O(log d) data access overhead of Pereira's method.This is unnecessary because there are often input snbgraphs that can be used as part of the result graph without any modification, or as sharable parts between one of the input graphs and the result graph.Copying sharable parts is called redundant copying.A better method would nfinimize the copying of sharable varts.",
            "cite_ID": "C94-2143",
            "cite_maker_sids": [
                56
            ],
            "cite_sids": [
                56
            ],
            "cite_text": "A more eNcient unification algorithm would avoid this redundant copying (copying structures that can be shared by the input and resultant graphs) (Kogure, 1990).",
            "label": [
                "Method_Citation"
            ]
        },
        {
            "Number": 10,
            "refer_ID": "C90-2039",
            "refer_sids": [
                22,
                23,
                24
            ],
            "refer_text": "This is unnecessary because there are often input snbgraphs that can be used as part of the result graph without any modification, or as sharable parts between one of the input graphs and the result graph.Copying sharable parts is called redundant copying.A better method would nfinimize the copying of sharable varts.",
            "cite_ID": "C94-2143",
            "cite_maker_sids": [
                69
            ],
            "cite_sids": [
                69
            ],
            "cite_text": "Kogure (1990) proposed a lazy incremental copy graph (LING) unification that uses dependency-directed eol)yiug",
            "label": [
                "Method_Citation"
            ]
        },
        {
            "Number": 11,
            "refer_ID": "C90-2039",
            "refer_sids": [
                23,
                24
            ],
            "refer_text": "Copying sharable parts is called redundant copying.A better method would nfinimize the copying of sharable varts.",
            "cite_ID": "P91-1042",
            "cite_maker_sids": [
                37
            ],
            "cite_sids": [
                37
            ],
            "cite_text": "A better method would avoid (eliminate) such redundant copying as it is called by [Kogure 90].",
            "label": [
                "Implication_Citation"
            ]
        },
        {
            "Number": 12,
            "refer_ID": "C90-2039",
            "refer_sids": [
                23,
                141,
                142
            ],
            "refer_text": "Copying sharable parts is called redundant copying.5 disables structure sharing, ttowever, this whole copying is not necessary if a lazy evaluation method is used.With such a method, it is possible to delay copying a node until either its own contents need to change (e.g., node G3/Ka c !7>) or until it is found to have an arc (sequence) to a node t, hat needs to be copied (e.g., node X G3/<a c> in Fig.",
            "cite_ID": "P91-1042",
            "cite_maker_sids": [
                116
            ],
            "cite_sids": [
                116,
                117,
                118,
                124
            ],
            "cite_text": "As it has been noticed by [Godden 90] and [Kogure 90], the key idea of avoiding \"redundant copying\" is to do copying lazily.Copying of nodes will be delayed until a destructive change is about to take place.Kogure uses a revised copynode procedure which maintains copy dependency information in order to avoid immediate copying.Similarly, in Kogure's approach, not all redundant copying is avoided in cases where there exists a feature path (a sequence of nodes connected by arcs) to a node that needs to be copied.",
            "label": [
                "Aim_Citation"
            ]
        },
        {
            "Number": 13,
            "refer_ID": "C90-2039",
            "refer_sids": [
                24
            ],
            "refer_text": "A better method would nfinimize the copying of sharable varts.",
            "cite_ID": "W97-1503",
            "cite_maker_sids": [
                136
            ],
            "cite_sids": [
                136
            ],
            "cite_text": "PM can also choose among different unification algorithms that have been designed to: * carefully control and minimize the amount of copying needed with non-deterministic parsing schemata (Wroblewski, 1987) (Kogure, 1990);",
            "label": [
                "Method_Citation"
            ]
        }
    ]
}