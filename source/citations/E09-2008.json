{
    "ID": "E09-2008",
    "citations": [
        {
            "Number": 1,
            "refer_ID": "E09-2008",
            "refer_sids": [
                5
            ],
            "refer_text": "Foma is a finite-state compiler, programming language, and regular expression/finite-state library designed for multipurpose use with explicit support for automata theoretic research, constructing lexical analyzers for programming languages, and building morphological/phonological analyzers, as well as spellchecking applications.",
            "cite_ID": "N13-1140",
            "cite_maker_sids": [
                161
            ],
            "cite_sids": [
                161
            ],
            "cite_text": "Recently, open-source tools have been released: in this paper, we used Foma (Hulden, 2009) to develop the Russian guesser.",
            "label": [
                "Method_Citation"
            ]
        },
        {
            "Number": 2,
            "refer_ID": "E09-2008",
            "refer_sids": [
                6
            ],
            "refer_text": "The compiler allows users to specify finite-state automata and transducers incrementally in a similar fashion to AT&T\u00e2\u20ac\u2122s fsm (Mohri et al., 1997) and Lextools (Sproat, 2003), the Xerox/PARC finite- state toolkit (Beesley and Karttunen, 2003) and the SFST toolkit (Schmid, 2005).",
            "cite_ID": "W11-2605",
            "cite_maker_sids": [
                73
            ],
            "cite_sids": [
                73
            ],
            "cite_text": "The rules that are learned are in the format of so-called phonological replacement rules (Beesley and Karttunen, 2002) which we have later converted into equivalent finite-state transducers using the freely available foma toolkit (Hulden, 2009a).",
            "label": [
                "Method_Citation"
            ]
        },
        {
            "Number": 3,
            "refer_ID": "E09-2008",
            "refer_sids": [
                9
            ],
            "refer_text": "Foma is licensed under the GNU general public license: in keeping with traditions of free software, the distribution that includes the source code comes with a user manual and a library of examples.",
            "cite_ID": "W12-1003",
            "cite_maker_sids": [
                43
            ],
            "cite_sids": [
                43
            ],
            "cite_text": "The syllable counter is implemented using the foma software (Hulden, 2009), and the implementation (Hulden, 2006) can be found on the homepage of Figure 1: A verse written in the BAD web application.",
            "label": [
                "Method_Citation"
            ]
        },
        {
            "Number": 4,
            "refer_ID": "E09-2008",
            "refer_sids": [
                48
            ],
            "refer_text": "Though the main concern with Foma has not been that of efficiency, but of compatibility and extendibility, from a usefulness perspective it is important to avoid bottlenecks in the underlying algorithms that can cause compilation times to skyrocket, especially when constructing and combining large lexical transducers.",
            "cite_ID": "W12-6202",
            "cite_maker_sids": [
                124
            ],
            "cite_sids": [
                124
            ],
            "cite_text": "Since the question of transducer functionality is known to be decidable (Blattner and Head, 1977), and an efficient algorithm is given in Hulden (2009a), which is included in foma (with the command test functional) we can address this question by calculating the above for each constraint, if necessary, and then permute the violation markers until the above transducer is functional.",
            "label": [
                "Method_Citation"
            ]
        },
        {
            "Number": 5,
            "refer_ID": "E09-2008",
            "refer_sids": [
                9
            ],
            "refer_text": "Foma is licensed under the GNU general public license: in keeping with traditions of free software, the distribution that includes the source code comes with a user manual and a library of examples.",
            "cite_ID": "W12-6211",
            "cite_maker_sids": [
                49
            ],
            "cite_sids": [
                49
            ],
            "cite_text": "Foma (Hulden, 2009) is a freely available2 toolkit that allows to both build and parse FS automata and transducers.",
            "label": [
                "Method_Citation"
            ]
        },
        {
            "Number": 6,
            "refer_ID": "E09-2008",
            "refer_sids": [
                3
            ],
            "refer_text": "Foma is largely compatible with the Xerox/PARC finite-state toolkit.",
            "cite_ID": "W12-6212",
            "cite_maker_sids": [
                22
            ],
            "cite_sids": [
                22
            ],
            "cite_text": "This verb chain transfer module is implemented as a series of ordered replacement rules (Beesley and Karttunen, 2003) using the foma finite-state toolkit (Hulden, 2009).",
            "label": [
                "Method_Citation"
            ]
        },
        {
            "Number": 7,
            "refer_ID": "E09-2008",
            "refer_sids": [
                3
            ],
            "refer_text": "Foma is largely compatible with the Xerox/PARC finite-state toolkit.",
            "cite_ID": "W12-6212",
            "cite_maker_sids": [
                80
            ],
            "cite_sids": [
                80
            ],
            "cite_text": "In the work presented here, we have reimplemented and expanded the original rules written for XFST with the foma2 toolkit (Hulden, 2009).",
            "label": [
                "Method_Citation"
            ]
        },
        {
            "Number": 8,
            "refer_ID": "E09-2008",
            "refer_sids": [
                15
            ],
            "refer_text": "This makes it straightforward to build spell-checkers from morphological transducers by simply extracting the range of the transduction and matching words approximately.",
            "cite_ID": "W12-6213",
            "cite_maker_sids": [
                77
            ],
            "cite_sids": [
                77
            ],
            "cite_text": "This can be then be used in spell checking applications, for example, by integrating the lexicon with weighted transduc ers reflecting frequency information and error models (Hulden, 2009a; Pirinen et al., 2010).",
            "label": [
                "Method_Citation"
            ]
        }
    ]
}