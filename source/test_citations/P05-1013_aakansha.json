{
    "ID": "P05-1013",
    "citations": [
        {
            "Number": 1,
            "refer_ID": "P05-1013",
            "refer_sids": [
                20
            ],
            "refer_text": "In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.",
            "cite_ID": "W05-1505",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "Recent work by Nivre and Nilsson introduces a technique where the projectivization transformation is encoded in the non-terminals of constituents during parsing (Nivre and Nilsson, 2005)",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 2,
            "refer_ID": "P05-1013",
            "refer_sids": [
                24
            ],
            "refer_text": "We call this pseudoprojective dependency parsing, since it is based on a notion of pseudo-projectivity (Kahane et al., 1998).",
            "cite_ID": "P08-1006",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "1http: //sourceforge.net/projects/mstparser Figure 1: CoNLL-X dependency tree Figure 2: Penn Treebank-style phrase structure tree KSDEP Sagae and Tsujii (2007)? s dependencyparser,2 based on a probabilistic shift-reduce algorithm extended by the pseudo-projective parsing technique (Nivre and Nilsson, 2005)",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 3,
            "refer_ID": "P05-1013",
            "refer_sids": [
                106
            ],
            "refer_text": "However, the accuracy is considerably higher than previously reported results for robust non-projective parsing of Czech, with a best performance of 73% UAS (Holan, 2004).",
            "cite_ID": "W10-1401",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 4,
            "refer_ID": "P05-1013",
            "refer_sids": [
                86
            ],
            "refer_text": "As expected, the most informative encoding, Head+Path, gives the highest accuracy with over 99% of all non-projective arcs being recovered correctly in both data sets.",
            "cite_ID": "P12-3029",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "For tree banks with non-projective trees weuse the pseudo-projective parsing technique to trans form the tree bank into projective structures (Nivre and Nilsson, 2005)",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 5,
            "refer_ID": "P05-1013",
            "refer_sids": [
                20
            ],
            "refer_text": "In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.",
            "cite_ID": "W10-1403",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "It uses graph transformation to handle non-projective trees (Nivre and Nilsson, 2005)",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 6,
            "refer_ID": "P05-1013",
            "refer_sids": [
                36
            ],
            "refer_text": "As observed by Kahane et al. (1998), any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation, which replaces each non-projective arc wj wk by a projective arc wi \u2014* wk such that wi \u2014*\u2217 wj holds in the original graph.",
            "cite_ID": "D08-1008",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "To simplify implementation, we instead opted for the pseudo-projective approach (Nivre and Nilsson,2005), in which non projective links are lifted upwards in the tree to achieve projectivity, and special trace labels are used to enable recovery of the non projective links at parse time",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 7,
            "refer_ID": "P05-1013",
            "refer_sids": [
                109
            ],
            "refer_text": "We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.",
            "cite_ID": "D07-1013",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": ",wn in O (n) time, producing a projective dependency graph satisfying conditions 1? 4 in section 2.1, possibly after adding arcs (0, i ,lr) for every node i 6= 0 that is a root in the output graph (where lr is a special label for root modifiers) .Nivre and Nilsson (2005) showed how the restriction to projective dependency graphs could be lifted by using graph transformation techniques to pre process training data and post-process parser output, so-called pseudo-projective parsing. To learn transition scores, these systems use discriminative learning methods ,e.g., memory-based learning or support vector machines",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 8,
            "refer_ID": "P05-1013",
            "refer_sids": [
                36
            ],
            "refer_text": "As observed by Kahane et al. (1998), any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation, which replaces each non-projective arc wj wk by a projective arc wi \u2014* wk such that wi \u2014*\u2217 wj holds in the original graph.",
            "cite_ID": "D07-1119",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "For handling non-projective relations, Nivre and Nilsson (2005) suggested applying a preprocessing step to a dependency parser, which consists in lifting non-projective arcs to their head repeatedly, until the tree becomes pseudo-projective",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 9,
            "refer_ID": "P05-1013",
            "refer_sids": [
                23
            ],
            "refer_text": "By applying an inverse transformation to the output of the parser, arcs with non-standard labels can be lowered to their proper place in the dependency graph, giving rise 1The dependency graph has been modified to make the final period a dependent of the main verb instead of being a dependent of a special root node for the sentence. to non-projective structures.",
            "cite_ID": "N07-1050",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "Whereas most of the early approaches were limited to strictly projective dependency structures, where the projection of a syntactic head must be continuous, attention has recently shifted to the analysis of non-projective structures, which are required for linguistically adequate representations, especially in languages with free or flexible word order. The most popular strategy for capturing non projective structures in data-driven dependency parsing is to apply some kind of post-processing to the output of a strictly projective dependency parser, as in pseudo-projective parsing (Nivre and Nilsson, 2005), corrective modeling (Hall and Nova? k, 2005), or approximate non-projective parsing (McDonald and Pereira, 2006)",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 10,
            "refer_ID": "P05-1013",
            "refer_sids": [
                24
            ],
            "refer_text": "We call this pseudoprojective dependency parsing, since it is based on a notion of pseudo-projectivity (Kahane et al., 1998).",
            "cite_ID": "W09-1207",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "troduced in (Nivre and Nilsson, 2005) to handle the non-projective languages including Czech, German and English",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 11,
            "refer_ID": "P05-1013",
            "refer_sids": [
                80,
                81
            ],
            "refer_text": "As shown in Table 3, the proportion of sentences containing some non-projective dependency ranges from about 15% in DDT to almost 25% in PDT.\nHowever, the overall percentage of non-projective arcs is less than 2% in PDT and less than 1% in DDT.",
            "cite_ID": "E09-1034",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "non projective (Nivre and Nilsson, 2005), we char ac terise a sense in which the structures appearing in tree banks can be viewed as being only? slightly? ill-nested",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 12,
            "refer_ID": "P05-1013",
            "refer_sids": [
                24
            ],
            "refer_text": "We call this pseudoprojective dependency parsing, since it is based on a notion of pseudo-projectivity (Kahane et al., 1998).",
            "cite_ID": "W09-1218",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "In order to avoid losing the benefits of higher-order parsing, we considered applying pseudo-projective transformation (Nivre and Nilsson, 2005)",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 13,
            "refer_ID": "P05-1013",
            "refer_sids": [
                20
            ],
            "refer_text": "In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.",
            "cite_ID": "C08-1081",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "Pseudo-projective parsing for recovering non projective structures (Nivre and Nilsson, 2005)",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 14,
            "refer_ID": "P05-1013",
            "refer_sids": [
                24
            ],
            "refer_text": "We call this pseudoprojective dependency parsing, since it is based on a notion of pseudo-projectivity (Kahane et al., 1998).",
            "cite_ID": "C08-1081",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 15,
            "refer_ID": "P05-1013",
            "refer_sids": [
                20
            ],
            "refer_text": "In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.",
            "cite_ID": "C08-1081",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "Pseudo-projective parsing was proposed by Nivreand Nilsson (2005) as a way of dealing with non projective structures in a projective data-driven parser",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 16,
            "refer_ID": "P05-1013",
            "refer_sids": [
                49
            ],
            "refer_text": "The baseline simply retains the original labels for all arcs, regardless of whether they have been lifted or not, and the number of distinct labels is therefore simply the number n of distinct dependency types.2 In the first encoding scheme, called Head, we use a new label d\u2191h for each lifted arc, where d is the dependency relation between the syntactic head and the dependent in the non-projective representation, and h is the dependency relation that the syntactic head has to its own head in the underlying structure.",
            "cite_ID": "C08-1081",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "Weprojectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r? h, where r is the original label and h is the label of the original head in the non-projective dependency graph",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 17,
            "refer_ID": "P05-1013",
            "refer_sids": [
                109
            ],
            "refer_text": "We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.",
            "cite_ID": "D11-1006",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 18,
            "refer_ID": "P05-1013",
            "refer_sids": [
                14
            ],
            "refer_text": "While the proportion of sentences containing non-projective dependencies is often 15\u201325%, the total proportion of non-projective arcs is normally only 1\u20132%.",
            "cite_ID": "P11-2121",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases",
            "label": [
                "method_Citation"
            ]
        },
        {
            "Number": 20,
            "refer_ID": "P05-1013",
            "refer_sids": [
                20
            ],
            "refer_text": "In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.",
            "cite_ID": "D07-1111",
            "cite_maker_sids": [
                0
            ],
            "cite_sids": [
                0
            ],
            "cite_text": "The resulting algorithm is projective, and nonprojectivity is handled by pseudo-projective trans formations as described in (Nivre and Nilsson, 2005)",
            "label": [
                "method_Citation"
            ]
        }
    ]
}