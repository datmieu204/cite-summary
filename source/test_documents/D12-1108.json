{
    "ID": "D12-1108",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Document-Wide Decoding for Phrase-Based Statistical Machine Translation",
                    "sid": 0,
                    "ssid": null,
                    "kind_of_tag": "s"
                },
                {
                    "text": "any obvious way, especially if joint optimisation of a number of interdependent decisions over an entire document is required.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Research into models with a more varied, non-local dependency structure is to some extent stifled by the difficulty of decoding such models effectively, as can be seen by the problems some researchers encountered when they attempted to solve discourse-level problems.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Consider, for instance, the work on cache-based language models by Tiedemann (2010) and Gong et al. (2011), where error propagation was a serious issue, or the works on pronominal anaphora by Le Nagard and Koehn (2010), who implemented cross-sentence dependencies with an ad-hoc two-pass decoding strategy, and Hardmeier and Federico (2010) with the use of an external decoder driver to manage backward-only dependencies between sentences.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we present a method for decoding complete documents in phrase-based SMT.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our decoder uses a local search approach whose state consists of a complete translation of an entire document at any time.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The initial state is improved by the application of a series of operations using a hill climbing strategy to find a (local) maximum of the score function.",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This setup gives us complete freedom to define scoring functions over the entire document.",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, by optionally initialising the state with the output of a traditional DP decoder, we can ensure that the final hypothesis is no worse than what would have been found by DP search alone.",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We start by describing the decoding algorithm and the state operations used by our decoder, then we present empirical results demonstrating the effectiveness of our approach and its usability with a document-level semantic language model, and finally we discuss some related work.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2 SMT Decoding by Hill Climbing In this section, we formally describe the phrasebased SMT model implemented by our decoder as well as the decoding algorithm we use.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.1 SMT Model Our decoder is based on local search, so its state at any time is a representation of a complete translation of the entire document.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Even though the decoder operates at the document level, it is important to keep track of sentence boundaries, and the individual operations that are applied to the state are still confined to sentence scope, so it is useful to decompose the state of a document into the state of its sentences, we define the overall state a sequence of sentence states: the number of sentences.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This implies that we constrain the decoder to emit exactly one output sentence per input sentence. the number of a sentence and numof input tokens of this sentence, be positions in the input sentence the set of positions from to and We say that or if Let the set of translations for the source phrase covering positions the input sentence given by the phrase We call phrase coverage = a target phrase translating the source words at posi- Then a sequence of phrase pairs a valid sentence state for sentence the following two conditions hold: The coverage sets mutually disjoint, and 2. the anchored phrase pairs jointly cover the complete input sentence, or = a scoring function mapping a state to a real number.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As usual in SMT, it is assumed that the scoring function can be decomposed into a linear of functions each with constant weight so K = The problem addressed by the decoder is the search the state maximal score, such that 1180 The feature functions implemented in our baseline system are identical to the ones found in the popular Moses SMT system (Koehn et al., 2007).",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, our decoder has the following feature functions: 1. phrase translation scores provided by the phrase table including forward and backward conditional probabilities, lexical weights and a phrase penalty (Koehn et al., 2003), 2. n-gram language model scores implemented with the KenLM toolkit (Heafield, 2011), 3. a word penalty score, 4. a distortion model with geometric decay (Koehn et al., 2003), and 5. a feature indicating the number of times a given distortion limit is exceeded in the current state.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our experiments, the last feature is used with a fixed weight of negative infinity in order to limit the gaps between the coverage sets of adjacent anchored phrase pairs to a maximum value.",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In DP search, the distortion limit is usually enforced directly by the search algorithm and is not added as a feature.",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our decoder, however, this restriction is not required to limit complexity, so we decided to add it among the scoring models.",
                    "sid": 18,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.2 Decoding Algorithm The decoding algorithm we use (algorithm 1) is very simple.",
                    "sid": 19,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It starts with a given initial document state.",
                    "sid": 20,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the main loop, which extends from line 3 line 12, it generates a successor state for the state calling the function which non-deterministically applies one of the operdescribed in section 3 of this paper to The score of the new state is compared to that of the previous one.",
                    "sid": 21,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If it meets a given acceptance criterion, the current state, else search continues the previous state For the experiments in paper, we use the climbing acceptance criwhich simply accepts a new state if its score is higher than that of the current state.",
                    "sid": 22,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Other acceptance criteria are possible and could be used to endow the search algorithm with stochastic behaviour.",
                    "sid": 23,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The main loop is repeated until a maximum numof steps is reached or until a maxinumber of moves are rejected in a row 1 algorithm initial document state parameters modified document state nsteps nrejected while 4: \u2190 if S nrejected 8: else nrejected 10: end if nsteps 12: end while return A notable difference between this algorithm and other hill climbing algorithms that have been used for SMT decoding (Germann et al., 2004; Langlais et al., 2007) is its non-determinism.",
                    "sid": 24,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Previous work sentence-level decoding employed a aswhich amounts to enumerating the complete neighbourhood of the current state as defined by the state operations and selecting the next state to be the best state found in the neighbourhood of the current one.",
                    "sid": 25,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Enumerating all neighbours of a given state, costly as it is, has the advantage that it makes it easy to prove local optimality of a state by recognising that all possible successor states have lower scores.",
                    "sid": 26,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It can be rather inefficient, since at every step only one modification will be adopted; many of the modifications that are discarded will very likely be generated anew in the next iteration.",
                    "sid": 27,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As we extend the decoder to the document level, the size of the neighbourhood that would have to be explored in this way increases considerably.",
                    "sid": 28,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, the inefficiency of the steepest ascent approach potentially increases as well.",
                    "sid": 29,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Very likely, a promising move in one sentence will remain promising afa modification has been applied to another sen- 1181 tence, even though this is not guaranteed to be true in the presence of cross-sentence models.",
                    "sid": 30,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We thereadopt a hill climbing that non-deterministically generates successor states and accepts the first one that meets the acceptance criterion.",
                    "sid": 31,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This frees us from the necessity of generating the full set of successors for each state.",
                    "sid": 32,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On the downside, if the full successor set is not known, it is no longer possible to prove local optimality of a state, so we are forced to use a different condition for halting the search.",
                    "sid": 33,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use a combination of two limits: The step limit is a hard limit on the resources the user is willing to expend on the search problem.",
                    "sid": 34,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The value of the rejection limit determines how much of the neighbourhood is searched for better successors before a state is accepted as a solution; it is related to the probability that a state returned as a solution is in fact locally optimal.",
                    "sid": 35,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To simplify notations in the description of the individual state operations, we write (6) i to signify that a state operation, when presented with a document state as in equation 1 and acting on senreturns a new document state of Similarly, is equivalent to (9) and indicates that the operation returns a state in a sequence of anchored phrase has been replaced by another sequence of anchored phrase pairs.",
                    "sid": 36,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.3 Efficiency Considerations When implementing the feature functions for the decoder, we have to exercise some care to avoid recomputing scores for the whole document at every iteration.",
                    "sid": 37,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To achieve this, the scores are computed completely only once, at the beginning of the decoding run.",
                    "sid": 38,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In subsequent iterations, scoring functions are presented with the scores of the previous iteration and a list of modifications produced by the operation, a set of tuples each indicating that the document should be modified as described by \u2212\u2192 If a feature function is decomposable in some way, as all the standard features developed under the constraints of DP search are, it can then update the state simply by subtracting and adding score components pertaining to the modified parts of the document.",
                    "sid": 39,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Feature functions have the possibility to store their own state information along with the document state to make sure the required information is available.",
                    "sid": 40,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, the framework makes it possible to exploit decomposability for efficient scoring without imposing any particular decomposition on the features as beam search does.",
                    "sid": 41,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To make scoring even more efficient, scores are computed in two passes: First, every feature function is asked to provide an upper bound on the score that will be obtained for the new state.",
                    "sid": 42,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In some cases, it is possible to calculate reasonable upper bounds much more efficiently than computing the exact feature value.",
                    "sid": 43,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the upper bound fails to meet the acceptance criterion, the new state is discarded right away; if not, the full score is computed and the acceptance criterion is tested again.",
                    "sid": 44,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Among the basic SMT models, this two-pass strategy is only used for the n-gram LM, which requires fairly expensive parameter lookups for scoring.",
                    "sid": 45,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The scores of all the other baseline models are fully computed during the first scoring pass.",
                    "sid": 46,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The n-gram model is more complex.",
                    "sid": 47,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In its state information, it keeps track of the LM score and LM library state for each word.",
                    "sid": 48,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first scoring pass then identifies the words whose LM scores are affected by the current search step.",
                    "sid": 49,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This includes the words changed by the search operation as well as the words whose LM history is modified.",
                    "sid": 50,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The range of the history dependencies can be determined precisely by considering the \u201cvalid state length\u201d information provided by the KenLM library.",
                    "sid": 51,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the first pass, the LM scores of the affected words are subtracted from the total score.",
                    "sid": 52,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model only looks up the new LM scores for the affected words and updates the total score if the new search state passes the first acceptance check.",
                    "sid": 53,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This two-pass scoring approach allows us 1182 to avoid LM lookups altogether for states that will be rejected anyhow because of low scores from the other models, e. g. because the distortion limit is violated.",
                    "sid": 54,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Model score updates become more complex and slower as the number of dependencies of a model increases.",
                    "sid": 55,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While our decoding algorithm does not impose any formal restrictions on the number or type of dependencies that can be handled, there will be practical limits beyond which decoding becomes unacceptably slow or the scoring code becomes very difficult to maintain.",
                    "sid": 56,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These limits are however fairly independent of the types of dependencies handled by a model, which permits the exploration of more varied model types than those handled by DP search.",
                    "sid": 57,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.4 State Initialisation Before the hill climbing decoding algorithm can be run, an initial state must be generated.",
                    "sid": 58,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The closer the initial state is to an optimum, the less work remains to be done for the algorithm.",
                    "sid": 59,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the algorithm is to be self-contained, initialisation must be relatively uninformed and can only rely on some general prior assumptions about what might be a good initial guess.",
                    "sid": 60,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On the other hand, if optimal results are sought after, it pays off to invest some effort into a good starting point.",
                    "sid": 61,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One way to do this is to run DP search first.",
                    "sid": 62,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For uninformed initialisation, we chose to implement a very simple procedure based only on the observation that, at least for language pairs involving the major European languages, it is usually a good guess to keep the word order of the output very similar to that of the input.",
                    "sid": 63,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We therefore create the initial state by selecting, for each sentence in the document, a sequence of anchored phrase pairs covering the input sentence in monotonic order, that is, such that for all pairs of adjacent anchored phrase pairs we have that For initialisation with DP search, we first run the Moses decoder (Koehn et al., 2007) with default search parameters and the same models as those used by our decoder.",
                    "sid": 64,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then we extract the best output hypothesis from the search graph of the decoder and map it into a sequence of anchored phrase pairs in the obvious way.",
                    "sid": 65,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When the document-level decoder is used with models that are incompatible with beam search, Moses can be run with a subset of the models in order to find an approximation of the solution which is then refined with the complete feature set.",
                    "sid": 66,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3 State Operations a document state the decoder uses a neighfunction simulate a move in the state space.",
                    "sid": 67,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The neighbourhood function nondeterministically selects a type of state operation and a location in the document to apply it to and returns the resulting new state.",
                    "sid": 68,
                    "ssid": 68,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use a set of three operations that has the property that every possible document state can be reached from every other state in a sequence of moves.",
                    "sid": 69,
                    "ssid": 69,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Designing operations for state transitions in local search for phrase-based SMT is a problem that has been addressed in the literature (Langlais et al., 2007; Arun et al., 2010).",
                    "sid": 70,
                    "ssid": 70,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our decoder\u2019s firstchoice hill climbing strategy never enumerates the full neighbourhood of a state.",
                    "sid": 71,
                    "ssid": 71,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We therefore place less emphasis than previous work on defining a compact neighbourhood, but allow the decoder to make quite extensive changes to a state in a single step with a certain probability.",
                    "sid": 72,
                    "ssid": 72,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Otherwise our operations are similar to those used by Arun et al. (2010).",
                    "sid": 73,
                    "ssid": 73,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All of the operations described in this paper make changes to a single sentence only.",
                    "sid": 74,
                    "ssid": 74,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each time it is the selects a sentence in the document with a probability proportional to the number of input tokens in each sentence to ensure a fair distribution of the decoder\u2019s attention over the words in the document regardless of varying sentence lengths.",
                    "sid": 75,
                    "ssid": 75,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.1 Changing Phrase Translations replaces the translation of a single phrase with a random translation with the same coverage taken from the phrase table.",
                    "sid": 76,
                    "ssid": 76,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Formally, the operation selects an phrase pair drawing uniformly from elements of then draws a new translation from the set The new state is given by 3.2 Changing Word Order affects the output word order without changing the phrase translations.",
                    "sid": 77,
                    "ssid": 77,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1183 exchanges two anchored phrase pairs resulting in an output state of start location drawn uniformly from the elsentence positions; the swap range from a geometric distribution with configurable decay.",
                    "sid": 78,
                    "ssid": 78,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Other word-order changes such as a one-way move operation that does not require another movement in exchange or more advanced permutations can easily be defined.",
                    "sid": 79,
                    "ssid": 79,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.3 Resegmentation most complex operation is which allows the decoder to modify the segmentation of the source phrase.",
                    "sid": 80,
                    "ssid": 80,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It takes a number of anchored phrase pairs that form a contiguous block both in the input and in the output and replaces them with a new set of phrase pairs covering the same span of the input sentence.",
                    "sid": 81,
                    "ssid": 81,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Formally, such that = = some where, for we that all mudisjoint and each randomly drawn from of the ordering of the always generates a sequence of anchored phrase pairs in linear order, such that --< for the other operations, generated uniand drawn from a geometric distribution with a decay parameter.",
                    "sid": 82,
                    "ssid": 82,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The new segmentation is generated by extending the sequence of anchored phrase pairs with random elements starting at the next free position, proceeding from left to right until whole range covered.",
                    "sid": 83,
                    "ssid": 83,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4 Experimental Results In this section, we present the results of a series of experiments with our document decoder.",
                    "sid": 84,
                    "ssid": 84,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The goal of our experiments is to demonstrate the behaviour of the decoder and characterise its response to changes in the fundamental search parameters.",
                    "sid": 85,
                    "ssid": 85,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The SMT models for our experiments were created with a subset of the training data for the English-French shared task at the WMT 2011 workshop (Callison-Burch et al., 2011).",
                    "sid": 86,
                    "ssid": 86,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The phrase table was trained on Europarl, news-commentary and UN data.",
                    "sid": 87,
                    "ssid": 87,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To reduce the training data to a manageable size, singleton phrase pairs were removed before the phrase scoring step.",
                    "sid": 88,
                    "ssid": 88,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Significance-based filtering (Johnson et al., 2007) was applied to the resulting phrase table.",
                    "sid": 89,
                    "ssid": 89,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The language model was a 5gram model with Kneser-Ney smoothing trained on the monolingual News corpus with IRSTLM (Federico et al., 2008).",
                    "sid": 90,
                    "ssid": 90,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Feature weights were trained with Minimum Error-Rate Training (MERT) (Och, 2003) on the news-test2008 development set using the DP beam search decoder and the MERT implementation of the Moses toolkit (Koehn et al., 2007).",
                    "sid": 91,
                    "ssid": 91,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Experimental results are reported for the newstest2009 test set, a corpus of 111 newswire documents totalling 2,525 sentences or 65,595 English input tokens.",
                    "sid": 92,
                    "ssid": 92,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.1 Stability An important difference between our decoder and the classical DP decoder as well as previous work in SMT decoding with local search is that our decoder is inherently non-deterministic.",
                    "sid": 93,
                    "ssid": 93,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This implies that repeated runs of the decoder with the same search parameters, input and models will not, in general, find the same local maximum of the score space.",
                    "sid": 94,
                    "ssid": 94,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first empirical question we ask is therefore how different the results are under repeated runs.",
                    "sid": 95,
                    "ssid": 95,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The results in this and the next section were obtained with random state initialisation, i. e. without running the DP beam search decoder.",
                    "sid": 96,
                    "ssid": 96,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 1 shows the results of 7 decoder runs with the models described above, translating the newstest set, with a step limit of a rejeclimit of 100,000.",
                    "sid": 97,
                    "ssid": 97,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The of both plots shows the number of decoding steps on a logarithmic scale, so the number of steps is doubled between two adjacent points on the same curve.",
                    "sid": 98,
                    "ssid": 98,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the left plot, the indicates the model score optimised by the decoder summed over all 2525 sentences of the document.",
                    "sid": 99,
                    "ssid": 99,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the right plot, the case-sensitive BLEU score (Papineni et al., 2002) of the current decoder 1184 Figure 1: Score stability in repeated decoder runs state against a reference translation is displayed.",
                    "sid": 100,
                    "ssid": 100,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We note, as expected, that the decoder achieves a considerable improvement of the initial state with diminishing returns as decoding continues.",
                    "sid": 101,
                    "ssid": 101,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Beand steps, the score increases at a roughly logarithmic pace, then the curve flattens out, which is partly due to the fact that decoding for some documents effectively stopped when the maximum number of rejections was reached.",
                    "sid": 102,
                    "ssid": 102,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The BLEU score curve shows a similar increase, from an initial score below 5 % to a maximum of around 21.5 %.",
                    "sid": 103,
                    "ssid": 103,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is below the score of 22.45 % achieved by the beam search decoder with the same models, which is not surprising considering that our decoder approximates a more difficult search problem, from which a number of strong independence assumptions have been lifted, without, at the moment, having any stronger models at its disposal to exploit this additional freedom for better translation.",
                    "sid": 104,
                    "ssid": 104,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In terms of stability, there are no dramatic differences between the decoder runs.",
                    "sid": 105,
                    "ssid": 105,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Indeed, the small differences that exist are hardly discernible in the plots.",
                    "sid": 106,
                    "ssid": 106,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model scores at the end of the decodrun range between and a relative difference of only about 0.03 %.",
                    "sid": 107,
                    "ssid": 107,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Final BLEU scores range from 21.41 % to 21.63 %, an interval that is not negligible, but comparable to the variance observed when, e. g., feature weights from repeated MERT runs are used with one and the same SMT system.",
                    "sid": 108,
                    "ssid": 108,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that these results were obtained with random state initialisation.",
                    "sid": 109,
                    "ssid": 109,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With DP initialisation, score differences between repeated runs rarely exceed 0.02 absolute BLEU percentage points.",
                    "sid": 110,
                    "ssid": 110,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Overall, we conclude that the decoding results of our algorithm are reasonably stable despite the nondeterminism inherent in the procedure.",
                    "sid": 111,
                    "ssid": 111,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our subsequent experiments, the evaluation scores reported are calculated as the mean of three runs for each experiment.",
                    "sid": 112,
                    "ssid": 112,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.2 Search Algorithm Parameters The hill climbing algorithm we use has two parameters which govern the trade-off between decoding time and the accuracy with which a local maximum identified: The limit the search process after a certain number of steps regardless of the progress made or lack thereof.",
                    "sid": 113,
                    "ssid": 113,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The the search after a certain number of unsuccessful attempts to make a step, when continued search does not seem to be promising.",
                    "sid": 114,
                    "ssid": 114,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In most of our we used a step limit of pz\ufffd a rejection limit of In practice, decoding terminates by reaching the rejection limit for the vast majority of documents.",
                    "sid": 115,
                    "ssid": 115,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We therefore examined the effect of different rejection limits on the learning curves.",
                    "sid": 116,
                    "ssid": 116,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The results are shown in figure 2.",
                    "sid": 117,
                    "ssid": 117,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The results show that continued search does pay off to a certain extent.",
                    "sid": 118,
                    "ssid": 118,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Indeed, the curve for relimit seems to indicate that the model score increases roughly logarithmically, albeit to a higher base, even after the curve has started to flatout at steps.",
                    "sid": 119,
                    "ssid": 119,
                    "kind_of_tag": "s"
                },
                {
                    "text": "At a certain point, however, the probability of finding a good successor state drops rather sharply by about two orders of magnitude, as 1185 Figure 2: Search performance at different rejection limits by the fact that a rejection limit of not give a large improvement over one of one of does.",
                    "sid": 120,
                    "ssid": 120,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The continued model score improvement also results in an increase in BLEU scores, and with a BLEU score of 22.1 % the system rejection limit is fairly close to the score of 22.45 % obtained by DP beam search.",
                    "sid": 121,
                    "ssid": 121,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Obviously, more exact search comes at a cost, and in this case, it comes at a considerable cost, which is an explosion of the time required to decode the test from 4 minutes at rejection limit to 224 minat rejection limit and 38 hours 45 minutes limit The DP decoder takes 31 minutes for the same task.",
                    "sid": 122,
                    "ssid": 122,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We conclude that the rejection limit selected for our experiments, while technically suboptimal, realises a good trade-off between decoding time and accuracy.",
                    "sid": 123,
                    "ssid": 123,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.3 A Semantic Document Language Model In this section, we present the results of the application of our decoder to an actual SMT model with cross-sentence features.",
                    "sid": 124,
                    "ssid": 124,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our model addresses the of In particular, it rewards the use of semantically related words in the translation output by the decoder, where semantic distance is measured with a word space model based on Latent Semantic Analysis (LSA).",
                    "sid": 125,
                    "ssid": 125,
                    "kind_of_tag": "s"
                },
                {
                    "text": "LSA has been applied to semantic language modelling in previous research with some success (Coccaro and Jurafsky, 1998; Bellegarda, 2000; Wandmacher and Antoine, 2007).",
                    "sid": 126,
                    "ssid": 126,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In SMT, it has mostly been used for domain adaptation (Kim and Khudanpur, 2004; Tam et al., 2007), or to measure sentence similarities (Banchs and Costa-juss`a, 2011).",
                    "sid": 127,
                    "ssid": 127,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model we use is inspired by Bellegarda (2000).",
                    "sid": 128,
                    "ssid": 128,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is a Markov model, similar to a standard n-gram model, and assigns to each content a score given a history of content where below.",
                    "sid": 129,
                    "ssid": 129,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Scoring relies on a 30dimensional LSA word vector space trained with the S-Space software (Jurgens and Stevens, 2010).",
                    "sid": 130,
                    "ssid": 130,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The score is defined based on the cosine similarity between the word vector of the predicted word and the mean word vector of the words in the history, which is converted to a probability by histogram lookup as suggested by Bellegarda (2000).",
                    "sid": 131,
                    "ssid": 131,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model is structurally different from a regular n-gram model in that word vector n-grams are defined over content words occurring in the word vector model only and can cross sentence boundaries.",
                    "sid": 132,
                    "ssid": 132,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Stop words, identified by an extensive stop word list and amounting to around 60 % of the tokens, are scored by a different mechanism based on their relative frequency (undiscounted unigram probability) in the training corpus.",
                    "sid": 133,
                    "ssid": 133,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In sum, the score produced by the semantic document LM has the following form: a stop word, else known, else (15) unknown, the proportion of content words in the corpus and a small fixed probability.",
                    "sid": 134,
                    "ssid": 134,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is integrated into the decoder as an extra feature function.",
                    "sid": 135,
                    "ssid": 135,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since we lack an automatic method for = { 1186 training the feature weights of document-wide features, its weight was selected by grid search over a number of values, comparing translation performance for the newstest2009 test set.",
                    "sid": 136,
                    "ssid": 136,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In these experiments, we used DP beam search to initialise the state of our local search decoder.",
                    "sid": 137,
                    "ssid": 137,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Three results are presented (table 1): The first table row shows the baseline performance using DP beam search with standard sentence-local features only.",
                    "sid": 138,
                    "ssid": 138,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The scores in the second row were obtained by running the hill climbing decoder with DP initialisation, but without adding any models.",
                    "sid": 139,
                    "ssid": 139,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A marginal increase in scores for all three test sets demonstrates that the hill climbing decoder manages to fix some of the search errors made by the DP search.",
                    "sid": 140,
                    "ssid": 140,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The last row contains the scores obtained by adding in the semantic language model.",
                    "sid": 141,
                    "ssid": 141,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Scores are presented for three publicly available test sets from recent WMT Machine Translation shared tasks, of which one (newstest2009) was used to monitor progress during development and select the final model.",
                    "sid": 142,
                    "ssid": 142,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Adding the semantic language model results in a small increase in NIST scores (Doddington, 2002) for all three test sets as well as a small BLEU score gain (Papineni et al., 2002) for two out of three corpora.",
                    "sid": 143,
                    "ssid": 143,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We note that the NIST score turned out to react more sensitively to improvements due to the semantic LM in all our experiments, which is reasonable because the model specifically targets content words, which benefit from the information weighting done by the NIST score.",
                    "sid": 144,
                    "ssid": 144,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While the results we present do not constitute compelling evidence in favour of our semantic LM in its current form, they do suggest that this model could be improved to realise higher gains from cross-sentence semantic information.",
                    "sid": 145,
                    "ssid": 145,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They support our claim that crosssentence models should be examined more closely and that existing methods should be adapted to deal with them, a problem addressed by our main contribution, the local search document decoder.",
                    "sid": 146,
                    "ssid": 146,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5 Related Work Even though DP beam search (Koehn et al., 2003) has been the dominant approach to SMT decoding in recent years, methods based on local search have been explored at various times.",
                    "sid": 147,
                    "ssid": 147,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For word-based greedy hill-climbing techniques were advocated as a faster replacement for beam search (Germann et al., 2001; Germann, 2003; Germann et al., 2004), and a problem formulation specifically targeting word reordering with an efficient word reordering algorithm has been proposed (Eisner and Tromble, 2006).",
                    "sid": 148,
                    "ssid": 148,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A local search decoder has been advanced as a faster alternative to beam search also for phrasebased SMT (Langlais et al., 2007; Langlais et al., 2008).",
                    "sid": 149,
                    "ssid": 149,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That work anticipates many of the features found in our decoder, including the use of local search to refine an initial hypothesis produced by DP beam search.",
                    "sid": 150,
                    "ssid": 150,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The possibility of using models that do not fit well into the beam search paradigm is mentioned and illustrated with the example of a reversed n-gram language model, which the authors claim would be difficult to implement in a beam search decoder.",
                    "sid": 151,
                    "ssid": 151,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Similarly to the work by Germann et al. (2001), their decoder is deterministic and explores the entire neighbourhood of a state in order to identify the most promising step.",
                    "sid": 152,
                    "ssid": 152,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our main contribution with respect to the work by Langlais et al.",
                    "sid": 153,
                    "ssid": 153,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "1 motivation",
            "number": "1",
            "sents": [
                {
                    "text": "In the field of translation studies, it is undisputed that discourse-wide context must be considered carefully for good translation results (Hatim and Mason, 1990).",
                    "sid": 154,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By contrast, the state of the art in statistical machine translation (SMT), despite significant advances in the last twenty years, still assumes that texts can be translated sentence by sentence under strict independence assumptions, even though it is well known that certain linguistic phenomena such as pronominal anaphora cannot be translated correctly without referring to extra-sentential context.",
                    "sid": 155,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is true both for the phrase-based and the syntaxbased approach to SMT.",
                    "sid": 156,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the rest of this paper, we shall concentrate on phrase-based SMT.",
                    "sid": 157,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One reason why it is difficult to experiment with document-wide models for phrase-based SMT is that the dynamic programming (DP) algorithm which has been used almost exclusively for decoding SMT models in the recent literature has very strong assumptions of locality built into it.",
                    "sid": 158,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "DP beam search for phrase-based SMT was described by Koehn et al. (2003), extending earlier work on word-based SMT (Tillmann et al., 1997; Och et al., 2001; Tillmann and Ney, 2003).",
                    "sid": 159,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This algorithm constructs output sentences by starting with an empty hypothesis and adding output words at the end until translations for all source words have been generated.",
                    "sid": 160,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The core models of phrase-based SMT, in particular the n-gram language model (LM), only depend on a constant number of output words to the left of the word being generated.",
                    "sid": 161,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This fact is exploited by the search algorithm with a DP technique called hypothesis recombination (Och et al., 2001), which permits the elimination of hypotheses from the search space if they coincide in a certain number of final words with a better hypothesis and no future expansion can possibly invert the relative ranking of the two hypotheses under the given models.",
                    "sid": 162,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hypothesis recombination achieves a substantial reduction of the search space without affecting search optimality and makes it possible to use aggressive pruning techniques for fast search while still obtaining good results.",
                    "sid": 163,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The downside of this otherwise excellent approach is that it only works well with models that have a local dependency structure similar to that of an n-gram language model, so they only depend on a small context window for each target word.",
                    "sid": 164,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Sentence-local models with longer dependencies can be added, but doing so greatly increases the risk for search errors by inhibiting hypothesis recombination.",
                    "sid": 165,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Cross-sentence dependencies cannot be directly integrated into DP SMT decoding in any obvious way, especially if joint optimisation of a number of interdependent decisions over an entire document is required.",
                    "sid": 166,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Research into models with a more varied, non-local dependency structure is to some extent stifled by the difficulty of decoding such models effectively, as can be seen by the problems some researchers encountered when they attempted to solve discourse-level problems.",
                    "sid": 167,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Consider, for instance, the work on cache-based language models by Tiedemann (2010) and Gong et al. (2011), where error propagation was a serious issue, or the works on pronominal anaphora by Le Nagard and Koehn (2010), who implemented cross-sentence dependencies with an ad-hoc two-pass decoding strategy, and Hardmeier and Federico (2010) with the use of an external decoder driver to manage backward-only dependencies between sentences.",
                    "sid": 168,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we present a method for decoding complete documents in phrase-based SMT.",
                    "sid": 169,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our decoder uses a local search approach whose state consists of a complete translation of an entire document at any time.",
                    "sid": 170,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The initial state is improved by the application of a series of operations using a hill climbing strategy to find a (local) maximum of the score function.",
                    "sid": 171,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This setup gives us complete freedom to define scoring functions over the entire document.",
                    "sid": 172,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, by optionally initialising the state with the output of a traditional DP decoder, we can ensure that the final hypothesis is no worse than what would have been found by DP search alone.",
                    "sid": 173,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We start by describing the decoding algorithm and the state operations used by our decoder, then we present empirical results demonstrating the effectiveness of our approach and its usability with a document-level semantic language model, and finally we discuss some related work.",
                    "sid": 174,
                    "ssid": 21,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "2 smt decoding by hill climbing",
            "number": "2",
            "sents": [
                {
                    "text": "In this section, we formally describe the phrasebased SMT model implemented by our decoder as well as the decoding algorithm we use.",
                    "sid": 175,
                    "ssid": 1,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "2.1 smt model",
            "number": "3",
            "sents": [
                {
                    "text": "Our decoder is based on local search, so its state at any time is a representation of a complete translation of the entire document.",
                    "sid": 176,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Even though the decoder operates at the document level, it is important to keep track of sentence boundaries, and the individual operations that are applied to the state are still confined to sentence scope, so it is useful to decompose the state of a document into the state of its sentences, and we define the overall state S as a sequence of sentence states: where N is the number of sentences.",
                    "sid": 177,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This implies that we constrain the decoder to emit exactly one output sentence per input sentence.",
                    "sid": 178,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let i be the number of a sentence and mi the number of input tokens of this sentence, p and q (with 1 < p < q < mi) be positions in the input sentence and [p;q] denote the set of positions from p up to and including q.",
                    "sid": 179,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We say that [p;q] precedes [p';q'], or [p;q] \ufffd [p';q'], if q < p'.",
                    "sid": 180,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let (Di([p;q]) be the set of translations for the source phrase covering positions [p;q] in the input sentence i as given by the phrase table.",
                    "sid": 181,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We call A = ([p;q],0) an anchored phrase pair with coverage C(A) = [p;q] if 0 E (Di([p;q]) is a target phrase translating the source words at positions [p;q].",
                    "sid": 182,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then a sequence of ni anchored phrase pairs is a valid sentence state for sentence i if the following two conditions hold: Let f (S) be a scoring function mapping a state S to a real number.",
                    "sid": 183,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As usual in SMT, it is assumed that the scoring function can be decomposed into a linear combination of K feature functions hk(S), each with a constant weight Xk, so The problem addressed by the decoder is the search for the state S\u02c6 with maximal score, such that The feature functions implemented in our baseline system are identical to the ones found in the popular Moses SMT system (Koehn et al., 2007).",
                    "sid": 184,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, our decoder has the following feature functions: In our experiments, the last feature is used with a fixed weight of negative infinity in order to limit the gaps between the coverage sets of adjacent anchored phrase pairs to a maximum value.",
                    "sid": 185,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In DP search, the distortion limit is usually enforced directly by the search algorithm and is not added as a feature.",
                    "sid": 186,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our decoder, however, this restriction is not required to limit complexity, so we decided to add it among the scoring models.",
                    "sid": 187,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The decoding algorithm we use (algorithm 1) is very simple.",
                    "sid": 188,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It starts with a given initial document state.",
                    "sid": 189,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the main loop, which extends from line 3 to line 12, it generates a successor state S0 for the current state S by calling the function Neighbour, which non-deterministically applies one of the operations described in section 3 of this paper to S. The score of the new state is compared to that of the previous one.",
                    "sid": 190,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If it meets a given acceptance criterion, S0 becomes the current state, else search continues from the previous state S. For the experiments in this paper, we use the hill climbing acceptance criterion, which simply accepts a new state if its score is higher than that of the current state.",
                    "sid": 191,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Other acceptance criteria are possible and could be used to endow the search algorithm with stochastic behaviour.",
                    "sid": 192,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The main loop is repeated until a maximum number of steps (step limit) is reached or until a maximum number of moves are rejected in a row (rejection limit).",
                    "sid": 193,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Algorithm 1 Decoding algorithm Input: an initial document state S; search parameters maxsteps and maxrejected Output: a modified document state A notable difference between this algorithm and other hill climbing algorithms that have been used for SMT decoding (Germann et al., 2004; Langlais et al., 2007) is its non-determinism.",
                    "sid": 194,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Previous work for sentence-level decoding employed a steepest ascent strategy which amounts to enumerating the complete neighbourhood of the current state as defined by the state operations and selecting the next state to be the best state found in the neighbourhood of the current one.",
                    "sid": 195,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Enumerating all neighbours of a given state, costly as it is, has the advantage that it makes it easy to prove local optimality of a state by recognising that all possible successor states have lower scores.",
                    "sid": 196,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It can be rather inefficient, since at every step only one modification will be adopted; many of the modifications that are discarded will very likely be generated anew in the next iteration.",
                    "sid": 197,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As we extend the decoder to the document level, the size of the neighbourhood that would have to be explored in this way increases considerably.",
                    "sid": 198,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Moreover, the inefficiency of the steepest ascent approach potentially increases as well.",
                    "sid": 199,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Very likely, a promising move in one sentence will remain promising after a modification has been applied to another sentence, even though this is not guaranteed to be true in the presence of cross-sentence models.",
                    "sid": 200,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We therefore adopt a first-choice hill climbing strategy that non-deterministically generates successor states and accepts the first one that meets the acceptance criterion.",
                    "sid": 201,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This frees us from the necessity of generating the full set of successors for each state.",
                    "sid": 202,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On the downside, if the full successor set is not known, it is no longer possible to prove local optimality of a state, so we are forced to use a different condition for halting the search.",
                    "sid": 203,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use a combination of two limits: The step limit is a hard limit on the resources the user is willing to expend on the search problem.",
                    "sid": 204,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The value of the rejection limit determines how much of the neighbourhood is searched for better successors before a state is accepted as a solution; it is related to the probability that a state returned as a solution is in fact locally optimal.",
                    "sid": 205,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To simplify notations in the description of the individual state operations, we write to signify that a state operation, when presented with a document state as in equation 1 and acting on sentence i, returns a new document state of and indicates that the operation returns a state in which a sequence of h consecutive anchored phrase pairs has been replaced by another sequence of h0 anchored phrase pairs.",
                    "sid": 206,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When implementing the feature functions for the decoder, we have to exercise some care to avoid recomputing scores for the whole document at every iteration.",
                    "sid": 207,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To achieve this, the scores are computed completely only once, at the beginning of the decoding run.",
                    "sid": 208,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In subsequent iterations, scoring functions are presented with the scores of the previous iteration and a list of modifications produced by the state operation, a set of tuples hi,r,s,A01 ...A0h0i, each indicating that the document should be modified as described by If a feature function is decomposable in some way, as all the standard features developed under the constraints of DP search are, it can then update the state simply by subtracting and adding score components pertaining to the modified parts of the document.",
                    "sid": 209,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Feature functions have the possibility to store their own state information along with the document state to make sure the required information is available.",
                    "sid": 210,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, the framework makes it possible to exploit decomposability for efficient scoring without imposing any particular decomposition on the features as beam search does.",
                    "sid": 211,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To make scoring even more efficient, scores are computed in two passes: First, every feature function is asked to provide an upper bound on the score that will be obtained for the new state.",
                    "sid": 212,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In some cases, it is possible to calculate reasonable upper bounds much more efficiently than computing the exact feature value.",
                    "sid": 213,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the upper bound fails to meet the acceptance criterion, the new state is discarded right away; if not, the full score is computed and the acceptance criterion is tested again.",
                    "sid": 214,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Among the basic SMT models, this two-pass strategy is only used for the n-gram LM, which requires fairly expensive parameter lookups for scoring.",
                    "sid": 215,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The scores of all the other baseline models are fully computed during the first scoring pass.",
                    "sid": 216,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The n-gram model is more complex.",
                    "sid": 217,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In its state information, it keeps track of the LM score and LM library state for each word.",
                    "sid": 218,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first scoring pass then identifies the words whose LM scores are affected by the current search step.",
                    "sid": 219,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This includes the words changed by the search operation as well as the words whose LM history is modified.",
                    "sid": 220,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The range of the history dependencies can be determined precisely by considering the \u201cvalid state length\u201d information provided by the KenLM library.",
                    "sid": 221,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the first pass, the LM scores of the affected words are subtracted from the total score.",
                    "sid": 222,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model only looks up the new LM scores for the affected words and updates the total score if the new search state passes the first acceptance check.",
                    "sid": 223,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This two-pass scoring approach allows us to avoid LM lookups altogether for states that will be rejected anyhow because of low scores from the other models, e. g. because the distortion limit is violated.",
                    "sid": 224,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Model score updates become more complex and slower as the number of dependencies of a model increases.",
                    "sid": 225,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While our decoding algorithm does not impose any formal restrictions on the number or type of dependencies that can be handled, there will be practical limits beyond which decoding becomes unacceptably slow or the scoring code becomes very difficult to maintain.",
                    "sid": 226,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These limits are however fairly independent of the types of dependencies handled by a model, which permits the exploration of more varied model types than those handled by DP search.",
                    "sid": 227,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Before the hill climbing decoding algorithm can be run, an initial state must be generated.",
                    "sid": 228,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The closer the initial state is to an optimum, the less work remains to be done for the algorithm.",
                    "sid": 229,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the algorithm is to be self-contained, initialisation must be relatively uninformed and can only rely on some general prior assumptions about what might be a good initial guess.",
                    "sid": 230,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On the other hand, if optimal results are sought after, it pays off to invest some effort into a good starting point.",
                    "sid": 231,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "One way to do this is to run DP search first.",
                    "sid": 232,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For uninformed initialisation, we chose to implement a very simple procedure based only on the observation that, at least for language pairs involving the major European languages, it is usually a good guess to keep the word order of the output very similar to that of the input.",
                    "sid": 233,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We therefore create the initial state by selecting, for each sentence in the document, a sequence of anchored phrase pairs covering the input sentence in monotonic order, that is, such that for all pairs of adjacent anchored phrase pairs Aj and Aj+1, we have that C(Aj) \ufffd C(Aj+1).",
                    "sid": 234,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For initialisation with DP search, we first run the Moses decoder (Koehn et al., 2007) with default search parameters and the same models as those used by our decoder.",
                    "sid": 235,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then we extract the best output hypothesis from the search graph of the decoder and map it into a sequence of anchored phrase pairs in the obvious way.",
                    "sid": 236,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When the document-level decoder is used with models that are incompatible with beam search, Moses can be run with a subset of the models in order to find an approximation of the solution which is then refined with the complete feature set.",
                    "sid": 237,
                    "ssid": 62,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "3 state operations",
            "number": "4",
            "sents": [
                {
                    "text": "Given a document state S, the decoder uses a neighbourhood function Neighbour to simulate a move in the state space.",
                    "sid": 238,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The neighbourhood function nondeterministically selects a type of state operation and a location in the document to apply it to and returns the resulting new state.",
                    "sid": 239,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use a set of three operations that has the property that every possible document state can be reached from every other state in a sequence of moves.",
                    "sid": 240,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Designing operations for state transitions in local search for phrase-based SMT is a problem that has been addressed in the literature (Langlais et al., 2007; Arun et al., 2010).",
                    "sid": 241,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our decoder\u2019s firstchoice hill climbing strategy never enumerates the full neighbourhood of a state.",
                    "sid": 242,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We therefore place less emphasis than previous work on defining a compact neighbourhood, but allow the decoder to make quite extensive changes to a state in a single step with a certain probability.",
                    "sid": 243,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Otherwise our operations are similar to those used by Arun et al. (2010).",
                    "sid": 244,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All of the operations described in this paper make changes to a single sentence only.",
                    "sid": 245,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each time it is called, the Neighbour function selects a sentence in the document with a probability proportional to the number of input tokens in each sentence to ensure a fair distribution of the decoder\u2019s attention over the words in the document regardless of varying sentence lengths.",
                    "sid": 246,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The change-phrase-translation operation replaces the translation of a single phrase with a random translation with the same coverage taken from the phrase table.",
                    "sid": 247,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Formally, the operation selects an anchored phrase pair Aj by drawing uniformly from the elements of Si and then draws a new translation 0' uniformly from the set (Di(C(Aj)).",
                    "sid": 248,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The new state is given by The swap-phrases operation affects the output word order without changing the phrase translations.",
                    "sid": 249,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It exchanges two anchored phrase pairs Aj and Aj+h, resulting in an output state of The start location j is drawn uniformly from the eligible sentence positions; the swap range h comes from a geometric distribution with configurable decay.",
                    "sid": 250,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Other word-order changes such as a one-way move operation that does not require another movement in exchange or more advanced permutations can easily be defined.",
                    "sid": 251,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The most complex operation is resegment, which allows the decoder to modify the segmentation of the source phrase.",
                    "sid": 252,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It takes a number of anchored phrase pairs that form a contiguous block both in the input and in the output and replaces them with a new set of phrase pairs covering the same span of the input sentence.",
                    "sid": 253,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Formally, for some p and q, where, for j, = 1,...,h,, we have that A,j, = ([pj,;qj,],oj,), all [pj,;qj,] are mutually disjoint and each Oj, is randomly drawn from ('i([pj,;qj,]).",
                    "sid": 254,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Regardless of the ordering of Aj ...Aj+h\u22121, the resegment operation always generates a sequence of anchored phrase pairs in linear order, such that C(A,j,) --< C(A,j,+1) for j, = 1,...,h, \u22121.",
                    "sid": 255,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As for the other operations, j is generated uniformly and h is drawn from a geometric distribution with a decay parameter.",
                    "sid": 256,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The new segmentation is generated by extending the sequence of anchored phrase pairs with random elements starting at the next free position, proceeding from left to right until the whole range [p;q] is covered.",
                    "sid": 257,
                    "ssid": 20,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "4 experimental results",
            "number": "5",
            "sents": [
                {
                    "text": "In this section, we present the results of a series of experiments with our document decoder.",
                    "sid": 258,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The goal of our experiments is to demonstrate the behaviour of the decoder and characterise its response to changes in the fundamental search parameters.",
                    "sid": 259,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The SMT models for our experiments were created with a subset of the training data for the English-French shared task at the WMT 2011 workshop (Callison-Burch et al., 2011).",
                    "sid": 260,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The phrase table was trained on Europarl, news-commentary and UN data.",
                    "sid": 261,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To reduce the training data to a manageable size, singleton phrase pairs were removed before the phrase scoring step.",
                    "sid": 262,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Significance-based filtering (Johnson et al., 2007) was applied to the resulting phrase table.",
                    "sid": 263,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The language model was a 5gram model with Kneser-Ney smoothing trained on the monolingual News corpus with IRSTLM (Federico et al., 2008).",
                    "sid": 264,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Feature weights were trained with Minimum Error-Rate Training (MERT) (Och, 2003) on the news-test2008 development set using the DP beam search decoder and the MERT implementation of the Moses toolkit (Koehn et al., 2007).",
                    "sid": 265,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Experimental results are reported for the newstest2009 test set, a corpus of 111 newswire documents totalling 2,525 sentences or 65,595 English input tokens.",
                    "sid": 266,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An important difference between our decoder and the classical DP decoder as well as previous work in SMT decoding with local search is that our decoder is inherently non-deterministic.",
                    "sid": 267,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This implies that repeated runs of the decoder with the same search parameters, input and models will not, in general, find the same local maximum of the score space.",
                    "sid": 268,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first empirical question we ask is therefore how different the results are under repeated runs.",
                    "sid": 269,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The results in this and the next section were obtained with random state initialisation, i. e. without running the DP beam search decoder.",
                    "sid": 270,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 1 shows the results of 7 decoder runs with the models described above, translating the newstest2009 test set, with a step limit of 227 and a rejection limit of 100,000.",
                    "sid": 271,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The x-axis of both plots shows the number of decoding steps on a logarithmic scale, so the number of steps is doubled between two adjacent points on the same curve.",
                    "sid": 272,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the left plot, the y-axis indicates the model score optimised by the decoder summed over all 2525 sentences of the document.",
                    "sid": 273,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the right plot, the case-sensitive BLEU score (Papineni et al., 2002) of the current decoder state against a reference translation is displayed.",
                    "sid": 274,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We note, as expected, that the decoder achieves a considerable improvement of the initial state with diminishing returns as decoding continues.",
                    "sid": 275,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Between 28 and 214 steps, the score increases at a roughly logarithmic pace, then the curve flattens out, which is partly due to the fact that decoding for some documents effectively stopped when the maximum number of rejections was reached.",
                    "sid": 276,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The BLEU score curve shows a similar increase, from an initial score below 5 % to a maximum of around 21.5 %.",
                    "sid": 277,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is below the score of 22.45 % achieved by the beam search decoder with the same models, which is not surprising considering that our decoder approximates a more difficult search problem, from which a number of strong independence assumptions have been lifted, without, at the moment, having any stronger models at its disposal to exploit this additional freedom for better translation.",
                    "sid": 278,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In terms of stability, there are no dramatic differences between the decoder runs.",
                    "sid": 279,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Indeed, the small differences that exist are hardly discernible in the plots.",
                    "sid": 280,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model scores at the end of the decoding run range between \u2212158767.9 and \u2212158716.9, a relative difference of only about 0.03 %.",
                    "sid": 281,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Final BLEU scores range from 21.41 % to 21.63 %, an interval that is not negligible, but comparable to the variance observed when, e. g., feature weights from repeated MERT runs are used with one and the same SMT system.",
                    "sid": 282,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that these results were obtained with random state initialisation.",
                    "sid": 283,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With DP initialisation, score differences between repeated runs rarely exceed 0.02 absolute BLEU percentage points.",
                    "sid": 284,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Overall, we conclude that the decoding results of our algorithm are reasonably stable despite the nondeterminism inherent in the procedure.",
                    "sid": 285,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our subsequent experiments, the evaluation scores reported are calculated as the mean of three runs for each experiment.",
                    "sid": 286,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The hill climbing algorithm we use has two parameters which govern the trade-off between decoding time and the accuracy with which a local maximum is identified: The step limit stops the search process after a certain number of steps regardless of the search progress made or lack thereof.",
                    "sid": 287,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The rejection limit stops the search after a certain number of unsuccessful attempts to make a step, when continued search does not seem to be promising.",
                    "sid": 288,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In most of our experiments, we used a step limit of 227 pz\ufffd 1.3\u00b7 108 and a rejection limit of 105.",
                    "sid": 289,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In practice, decoding terminates by reaching the rejection limit for the vast majority of documents.",
                    "sid": 290,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We therefore examined the effect of different rejection limits on the learning curves.",
                    "sid": 291,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The results are shown in figure 2.",
                    "sid": 292,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The results show that continued search does pay off to a certain extent.",
                    "sid": 293,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Indeed, the curve for rejection limit 107 seems to indicate that the model score increases roughly logarithmically, albeit to a higher base, even after the curve has started to flatten out at 214 steps.",
                    "sid": 294,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "At a certain point, however, the probability of finding a good successor state drops rather sharply by about two orders of magnitude, as evidenced by the fact that a rejection limit of 106 does not give a large improvement over one of 105, while one of 107 does.",
                    "sid": 295,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The continued model score improvement also results in an increase in BLEU scores, and with a BLEU score of 22.1 % the system with rejection limit 107 is fairly close to the score of 22.45 % obtained by DP beam search.",
                    "sid": 296,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Obviously, more exact search comes at a cost, and in this case, it comes at a considerable cost, which is an explosion of the time required to decode the test set from 4 minutes at rejection limit 103 to 224 minutes at rejection limit 105 and 38 hours 45 minutes at limit 107.",
                    "sid": 297,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The DP decoder takes 31 minutes for the same task.",
                    "sid": 298,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We conclude that the rejection limit of 105 selected for our experiments, while technically suboptimal, realises a good trade-off between decoding time and accuracy.",
                    "sid": 299,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this section, we present the results of the application of our decoder to an actual SMT model with cross-sentence features.",
                    "sid": 300,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our model addresses the problem of lexical cohesion.",
                    "sid": 301,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, it rewards the use of semantically related words in the translation output by the decoder, where semantic distance is measured with a word space model based on Latent Semantic Analysis (LSA).",
                    "sid": 302,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "LSA has been applied to semantic language modelling in previous research with some success (Coccaro and Jurafsky, 1998; Bellegarda, 2000; Wandmacher and Antoine, 2007).",
                    "sid": 303,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In SMT, it has mostly been used for domain adaptation (Kim and Khudanpur, 2004; Tam et al., 2007), or to measure sentence similarities (Banchs and Costa-juss`a, 2011).",
                    "sid": 304,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model we use is inspired by Bellegarda (2000).",
                    "sid": 305,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is a Markov model, similar to a standard n-gram model, and assigns to each content word a score given a history of n preceding content words, where n = 30 below.",
                    "sid": 306,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Scoring relies on a 30dimensional LSA word vector space trained with the S-Space software (Jurgens and Stevens, 2010).",
                    "sid": 307,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The score is defined based on the cosine similarity between the word vector of the predicted word and the mean word vector of the words in the history, which is converted to a probability by histogram lookup as suggested by Bellegarda (2000).",
                    "sid": 308,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model is structurally different from a regular n-gram model in that word vector n-grams are defined over content words occurring in the word vector model only and can cross sentence boundaries.",
                    "sid": 309,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Stop words, identified by an extensive stop word list and amounting to around 60 % of the tokens, are scored by a different mechanism based on their relative frequency (undiscounted unigram probability) in the training corpus.",
                    "sid": 310,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In sum, the score produced by the semantic document LM has the following form: where a is the proportion of content words in the training corpus and e is a small fixed probability.",
                    "sid": 311,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is integrated into the decoder as an extra feature function.",
                    "sid": 312,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since we lack an automatic method for training the feature weights of document-wide features, its weight was selected by grid search over a number of values, comparing translation performance for the newstest2009 test set.",
                    "sid": 313,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In these experiments, we used DP beam search to initialise the state of our local search decoder.",
                    "sid": 314,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Three results are presented (table 1): The first table row shows the baseline performance using DP beam search with standard sentence-local features only.",
                    "sid": 315,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The scores in the second row were obtained by running the hill climbing decoder with DP initialisation, but without adding any models.",
                    "sid": 316,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A marginal increase in scores for all three test sets demonstrates that the hill climbing decoder manages to fix some of the search errors made by the DP search.",
                    "sid": 317,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The last row contains the scores obtained by adding in the semantic language model.",
                    "sid": 318,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Scores are presented for three publicly available test sets from recent WMT Machine Translation shared tasks, of which one (newstest2009) was used to monitor progress during development and select the final model.",
                    "sid": 319,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Adding the semantic language model results in a small increase in NIST scores (Doddington, 2002) for all three test sets as well as a small BLEU score gain (Papineni et al., 2002) for two out of three corpora.",
                    "sid": 320,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We note that the NIST score turned out to react more sensitively to improvements due to the semantic LM in all our experiments, which is reasonable because the model specifically targets content words, which benefit from the information weighting done by the NIST score.",
                    "sid": 321,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While the results we present do not constitute compelling evidence in favour of our semantic LM in its current form, they do suggest that this model could be improved to realise higher gains from cross-sentence semantic information.",
                    "sid": 322,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They support our claim that crosssentence models should be examined more closely and that existing methods should be adapted to deal with them, a problem addressed by our main contribution, the local search document decoder.",
                    "sid": 323,
                    "ssid": 66,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "5 related work",
            "number": "6",
            "sents": [
                {
                    "text": "Even though DP beam search (Koehn et al., 2003) has been the dominant approach to SMT decoding in recent years, methods based on local search have been explored at various times.",
                    "sid": 324,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For word-based SMT, greedy hill-climbing techniques were advocated as a faster replacement for beam search (Germann et al., 2001; Germann, 2003; Germann et al., 2004), and a problem formulation specifically targeting word reordering with an efficient word reordering algorithm has been proposed (Eisner and Tromble, 2006).",
                    "sid": 325,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A local search decoder has been advanced as a faster alternative to beam search also for phrasebased SMT (Langlais et al., 2007; Langlais et al., 2008).",
                    "sid": 326,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "That work anticipates many of the features found in our decoder, including the use of local search to refine an initial hypothesis produced by DP beam search.",
                    "sid": 327,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The possibility of using models that do not fit well into the beam search paradigm is mentioned and illustrated with the example of a reversed n-gram language model, which the authors claim would be difficult to implement in a beam search decoder.",
                    "sid": 328,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Similarly to the work by Germann et al. (2001), their decoder is deterministic and explores the entire neighbourhood of a state in order to identify the most promising step.",
                    "sid": 329,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our main contribution with respect to the work by Langlais et al. (2007) is the introduction of the possibility of handling document-level models by lifting the assumption of sentence independence.",
                    "sid": 330,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a consequence, enumerating the entire neighbourhood becomes too expensive, which is why we resort to a \u201cfirst-choice\u201d strategy that non-deterministically generates states and accepts the first one encountered that meets the acceptance criterion.",
                    "sid": 331,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "More recently, Gibbs sampling was proposed as a way to generate samples from the posterior distribution of a phrase-based SMT decoder (Arun et al., 2009; Arun et al., 2010), a process that resembles local search in its use of a set of state-modifying operators to generate a sequence of decoder states.",
                    "sid": 332,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Where local search seeks for the best state attainable from a given initial state, Gibbs sampling produces a representative sample from the posterior.",
                    "sid": 333,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Like all work on SMT decoding that we know of, the Gibbs sampler presented by Arun et al. (2010) assumes independence of sentences and considers the complete neighbourhood of each state before taking a sample.",
                    "sid": 334,
                    "ssid": 11,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "6 conclusion",
            "number": "7",
            "sents": [
                {
                    "text": "In the last twenty years of SMT research, there has been a strong assumption that sentences in a text are independent of one another, and discourse context has been largely neglected.",
                    "sid": 335,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Several factors have contributed to this.",
                    "sid": 336,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Developing good discourse-level models is difficult, and considering the modest translation quality that has long been achieved by SMT, there have been more pressing problems to solve and lower hanging fruit to pick.",
                    "sid": 337,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, we argue that the popular DP beam search algorithm, which delivers excellent decoding performance, but imposes a particular kind of local dependency structure on the feature models, has also had its share in driving researchers away from discourse-level problems.",
                    "sid": 338,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we have presented a decoding procedure for phrase-based SMT that makes it possible to define feature models with cross-sentence dependencies.",
                    "sid": 339,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our algorithm can be combined with DP beam search to leverage the quality of the traditional approach with increased flexibility for models at the discourse level.",
                    "sid": 340,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have presented preliminary results on a cross-sentence semantic language model addressing the problem of lexical cohesion to demonstrate that this kind of models is worth exploring further.",
                    "sid": 341,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Besides lexical cohesion, cross-sentence models are relevant for other linguistic phenomena such as pronominal anaphora or verb tense selection.",
                    "sid": 342,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We believe that SMT research has reached a point of maturity where discourse phenomena should not be ignored any longer, and we consider our decoder to be a step towards this goal.",
                    "sid": 343,
                    "ssid": 9,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}