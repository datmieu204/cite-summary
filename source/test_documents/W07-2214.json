{
    "ID": "W07-2214",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Pomset mcfgs",
                    "sid": 0,
                    "ssid": null,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This paper identifies two orthogonal dimensions of context sensitivity, the first being context sensitivity in concurrency and the second being structural context sensitivity.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We present an example from natural language which seems to require both types of context sensitivity, and introduce partially ordered multisets (pomsets) mcfgs as a formalism which succintly expresses both.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Researchers in computer science and formal language theory have separately investigated context sensitivity of languages, addressing disjoint dimensions of context sensitivity.",
                    "sid": 3,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Researchers in parallel computing have explored the addition of concurrency and free word order to context free languages, i.e. a concurrency context sensitivity (Gischer, 1981; Warmuth and Haussler, 1984; Pratt, 1985; Pratt, 1986; Lodaya and Weil, 2000).",
                    "sid": 4,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Computational linguistis have explored adding crossing dependency and discontinuous constituency, i.e. a structural context sensitivity (Seki et al., 1991; Vijay-Shanker et al., 1987; Stabler, 1996).",
                    "sid": 5,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Research considering the combination of two dimensions of expressing context sensitivity have been sparse, e.g.",
                    "sid": 6,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(Becker et al., 1991), with research dedicated to this topic virtually nonexistent.",
                    "sid": 7,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Natural languages are not well expressed by either form of context sensitivity alone.",
                    "sid": 8,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, in Table 1, sentences 1-8 are valid, but 9, 10 are invalid constructions of Norwegian.",
                    "sid": 9,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition to the crossing dependency between the determiner and adverb phrase, this example can be described by either Bobaljik\u2019s paradox (Bobaljik, 1999), which asserts that relative ordering of clausal constituents are not unambiguously determined by the phrase structure, or shape conservation (M\u00a8uller, 2000), i.e. that linear precedence is preserved despite movement operations.",
                    "sid": 10,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In other words, the two structurally context sensitive components (due to the crossing dependency between them) can be shuffled arbitrarily, leading to concurrent context sensitivity.",
                    "sid": 11,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This paper proposes pomset mcfgs as a formalism for perspicuously expressing both types of context sensitivity.",
                    "sid": 12,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 The rest of the paper is organized as follows.",
                    "sid": 13,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Section 1 introduces pomsets, pomset operations, and pomset properties.",
                    "sid": 14,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Section 2 provides a definition of pomset mcfgs by extending the standard definition of mcfgs, defined over tuples of strings, to tuples of pomsets.",
                    "sid": 15,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Section 3 discusses pomset mcfg parsing.",
                    "sid": 16,
                    "ssid": 14,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "1 pomsets",
            "number": "2",
            "sents": [
                {
                    "text": "In this section, we define pomsets as a model for describing concurrency.",
                    "sid": 17,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A labelled partial order (LPO) is a 4 tuple (V, E, --<, p) where V is a set of vertices, E is the alphabet, -< is the partial order on the vertices, and p is the labelling function \u00b5:V\u2192 E. A pomset is a LPO up to isomorphism.",
                    "sid": 18,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The concatenation of pomsets p and q is defined as ;(p,q) = (Vp\u222aVq,Ep \u222a Eq,:p \u222a -q \u222aVp\u00d7Vq,Pp \u222a Aq).",
                    "sid": 19,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The concurrency of pomsets p and q is defined as k(p,q) = (Vp\u222aVq,Ep \u222a Eq,:\ufffdp \u222a _q,J1p \u222a \u00b5q).",
                    "sid": 20,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pomset isolation (t) is observed only in the context of concurrency.",
                    "sid": 21,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The concurrence of an isolated pomset with another pomset is defined as k(tp,q) = ({vp}\u222aVq,p\u03bb \u222a Eq,:q,{(p\u03bb,vp)}\u222aAq), where Ap is the set of linearizations for p, and p\u03bb is a function which returns an element of Ap.",
                    "sid": 22,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let ki be a pomset concurrency operator restricted to an arity of i.",
                    "sid": 23,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because concurrency is both associative and commutative, without isolation, kmkn = knkm = km+n, defeating any arity restrictions.",
                    "sid": 24,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Isolation allows us to restrict the arity of the concurrency operator, guaranteeing that in all linearizations of the pomset, the linearizations of the isolated subpomsets are contiguous.2 A mildly concurrent operator t kn, i.e. an nconcurrent operator, is a composite operator whose concurrency is isolated and restricted to an arity of n, such that it operates on at most n items concurrently.",
                    "sid": 25,
                    "ssid": 9,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "2 pomset mcfgs",
            "number": "3",
            "sents": [
                {
                    "text": "There are many (structural) mildly context sensitive grammar formalisms, e.g. mcfg, lcfrs, mg, and they have been shown to be equivalent (Vijay-Shanker et al., 1987).",
                    "sid": 26,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this section we construct mcfgs over pomsets (instead of strings) to define grammars with both types of context sensitivity.",
                    "sid": 27,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A pomset mcfg G is a 7-tuple (E,N,O,P,F,R,S) such that E is a finite non-empty set of atoms, i.e. terminal symbols, N is a finite non-empty set of nonterminal symbols, where N\u2229E=\u2205, O is a set of valid pomset operators, P is a set of i-tuples of pomsets labelled by E\u222aN, F is a finite set of pomset rewriting functions from tuples of elements of P into elements in P, F\u2286{ g:Pn \u2192P  |n>0 }, R is a finite set of rewrite rules which pair n-ary elements of F with n+1 nonterminals, and S\u2208N is the start symbol, and d(S) = 1.",
                    "sid": 28,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This definition extends the standard mcfg definition (Seki et al., 1991), with two main differences.",
                    "sid": 29,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First, strings have been generalized to pomsets, i.e.",
                    "sid": 30,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "P is a set of i-tuples of pomsets instead of i-tuples of strings.",
                    "sid": 31,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It follows that F, the set of functions, operate on tuples of pomsets instead of tuples of strings, and so forth.",
                    "sid": 32,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Second, pomset mcfgs explicitly specify O, the set of possible operators over the pomsets, e.g.",
                    "sid": 33,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "{;, t k2}; string mcfgs have an implied operator set O={;} (i.e. just string concatenation).",
                    "sid": 34,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Additionally, just as in mcfgs, where the arity of string components are limited, we can limit the arity of the concurrency of pomsets.",
                    "sid": 35,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A n-concurrent pomset mcfg is a pomset mcfg such that for all concurrency operators ki in the grammar, i\u2264n.",
                    "sid": 36,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A pomset mcfg with no concurrency among its components is a 1-concurrent pomset mcfg, just as a cfg is a 1mcfg.",
                    "sid": 37,
                    "ssid": 12,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "3 parsing",
            "number": "4",
            "sents": [
                {
                    "text": "In this section we propose a strategy for parsing pomset mcfgs, based on IDL parsing (Nederhof and Satta, 2004).",
                    "sid": 38,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We define pomset graphs, which extend IDL graphs and pom-automata and are defined over tuples of pomsets (or tuples of idl expressions), rather than single pomsets or idl expressions.",
                    "sid": 39,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An informal analysis of the computational complexity for parsing pomset mcfgs follows.",
                    "sid": 40,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pomset graphs The construction is quite straight forward, as pomsets themselves can already be considered as DAGs.",
                    "sid": 41,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, in the pomset graph, we add two vertices, the start and end vertices.",
                    "sid": 42,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We then add precedence relations such that the start vertex precedes all minimal vertices of the pomset, and that the end vertex succeeds all maximal vertices of the pomset.",
                    "sid": 43,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For any nonempty pomset, we define Vmin \u2286V and Vmax \u2286V to be the minimal and maximal, respectively, vertices of V. Informally, no vertex in a pomset precede Vmin and none succeed any in Vmax.",
                    "sid": 44,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Formally, \u2200 v\u2208V, v\u2019\u2208V,v\u20196\ufffdv, Vmin = { v  |(v\u2019,v) 6\u2208:\ufffd } and Vmax = { v  |(v,v\u2019) 6\u2208:\ufffd }.",
                    "sid": 45,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The start vertex is then labelled with the empty string, c, and the end vertex is labelled with Q\u2019, a symbol not in E. Given a pomset p= (Vp,E,\ufffd,\u00b5p), a pomset graph for p is a vertex labelled graph \u03b3(p) = (Vy,E,\u00b5y) where Vy and E are a finite set of vertices and edges, where Vy=Vp\u222a{vs,ve} and E= -< \u222avs\u00d7Vmin\u222aVmax\u00d7ve, Ey=E\u222a{ \u2019}, where \u03c3\u2019 is a symbol not in E, and \u00b5y=\u00b5p\u222a{(vs,E),(ve,\u03c3\u2019)} is the vertex labelling function.",
                    "sid": 46,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Having defined the pomset graph, we can apply the IDL parsing algorithm to the graph.",
                    "sid": 47,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Complexity While the complexity of the membership problem for pomset languages in general is NP-complete (Feigenbaum et al., 1993), by restricting the context sensitivity of the pomset grammars, polynomial time complexity is achievable.",
                    "sid": 48,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The complexity of the parsing of IDL graphs is O(n3k) (Nederhof and Satta, 2004) where k is the width of the graph, and the width is a measurement of the number of paths being traversed in parallel, i.e. the arity of the concurrent context sensitivity.",
                    "sid": 49,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our intuition is that the parameterization of the complexity according to the number of parallel paths applies even when structural context sensitivity is added.",
                    "sid": 50,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus for a k-concurrent m-structural mcfg, we conjecture that the complexity is O(n3km).",
                    "sid": 51,
                    "ssid": 14,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "4 conclusion",
            "number": "5",
            "sents": [
                {
                    "text": "In this paper we identified two types of context sensitivity, and provided a natural language example which exhibits both types of context sensitivity.",
                    "sid": 52,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We introduced pomset mcfgs as a formalism for describing grammars with both types of context sensitivity, and outlined an informal proof of the its polynomialtime parsing complexity.",
                    "sid": 53,
                    "ssid": 2,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}