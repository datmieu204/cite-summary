{
    "ID": "D11-1022",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Dual Decomposition with Many Overlapping Components",
                    "sid": 0,
                    "ssid": null,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Dual decomposition has been recently proposed as a way of combining complementary models, with a boost in predictive power.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, in cases where lightweight decomare not readily available due to the presence of rich features or logical constraints), the original subgradient algorithm is inefficient.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We sidestep that difficulty by adopting an augmented Lagrangian method that accelerates model consensus by regularizing towards the averaged votes.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We show how first-order logical constraints can be handled efficiently, even though the corresponding subproblems are no longer combinatorial, and report experiments in dependency parsing, with state-of-the-art results.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "1 introduction",
            "number": "1",
            "sents": [
                {
                    "text": "The last years have witnessed increasingly accurate models for syntax, semantics, and machine translation (Chiang, 2007; Finkel et al., 2008; Petrov and Klein, 2008; Smith and Eisner, 2008; Martins et al., 2009a; Johansson and Nugues, 2008; Koo et al., 2010).",
                    "sid": 5,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The predictive power of such models stems from their ability to break locality assumptions.",
                    "sid": 6,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The resulting combinatorial explosion typically demands some form of approximate decoding, such as sampling, heuristic search, or variational inference.",
                    "sid": 7,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we focus on parsers built from linear programming relaxations, the so-called \u201cturbo parsers\u201d (Martins et al., 2009a; Martins et al., 2010).",
                    "sid": 8,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Rush et al. (2010) applied dual decomposition as a way of combining models which alone permit efficient decoding, but whose combination is intractable.",
                    "sid": 9,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This results in a relaxation of the original problem that is elegantly solved with the subgradient algorithm.",
                    "sid": 10,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While this technique has proven quite effective in parsing (Koo et al., 2010; Auli and Lopez, 2011) as well as machine translation (Rush and Collins, 2011), we show here that its success is strongly tied to the ability of finding a \u201cgood\u201d decomposition, i.e., one involving few overlapping components (or slaves).",
                    "sid": 11,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With many components, the subgradient algorithm exhibits extremely slow convergence (cf.",
                    "sid": 12,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Fig.",
                    "sid": 13,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2).",
                    "sid": 14,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unfortunately, a lightweight decomposition is not always at hand, either because the problem does not factor in a natural way, or because one would like to incorporate features that cannot be easily absorbed in few tractable components.",
                    "sid": 15,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Examples include features generated by statements in first-order logic, features that violate Markov assumptions, or history features such as the ones employed in transition-based parsers.",
                    "sid": 16,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To tackle the kind of problems above, we adopt DD-ADMM (Alg.",
                    "sid": 17,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1), a recently proposed algorithm that accelerates dual decomposition (Martins et al., 2011).",
                    "sid": 18,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "DD-ADMM retains the modularity of the subgradient-based method, but it speeds up consensus by regularizing each slave subproblem towards the averaged votes obtained in the previous round (cf.",
                    "sid": 19,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Eq.",
                    "sid": 20,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "14).",
                    "sid": 21,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While this yields more involved subproblems (with a quadratic term), we show that exact solutions can still be efficiently computed for all cases of interest, by using sort operations.",
                    "sid": 22,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a result, we obtain parsers that can handle very rich features, do not require specifying a decomposition, and can be heavily parallelized.",
                    "sid": 23,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We demonstrate the success of the approach by presenting experiments in dependency parsing with state-of-the-art results.",
                    "sid": 24,
                    "ssid": 20,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "2 background",
            "number": "2",
            "sents": [
                {
                    "text": "Let x E x be an input object (e.g., a sentence), from which we want to predict a structured output y E \ufffd (e.g., a parse tree).",
                    "sid": 25,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The output set \ufffd is assumed too large for exhaustive search to be tractable.",
                    "sid": 26,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We assume to have a model that assigns a score f(y) to each candidate output, based on which we predict Designing the model must obey certain practical considerations.",
                    "sid": 27,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If efficiency is the major concern, a simple model is usually chosen so that Eq.",
                    "sid": 28,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 can be solved efficiently, at the cost of limited expressive power.",
                    "sid": 29,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If we care more about accuracy, a model with richer features and more involved score functions may be designed.",
                    "sid": 30,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Decoding, however, will be more expensive, and approximations are often necessary.",
                    "sid": 31,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A typical source of intractability comes from the combinatorial explosion inherent in the composition of two or more tractable models (Bar-Hillel et al., 1964; Tromble and Eisner, 2006).",
                    "sid": 32,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recently, Rush et al. (2010) have proposed a dual decomposition framework to address NLP problems in which the global score decomposes as f(y) = f1(z1)+f2(z2), where z1 and z2 are two overlapping \u201cviews\u201d of the output, so that Eq.",
                    "sid": 33,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 becomes: Above, the notation z1 \u2014 z2 means that z1 and z2 \u201cagree on their overlaps,\u201d and an isomorphism Y ^- {(z1, z2) E Y1 x Y2 1 z1 \u2014 z2} is assumed.",
                    "sid": 34,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We next formalize these notions and proceed to compositions of an arbitrary number of models.",
                    "sid": 35,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Of special interest is the unexplored setting where this number is very large and each component very simple.",
                    "sid": 36,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A crucial step in the design of structured predictors is that of decomposing outputs into parts (Taskar et al., 2003).",
                    "sid": 37,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We assume the following setup: Basic parts.",
                    "sid": 38,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We let R be a set of basic parts, such that each element y E Y can be identified with a subset of R. The exact meaning of a \u201cbasic part\u201d is problem dependent.",
                    "sid": 39,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, in dependency parsing, R can be the set of all possible dependency arcs (see Fig.",
                    "sid": 40,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1); in phrase-based parsing, it can be the set of possible spans; in sequence labeling, it can be the set of possible labels at each position.",
                    "sid": 41,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our only assumption is that we can \u201cread out\u201d y from the basic parts it contains.",
                    "sid": 42,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For convenience, we represent y as a binary vector, y = (y(r))r\u2208R, where y(r) = 1 if part r belongs to y, and 0 otherwise.",
                    "sid": 43,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Decomposition.",
                    "sid": 44,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We generalize the decomposition in Eq.",
                    "sid": 45,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2 by considering sets Y1, ... , YS for S > 2.",
                    "sid": 46,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each Ys is associated with its own set of parts Rs, in the same sense as above; we represent the elements of Ys as binary vectors zs = (zs(r))r\u2208R,.",
                    "sid": 47,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Examples are vectors indicating a tree structure, a sequence, or an assignment of variables to a factor, in which case it may happen that only some binary vectors are legal.",
                    "sid": 48,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Some parts in Rs are basic, while others are not.",
                    "sid": 49,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We denote by \u00afRs = Rs n R the subset of the ones that are.",
                    "sid": 50,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, we assume that: Fig.",
                    "sid": 51,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 shows several parts used in dependency parsing models; in phrase-based parsing, these could be spans and production rules anchored in the surface string; in sequence labeling, they can be unigram, bigram, and trigram labels.1 Global consistency.",
                    "sid": 52,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We want to be able to read out y E Y by \u201cgluing\u201d together the components (z1, ... , zS).",
                    "sid": 53,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is only meaningful if they are \u201cglobally consistent,\u201d a notion which we make precise.",
                    "sid": 54,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Two components zs E Ys and zt E Yt are said to be consistent (denoted zs ti zt) if they agree on their overlaps, i.e., if zs(r) = zt(r), dr E Rs n Rt.",
                    "sid": 55,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A complete assignment (z1, ... , zS) is globally consistent if all pairs of components are consistent.",
                    "sid": 56,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is equivalent to the existence of a witness vector (u(r))r\u2208R such that zs(r) = u(r), ds, r E \u00afRs.",
                    "sid": 57,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "With this setup, assuming that the score function decomposes as f(z) = PSs=1 fs(zs), the decoding problem (which extends Eq.",
                    "sid": 58,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2 for S > 2) becomes: We call the equality constraints expressed in the last line the \u201cagreement constraints.\u201d It is these constraints that complicate the problem, which would otherwise be exactly separable into S subproblems.",
                    "sid": 59,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The dual decomposition method (Komodakis et al., 2007; Rush et al., 2010) builds an approximation by dualizing out these constraints, as we describe next.",
                    "sid": 60,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We describe dual decomposition in a slightly different manner than Rush et al. (2010): we will first build a relaxation of P (called P0), in which the entire approximation is enclosed.",
                    "sid": 61,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then, we dualize P0, yielding problem D. In the second step, the duality gap is zero, i.e., P0 and D are equivalent.2 Relaxation.",
                    "sid": 62,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each s E {1, ... , S} we consider the convex hull of Ys, We have that Ys = Zs n Z|Rs|; hence, problem P (Eq.",
                    "sid": 63,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3) is equivalent to one in which each Ys is replaced by Zs and the z-variables are constrained to be integer.",
                    "sid": 64,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By dropping the integer constraints, we obtain the following relaxed problem: If the score functions fs are convex, P0 becomes a convex program (unlike P, which is discrete); being a relaxation, it provides an upper bound of P. Lagrangian.",
                    "sid": 65,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Introducing a Lagrange multiplier \u03bbs(r) for each agreement constraint in Eq.",
                    "sid": 66,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5, one obtains the Lagrangian function and the dual problem (the master) where the gs(\u03bbs) are the solution values of the following subproblems (the slaves): We assume that strong duality holds (w.r.t.",
                    "sid": 67,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Eqs.",
                    "sid": 68,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5\u2013 7), hence we have P G P0 = D.3 Solving the dual.",
                    "sid": 69,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Why is the dual formulation D (Eqs.",
                    "sid": 70,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "7\u20138) more appealing than P0 (Eq.",
                    "sid": 71,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5)?",
                    "sid": 72,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The answer is that the components 1, ... , S are now decoupled, which makes things easier provided each slave subproblem (Eq.",
                    "sid": 73,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "8) can be solved efficiently.",
                    "sid": 74,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In fact, this is always a concern in the mind of the model\u2019s designer when she chooses a decomposition (the framework that we describe in \u00a73, in some sense, alleviates her from this concern).",
                    "sid": 75,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If the score functions are linear, i.e., of the form fs(zs) = Pr\u2208Rs \u03b8s(r)zs(r) for some vector \u03b8s = (\u03b8s (r))r\u2208Rs, then Eq.",
                    "sid": 76,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "8 becomes a linear program, for which a solution exists at a vertex of Zs (which in turn is an element of Ys).",
                    "sid": 77,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Depending on the structure of the problem, Eq.",
                    "sid": 78,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "8 may be solved by brute force, dynamic programming, or specialized combinatorial algorithms (Rush et al., 2010; Koo et al., 2010; Rush and Collins, 2011).",
                    "sid": 79,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Applying the projected subgradient method (Komodakis et al., 2007; Rush et al., 2010) to the master problem (Eq.",
                    "sid": 80,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "7) yields a remarkably simple algorithm, which at each round t solves the subproblems in Eq.",
                    "sid": 81,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "8 for s = 1, ... , S, and then gathers these solutions (call them zt+1 s ) to compute an \u201caveraged\u201d vote for each basic part, where \u03b4(r) = |{s : r E Rs is the number of components which contain part r. An update of the Lagrange variables follows, where \u03b7t is a stepsize.",
                    "sid": 82,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Intuitively, the algorithm pushes for a consensus among the slaves (Eq.",
                    "sid": 83,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "9), via an adjustment of the Lagrange multipliers which takes into consideration deviations from the average (Eq.",
                    "sid": 84,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "10).",
                    "sid": 85,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The subgradient method is guaranteed to converge to the solution of D (Eq.",
                    "sid": 86,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "7), for suitably chosen stepsizes (Shor, 1985; Bertsekas et al., 1999); it also provides a certificate of optimality in case the relaxation is tight (i.e., P = D) and the exact solution has been found.",
                    "sid": 87,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, convergence is slow when S is large (as we will show in the experimental section), and no certificates are available when there is a relaxation gap (P < P0).",
                    "sid": 88,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the next section, we describe the DD-ADMM algorithm (Martins et al., 2011), which does not have these drawbacks and shares a similar simplicity.",
                    "sid": 89,
                    "ssid": 65,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "3 alternating directions method",
            "number": "3",
            "sents": [
                {
                    "text": "There are two reasons why subgradient-based dual decomposition is not completely satisfying: 4Our main concern is P; however solving P' is often a useful step towards that goal, either because a good rounding scheme exists, or because one may build tighter relaxations to approach P (Sontag et al., 2008; Rush and Collins, 2011).",
                    "sid": 90,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Taking a look back at the relaxed primal problem P0 (Eq.",
                    "sid": 91,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "5), we see that any primal feasible solution must satisfy the agreement constraints.",
                    "sid": 92,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This suggests that penalizing violations of these constraints could speed up consensus.",
                    "sid": 93,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Augmented Lagrangian.",
                    "sid": 94,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By adding a penalty term to Eq.",
                    "sid": 95,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "6, we obtain the augmented Lagrangian function (Hestenes, 1969; Powell, 1969): where the parameter \u03c1 > 0 controls the intensity of the penalty.",
                    "sid": 96,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Augmented Lagrangian methods are well-known in the optimization community (see, e.g., Bertsekas et al. (1999), \u00a74.2).",
                    "sid": 97,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They alternate updates to the \u03bb-variables, while seeking to maximize A\u03c1 with respect to z and u.",
                    "sid": 98,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our case, however, this joint maximization poses difficulties, since the penalty term couples the two variables.",
                    "sid": 99,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The alternating directions method of multipliers (ADMM), coined by Gabay and Mercier (1976) and Glowinski and Marroco (1975), sidesteps this issue by performing alternate maximizations, followed by an update of the Lagrange multipliers as in Eq.",
                    "sid": 100,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "10.",
                    "sid": 101,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recently, ADMM has attracted interest, being applied in a variety of problems; see the recent book by Boyd et al. (2011) for an overview.",
                    "sid": 102,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As derived in the App.",
                    "sid": 103,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A, the u-updates in Eq.",
                    "sid": 104,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "13 have a closed form, which is precisely the averaging operation performed by the subgradient method (Eq.",
                    "sid": 105,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "9).",
                    "sid": 106,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We are left with the problem of computing the z-updates.",
                    "sid": 107,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Like in the subgradient approach, the maximization in Eq.",
                    "sid": 108,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "12 can be separated into S independent slave subproblems, which now take the form: Comparing Eq.",
                    "sid": 109,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "8 and Eq.",
                    "sid": 110,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "14, we observe that the only difference is the presence in the latter of a quadratic term which regularizes towards the previous averaged votes ut(r).",
                    "sid": 111,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because of this term, the solution of Eq.",
                    "sid": 112,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "14 for linear score functions may not be at a vertex (in contrast to the subgradient method).",
                    "sid": 113,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We devote \u00a74 to describing exact and efficient ways of solving the problem in Eq.",
                    "sid": 114,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "14 for important, widely used slaves.",
                    "sid": 115,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Before going into details, we mention another advantage of ADMM over the subgradient algorithm: it knows when to stop.",
                    "sid": 116,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Primal and dual residuals.",
                    "sid": 117,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Recall that the subgradient method provides optimality certificates when the relaxation is tight (P = P') and an exact solution of P has been found.",
                    "sid": 118,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While this is good enough when tight relaxations are frequent, as in the settings explored by Rush et al. (2010), Koo et al.",
                    "sid": 119,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2010), and Rush and Collins (2011), it is hard to know when to stop when a relaxation gap exists.",
                    "sid": 120,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We would like to have similar guarantees concerning the relaxed primal P'.5 A general weakness of subgradient algorithms is that they do not have this capacity, and so are usually stopped by specifying a maximum number of iterations.",
                    "sid": 121,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In contrast, ADMM allows to keep track of primal and dual residuals (Boyd et al., 2011).",
                    "sid": 122,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This allows providing certificates not only for the exact solution of P (when the relaxation is tight), but also to terminate when a near optimal solution of the relaxed problem P' has been found.",
                    "sid": 123,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Theprimal residual rt P measures the amount by which the agreement constraints are violated: the dual residual rt D is the amount by which a dual optimality condition is violated (see Boyd et al. (2011), p.18, for details).",
                    "sid": 124,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is computed via: Our stopping criterion is thus that these two residuals are below a threshold, e.g., 1 x 10\u22123.",
                    "sid": 125,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The complete algorithm is depicted as Alg.",
                    "sid": 126,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1.",
                    "sid": 127,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As stated in 5This problem is more important than it may look.",
                    "sid": 128,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Problems with many slaves tend to be less exact, hence relaxation gaps are frequent.",
                    "sid": 129,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Also, when decoding is embedded in training, it is useful to obtain the fractional solution of the relaxed primal P (rather than an approximate integer solution).",
                    "sid": 130,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "See Kulesza and Pereira (2007) and Martins et al. (2009b) for details.",
                    "sid": 131,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Algorithm 1 ADMM-based Dual Decomposition Martins et al. (2011), convergence to the solution of P' is guaranteed with a fixed stepsize \u03b7t = \u03c4\u03c1, with \u03c4 E [1, 1.618] (Glowinski and Le Tallec, 1989, Thm.",
                    "sid": 132,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4.2).",
                    "sid": 133,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In our experiments, we set \u03c4 = 1.5, and adapt \u03c1 as described in (Boyd et al., 2011, p.20).6",
                    "sid": 134,
                    "ssid": 45,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "4 solving the subproblems",
            "number": "4",
            "sents": [
                {
                    "text": "In this section, we address the slave subproblems of DD-ADMM (Eq.",
                    "sid": 135,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "14).",
                    "sid": 136,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We show how these subproblems can be solved efficiently for several important cases that arise in NLP applications.",
                    "sid": 137,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Throughout, we assume that the score functions fs are linear, i.e., they can be written as fs(zs) = P rERs \u03b8s(r)zs(r).",
                    "sid": 138,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is the case whenever a linear model is used, in which case \u03b8s(r) = 1 \u03b4(r)w \u00b7 O(x, r), where w is a weight vector and O(x, r) is a feature vector.",
                    "sid": 139,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is also the scenario studied in previous work in dual decomposition (Rush et al., 2010).",
                    "sid": 140,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Under this assumption, and discarding constant terms, the slave subproblem in Eq.",
                    "sid": 141,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "14 becomes: where as(r) = ut(r)+\u03c1\u22121(\u03b8s(r)+\u03bbts(r)).",
                    "sid": 142,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since Zs is a polytope, Eq.",
                    "sid": 143,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "17 is a quadratic program, which can be solved with a general purpose solver.",
                    "sid": 144,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, that does not exploit the structure of Zs and is inefficient when |Rs |is large.",
                    "sid": 145,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We next show that for many cases, a closed-form solution is available and 6Briefly, we initialize p = 0.03 and then increase/decrease p by a factor of 2 whenever the primal residual becomes > 10 times larger/smaller than the dual residual. can be computed in O(|Rs|) time, up to log factors.7 Pairwise Factors.",
                    "sid": 146,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is the case where RPAIR = {r1, r2, r12}, where r1 and r2 are basic parts and r12 is their conjunction, i.e., we have YPAIR = {hz1, z2, z12i  |z12 = z1 \u2227 z2}.",
                    "sid": 147,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This factor is useful to make conjunctions of variables participate in the score function (see e.g. the grandparent, sibling, and head bigram parts in Fig.",
                    "sid": 148,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1).",
                    "sid": 149,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The convex hull of YPAIR is the polytope ZPAIR = {hz1, z2, z12i \u2208 [0, 1]3  |z12 \u2264 z1, z12 \u2264 z2, z12 \u2265 z1 + z2 \u2212 1}, as shown by Martins et al. (2010).",
                    "sid": 150,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this case, problem (17) can be written as and has a closed form solution (see App.",
                    "sid": 151,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "B).",
                    "sid": 152,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Uniqueness Quantification and XOR.",
                    "sid": 153,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Many problems involve constraining variables to take a single value: for example, in dependency parsing, a modifier can only take one head.",
                    "sid": 154,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This can be expressed as the statement \u2203!y : Q(y) in first-order logic,8 or as a one-hot XOR factor in a factor graph (Smith and Eisner, 2008; Martins et al., 2010).",
                    "sid": 155,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this case, RXOR = {r1, ... , rn}, and YXOR = {hz1, ... , zni \u2208 {0, 1}n  |Pni=1 zi = 1}.",
                    "sid": 156,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The convex hull of YXOR is ZXOR = {hz1, ... , zni \u2208 [0, 1]n  |Pn i=1 zi = 1}.",
                    "sid": 157,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Assume for the sake of simplicity that all parts in RXOR are basic.9 Up to a constant, the slave subproblem becomes: This is the problem of projecting onto the probability simplex, which can be done in O(n log n) time via a sort operation (see App.",
                    "sid": 158,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "C).10 Existential Quantification and OR.",
                    "sid": 159,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Sometimes, only existence is required, not necessarily uniqueness.",
                    "sid": 160,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This can be expressed with disjunctions, existential quantifiers in first-order logic (\u2203y : Q(y)), or as a OR factor.",
                    "sid": 161,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this case, ROR = {r1, ... , rn}, YOR = {hz1, ... , zni \u2208 {0,1}n  |Wni=1 zi = 1}, and the convex hull is ZOR = {hz1, ... , zni \u2208 [0, 1]n  |Pni=1 zi \u2265 1} (see Tab.",
                    "sid": 162,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 in Martins et al. (2010)).",
                    "sid": 163,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The slave subproblem becomes: We derive a procedure in App.",
                    "sid": 164,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "D to compute this projection in O(n log n) runtime, also with a sort.",
                    "sid": 165,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Negations.",
                    "sid": 166,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The two cases above can be extended to allow some of their inputs to be negated.",
                    "sid": 167,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By a change of variables in Eqs.",
                    "sid": 168,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "19\u201320 it is possible to reuse the same black box that solves those problems.",
                    "sid": 169,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The procedure is as follows: The ability to handle negated variables adds a great degree of flexibility.",
                    "sid": 170,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "From De Morgan\u2019s laws, we can now handle conjunctions and implications (since Vni=1 Qi(x) \u21d2 R(x) is equivalent to Wni=1 \u00acQi(x) \u2228 R(x)).",
                    "sid": 171,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Logical Variable Assignments.",
                    "sid": 172,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All previous examples involve taking a group of existing variables and defining a constraint.",
                    "sid": 173,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Alternatively, we may want to define a new variable which is the result of an operation involving other variables.",
                    "sid": 174,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, R(x) := \u2203!y : Q(x, y).",
                    "sid": 175,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This corresponds to the XOR-WITH-OUTPUT factor in Martins et al. (2010).",
                    "sid": 176,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Interestingly, this can be expressed as a XOR where R(x) is negated (i.e., either \u00acR(x) holds or exactly one y satisfies Q(x, y), but not both).",
                    "sid": 177,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A more difficult problem is that of the OR-WITHOUTPUT factor, expressed by the formula R(x) := \u2203y : Q(x, y).",
                    "sid": 178,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have ROR-OUT = {r0, ... , rn},{ and YOR-OUT = hz0, ... , zni \u2208 {0,1}n  |z0 = a to descendant d), nextsibl(h, m, s) (indicating that (h, m) and (h, s) are consecutive siblings), nonproj(h, m) (indicating that (h, m) is a non-projective arc), as well as the auxiliary variables flow(h, m, d) (indicating that arc (h, m) carries flow to d), and lastsibl(h, m, k) (indicating that, up to position k, the last seen modifier of h occurred at position m).",
                    "sid": 179,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The non-basic parts are the pairwise factors sibl(h, m, s), grand(g, h, m), and bigram(b, h, m); as well as each logical formula.",
                    "sid": 180,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Columns 3\u20134 indicate the number of parts of each kind, and the time complexity for solving each subproblem.",
                    "sid": 181,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For a sentence of length n, there are O(n3) parts and the total complexity is O(n3 log n).",
                    "sid": 182,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Vni=1 zi}.",
                    "sid": 183,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The convex hull of YOR-OUT is the following set: ZOR-OUT = I(z0, ... , zn) E [0, 1]n I z0 > En i=1 zi, z0 \ufffd zi, bi = 1, .",
                    "sid": 184,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": ".",
                    "sid": 185,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": ".",
                    "sid": 186,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": ",n} (Martins et al., 2010, Tab.1).",
                    "sid": 187,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The slave subproblem is: The problem in Eq.",
                    "sid": 188,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "21 is more involved than the ones in Eqs.",
                    "sid": 189,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "19\u201320.",
                    "sid": 190,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Yet, there is still an efficient procedure with runtime O(n log n) (see App.",
                    "sid": 191,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "E).",
                    "sid": 192,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By using the result above for negated variables, we are now endowed with a procedure for many other cases, such that AND-WITH-OUTPUT and formulas with universal quantifiers (e.g., R(x) := by : Q(x, y)).",
                    "sid": 193,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Up to a log-factor, the runtimes will be linear in the number of predicates.",
                    "sid": 194,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Larger Slaves.",
                    "sid": 195,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The only disadvantage of DDADMM in comparison with the subgradient algorithm is that there is not an obvious way of solving the subproblem in Eq.",
                    "sid": 196,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "14 exactly for large combinatorial factors, such as the TREE constraint in dependency parsing, or a sequence model.",
                    "sid": 197,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hence, our method seems to be more suitable for decompositions which involve \u201csimple slaves,\u201d even if their number is large.",
                    "sid": 198,
                    "ssid": 64,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, this does not rule out the possibility of using this method otherwise.",
                    "sid": 199,
                    "ssid": 65,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Eckstein and Bertsekas (1992) show that the ADMM algorithm may still converge when the z-updates are inexact.",
                    "sid": 200,
                    "ssid": 66,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Hence the method may still work if the slaves are solved numerically up to some accuracy.",
                    "sid": 201,
                    "ssid": 67,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We defer this to future investigation.",
                    "sid": 202,
                    "ssid": 68,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "5 experiments: dependency parsing",
            "number": "5",
            "sents": [
                {
                    "text": "We used 14 datasets with non-projective dependencies from the CoNLL-2006 and CoNLL-2008 shared tasks (Buchholz and Marsi, 2006; Surdeanu et al., 2008).",
                    "sid": 203,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also used a projective English dataset derived from the Penn Treebank by applying the standard head rules of Yamada and Matsumoto (2003).11 We did not force the parser to output projective trees or unique roots for any of the datasets; everything is learned from the data.",
                    "sid": 204,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We trained by running 10 iterations of the cost-augmented MIRA algorithm (Crammer et al., 2006) with LP-relaxed decoding, as in Martins et al. (2009b).",
                    "sid": 205,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Following common practice (Charniak and Johnson, 2005; Carreras et al., 2008), we employed a coarse-to-fine procedure to prune away unlikely candidate arcs, as described by Koo and Collins (2010).",
                    "sid": 206,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To ensure valid parse trees at test time, we rounded fractional 11As usual, we train on sections \u00a702\u201321, use \u00a722 as validation data, and test on \u00a723.",
                    "sid": 207,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We ran SVMTool (Gim\u00b4enez and Marquez, 2004) to obtain automatic part-of-speech tags for \u00a722\u201323.",
                    "sid": 208,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "solutions as described in Martins et al. (2009a) (yet, solutions were integral most of the time).",
                    "sid": 209,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The parts used in our full model are the ones depicted in Fig.",
                    "sid": 210,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1.",
                    "sid": 211,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that a subgradient-based method could handle some of those parts efficiently (arcs, consecutive siblings, grandparents, and head bigrams) by composing arc-factored models, head automata, and a sequence labeler.",
                    "sid": 212,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, no lightweight decomposition seems possible for incorporating parts for all siblings, directed paths, and non-projective arcs.",
                    "sid": 213,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Tab.",
                    "sid": 214,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 shows the first-order logical formulae that encode the constraints in our model.",
                    "sid": 215,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each formula gives rise to a subproblem which is efficiently solvable (see \u00a74).",
                    "sid": 216,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By ablating some of rows of Tab.",
                    "sid": 217,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1 we recover known methods: The experimental results are shown in Tab.",
                    "sid": 218,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.",
                    "sid": 219,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For comparison, we include the best published results for each dataset (at the best of our knowledge), among transition-based parsers (Nivre et al., 2006; Huang and Sagae, 2010), graph-based parsers (McDonald et al., 2006; Koo and Collins, 2010), hybrid methods (Nivre and McDonald, 2008; Martins et al., 2008), and turbo parsers (Martins et al., 2010; Koo et al., 2010).",
                    "sid": 220,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our full model achieved the best reported scores for 7 datasets.",
                    "sid": 221,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The last two columns show a consistent improvement (with the exceptions of Chinese and Arabic) when using the full set of features over a second order model with grandparent and consecutive siblings, which is our reproduction of the model of Koo et al. (2010).13 12Although Martins et al.",
                    "sid": 222,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2009a) also incorporated consecutive siblings in one of their configurations, our constraints are tighter than theirs.",
                    "sid": 223,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "See App.",
                    "sid": 224,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "F. 13Note however that the actual results of Koo et al. (2010) are higher than our reproduction, as can be seen in the second column.",
                    "sid": 225,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The differences are due to the features that were used and on the way the models were trained.",
                    "sid": 226,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The cause is not search error: exact decoding with an ILP solver (CPLEX) revealed no significant difference with respect to our G+CS column.",
                    "sid": 227,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We leave further analysis for future work.",
                    "sid": 228,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "et al. (2008), [KC10] is Koo and Collins (2010), [Ma10] is Martins et al.",
                    "sid": 229,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(2010), and [Ko10] is Koo et al. (2010).",
                    "sid": 230,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In columns 3\u20134, \u201cFull\u201d is our full model, and \u201cG+CS\u201d is our reproduction of the model of Koo et al. (2010), i.e., the same as \u201cFull\u201d but with all features ablated excepted for grandparents and consecutive siblings.",
                    "sid": 231,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Feature ablation and error analysis.",
                    "sid": 232,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We conducted a simple ablation study by training several models on the English PTB with different sets of features.",
                    "sid": 233,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Tab.",
                    "sid": 234,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3 shows the results.",
                    "sid": 235,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As expected, performance keeps increasing as we use models with greater expressive power.",
                    "sid": 236,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We show some concrete examples in App.",
                    "sid": 237,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "G of sentences that the full model parsed correctly, unlike less expressive models.",
                    "sid": 238,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Convergence speed and optimality.",
                    "sid": 239,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Fig.",
                    "sid": 240,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2 compares the performance of DD-ADMM and the subgradient algorithms in the validation section of the PTB.14 For the second order model, the subgradient 14The learning rate in the subgradient method was set as 77t = 770/(1+Nincr(t)), as in Koo et al. (2010), where Nincr(t) is the number of dual increases up to the tth iteration, and 770 is chosen to maximize dual decrease after 20 iterations (in a per sentence basis).",
                    "sid": 241,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Those preliminary iterations are not plotted in Fig.",
                    "sid": 242,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2. method has more slaves than in Koo et al. (2010): it has a slave imposing the TREE constraint (whose subproblems consists on finding a minimum spanning tree) and several for the all-sibling parts, yielding an average number of 310.5 and a maximum of 4310 slaves.",
                    "sid": 243,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These numbers are still manageable, and we observe that a \u201cgood\u201d UAS is achieved relatively quickly.",
                    "sid": 244,
                    "ssid": 42,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The ADMM method has many more slaves due to the multicommodity flow constraints (average 1870.8, maximum 65446), yet it attains optimality sooner, as can be observed in the right plot.",
                    "sid": 245,
                    "ssid": 43,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the full model, the subgradient-based method becomes extremely slow, and the UAS score severely degrades (after 1000 iterations it is 2% less than the one obtained with the ADMM-based method, with very few instances having been solved to optimality).",
                    "sid": 246,
                    "ssid": 44,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The reason is the number of slaves: in this configuration and dataset the average number of slaves per instance is 3327.4, and the largest number is 113207.",
                    "sid": 247,
                    "ssid": 45,
                    "kind_of_tag": "s"
                },
                {
                    "text": "On the contrary, the ADMM method keeps a robust performance, with a large fraction of optimality certificates in early iterations.",
                    "sid": 248,
                    "ssid": 46,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Runtime and caching strategies.",
                    "sid": 249,
                    "ssid": 47,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Despite its suitability to problems with many overlapping components, our parser is still 1.6 times slower than Koo et al. (2010) (0.34 against 0.21 sec./sent. in PTB \u00a723), and is far beyond the speed of transition-based parsers (e.g., Huang and Sagae (2010) take 0.04 sec./sent. on the same data, although accuracy is lower, 92.1%).",
                    "sid": 250,
                    "ssid": 48,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our implementation, however, is not fully optimized.",
                    "sid": 251,
                    "ssid": 49,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We next describe how considerable speed-ups are achieved by caching the subproblems, following a strategy similar to Koo et al. (2010).",
                    "sid": 252,
                    "ssid": 50,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Fig.",
                    "sid": 253,
                    "ssid": 51,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3 illustrates the point.",
                    "sid": 254,
                    "ssid": 52,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After a few iterations, many variables u(r) see a consensus being achieved (i.e., ut(r) = zt+1 s (r), \u2200s) and enter an idle state: they are left unchanged by the u-update in Eq.",
                    "sid": 255,
                    "ssid": 53,
                    "kind_of_tag": "s"
                },
                {
                    "text": "9, and so do the Lagrange variables At+1 s (r) (Eq.",
                    "sid": 256,
                    "ssid": 54,
                    "kind_of_tag": "s"
                },
                {
                    "text": "10).",
                    "sid": 257,
                    "ssid": 55,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If by iteration t all variables in a subproblem s are idle, then zt+1 s (r) = zts(r), hence the subproblem does not need to be resolved.15 Fig.",
                    "sid": 258,
                    "ssid": 56,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3 shows that many variables and subproblems are left untouched after the first few rounds.",
                    "sid": 259,
                    "ssid": 57,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, Fig.",
                    "sid": 260,
                    "ssid": 58,
                    "kind_of_tag": "s"
                },
                {
                    "text": "4 compares the runtimes of our implementation of DD-ADMM with those achieved by a state-of-the-art LP solver, CPLEX, in its best performing configuration: the simplex algorithm applied to the dual LP.",
                    "sid": 261,
                    "ssid": 59,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We observe that DD-ADMM is faster in some regimes but slower in others.",
                    "sid": 262,
                    "ssid": 60,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For short sentences (< 15 words), DD-ADMM tends to be faster.",
                    "sid": 263,
                    "ssid": 61,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For longer sentences, CPLEX is quite effective as it uses good heuristics for the pivot steps in the simplex algorithm; however, we observed that it sometimes gets trapped on large problems.",
                    "sid": 264,
                    "ssid": 62,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note also that DD-ADMM is not fully optimized, and that it is much more amenable to parallelization than the simplex algorithm, since it is composed of many independent slaves.",
                    "sid": 265,
                    "ssid": 63,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This suggests potentially significant speed-ups in multi-core environments.",
                    "sid": 266,
                    "ssid": 64,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "6 related work",
            "number": "6",
            "sents": [
                {
                    "text": "Riedel and Clarke (2006) first formulated dependency parsing as an integer program, along with logical constraints.",
                    "sid": 267,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The multicommodity flow formulation was introduced by Martins et al. (2009a), along with some of the parts considered here.",
                    "sid": 268,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Koo et al. (2010) proposed a subgradient-based dual decomposition method that elegantly combines head automata with maximum spanning tree algorithms; these parsers, as well as the loopy belief propagation method of Smith and Eisner (2008), are all instances of turbo parsers (Martins et al., 2010).",
                    "sid": 269,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "DD-ADMM has been proposed and theoretically analyzed by Martins et al. (2011) for problems representable as factor graphs.",
                    "sid": 270,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The general ADMM method has a long-standing history in optimization (Hestenes, 1969; Powell, 1969; Glowinski and Marroco, 1975; Gabay and Mercier, 1976; Boyd et al., 2011).",
                    "sid": 271,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Other methods have been recently proposed to accelerate dual decomposition, such as Jojic et al. (2010) and Meshi and Globerson (2011) (the latter applying ADMM in the dual rather than the primal).",
                    "sid": 272,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While our paper shows limitations of the subgradient method when there are many overlapping components, this method may still be advantageous over ADMM in problems that are nicely decomposable, since it often allows reusing existing combinatorial machinery.",
                    "sid": 273,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Yet, the scenario we consider here is realistic in NLP, where we often have to deal with not-lightly-decomposable constrained problems (e.g., exploiting linguistic knowledge).",
                    "sid": 274,
                    "ssid": 8,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "7 conclusion",
            "number": "7",
            "sents": [
                {
                    "text": "We have introduced new feature-rich turbo parsers.",
                    "sid": 275,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since exact decoding is intractable, we solve an LP relaxation through a recently proposed consensus algorithm, DD-ADMM, which is suitable for problems with many overlapping components.",
                    "sid": 276,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We study the empirical runtime and convergence properties of DD-ADMM, complementing the theoretical treatment in Martins et al. (2011).",
                    "sid": 277,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "DD-ADMM compares favourably against the subgradient method in several aspects: it is faster to reach a consensus, it has better stopping conditions, and it works better in non-lightweight decompositions.",
                    "sid": 278,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "While its slave subproblems are more involved, we derived closedform solutions for many cases of interest, such as first-order logic formulas and combinatorial factors.",
                    "sid": 279,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "DD-ADMM may be useful in other frameworks involving logical constraints, such as the models for compositional semantics presented by Liang et al. (2011).",
                    "sid": 280,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Non-logical constraints may also yield efficient subproblems, e.g., the length constraints in summarization and compression (Clarke and Lapata, 2008; Martins and Smith, 2009; BergKirkpatrick et al., 2011).",
                    "sid": 281,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, DD-ADMM can be adapted to tighten its relaxations towards exact decoding, as in Sontag et al. (2008) and Rush and Collins (2011).",
                    "sid": 282,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We defer this for future work.",
                    "sid": 283,
                    "ssid": 9,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgments",
            "number": "8",
            "sents": [
                {
                    "text": "We thank all reviewers for their comments, Eric Xing for helpful discussions, and Terry Koo and Sasha Rush for answering questions about their parser and for providing code.",
                    "sid": 284,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A. M. was supported by a FCT/ICTI grant through the CMU-Portugal Program, and by Priberam.",
                    "sid": 285,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This work was partially supported by the FET programme (EU FP7), under the SIMBAD project (contract 213250).",
                    "sid": 286,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "N. S. was supported by NSF CAREER IIS-1054319.",
                    "sid": 287,
                    "ssid": 4,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}