{
    "ID": "P12-2058",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Heuristic Cube Pruning in Linear Time",
                    "sid": 0,
                    "ssid": null,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We propose a novel heuristic algorithm for Cube Pruning running in linear time in the beam size.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Empirically, we show a gain in running time of a standard machine translation system, at a small loss in accuracy.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "1 introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Since its first appearance in (Huang and Chiang, 2005), the Cube Pruning (CP) algorithm has quickly gained popularity in statistical natural language processing.",
                    "sid": 3,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Informally, this algorithm applies to scenarios in which we have the k-best solutions for two input sub-problems, and we need to compute the kbest solutions for the new problem representing the combination of the two sub-problems.",
                    "sid": 4,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "CP has applications in tree and phrase based machine translation (Chiang, 2007; Huang and Chiang, 2007; Pust and Knight, 2009), parsing (Huang and Chiang, 2005), sentence alignment (Riesa and Marcu, 2010), and in general in all systems combining inexact beam decoding with dynamic programming under certain monotonic conditions on the definition of the scores in the search space.",
                    "sid": 5,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Standard implementations of CP run in time O(k log(k)), with k being the size of the input/output beams (Huang and Chiang, 2005).",
                    "sid": 6,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Gesmundo and Henderson (2010) propose Faster CP (FCP) which optimizes the algorithm but keeps the O(k log(k)) time complexity.",
                    "sid": 7,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Here, we propose a novel heuristic algorithm for CP running in time O(k) and evaluate its impact on the efficiency and performance of a real-world machine translation system.",
                    "sid": 8,
                    "ssid": 6,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "2 preliminaries",
            "number": "2",
            "sents": [
                {
                    "text": "Let G = (x0, ... , xk\u22121) be a list over R, that is, an ordered sequence of real numbers, possibly with repetitions.",
                    "sid": 9,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We write |G |= k to denote the length of G. We say that G is descending if xi > xj for every i, j with 0 < i < j < k. Let G1 = (x0, ... , xk\u22121) and G2 = (y0, ... , yk\u2032\u22121) be two descending lists over R. We write G1 \u00ae G2 to denote the descending list with elements xi + yj for every i, j with 0 < i < k and 0 < j < k\u2032.",
                    "sid": 10,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In cube pruning (CP) we are given as input two descending lists G1, G2 over R with |G1 |= |G2 |= k, and we are asked to compute the descending list consisting of the first k elements of G1 \u00ae G2.",
                    "sid": 11,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A problem related to CP is the k-way merge problem (Horowitz and Sahni, 1983).",
                    "sid": 12,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given descending lists Gi for every i with 0 < i < k, we write mergek\u22121 i=0 Gi to denote the \u201cmerge\u201d of all the lists Gi, that is, the descending list with all elements from the lists Gi, including repetitions.",
                    "sid": 13,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For A E R we define shift(G, A) = G \u00ae (A).",
                    "sid": 14,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In words, shift(G, A) is the descending list whose elements are obtained by \u201cshifting\u201d the elements of G by A, preserving the order.",
                    "sid": 15,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let G1, G2 be descending lists of length k, with G2 = (y0, .",
                    "sid": 16,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": ".",
                    "sid": 17,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": ".",
                    "sid": 18,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", yk\u22121).",
                    "sid": 19,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then we can express the output of CP on G1, G2 as the list truncated after the first k elements.",
                    "sid": 20,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This shows that the CP problem is a particular instance of the k-way merge problem, in which all input lists are related by k independent shifts.",
                    "sid": 21,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Computation of the solution of the k-way merge problem takes time O(q log(k)), where q is the size of the output list.",
                    "sid": 22,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In case each input list has length k this becomes O(k2 log(k)), and by restricting the computation to the first k elements, as required by the CP problem, we can further reduce to O(k log(k)).",
                    "sid": 23,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is the already known upper bound on the CP problem (Huang and Chiang, 2005; Gesmundo and Henderson, 2010).",
                    "sid": 24,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unfortunately, there seems to be no way to achieve an asymptotically faster algorithm by exploiting the restriction that the input lists are all related by some shifts.",
                    "sid": 25,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Nonetheless, in the next sections we use the above ideas to develop a heuristic algorithm running in time linear in k.",
                    "sid": 26,
                    "ssid": 18,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "3 cube pruning with constant slope",
            "number": "3",
            "sents": [
                {
                    "text": "Consider lists L1, L2 defined as in section 2.",
                    "sid": 27,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We say that L2 has constant slope if yi\u22121 \u2212 yi = 0 > 0 for every i with 0 < i < k. Throughout this section we assume that L2 has constant slope, and we develop an (exact) linear time algorithm for solving the CP problem under this assumption. all elements from L1 that belong to Ii.",
                    "sid": 28,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, moving down one segment in L1 is the closest equivalent to moving down one element in L2.",
                    "sid": 29,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let t = min{k, s}; we define descending lists Mi, 0 < i < t, as follows.",
                    "sid": 30,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We set M0 = shift(Q0, y0), and for 1 < i < t we let as the descending sublist consisting of all elements of that column that belong to shift(Ii, yj).",
                    "sid": 31,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then we have Qi,j = shift(Qi, yj).",
                    "sid": 32,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For any d with 0 < d < t, consider now all segments Qi,j with i + j = d, forming a subantidiagonal in L. We observe that these segments contain all and only those elements of L that belong to the interval Id.",
                    "sid": 33,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is not difficult to show by induction that these elements are exactly the elements that appear in descending order in the list Mi defined in (2).",
                    "sid": 34,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We can then directly use relation (2) to iteratively compute CP on two lists of length k, under our assumption that one of the two lists has constant slope.",
                    "sid": 35,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Using the fact that the merge of two lists as in (2) can be computed in time linear in the size of the output list, it is not difficult to implement the above algorithm to run in time O(k).",
                    "sid": 36,
                    "ssid": 10,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "4 linear time heuristic solution",
            "number": "4",
            "sents": [
                {
                    "text": "In this section we further elaborate on the exact algorithm of section 3 for the constant slope case, and develop a heuristic solution for the general CP problem.",
                    "sid": 37,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let L1, L2, L and k be defined as in sections 2 and 3.",
                    "sid": 38,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Despite the fact that L2 does not have a constant slope, we can still split each column of L into segments, as follows.",
                    "sid": 39,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let eIi, 0 < i < k \u2212 1, be the left-open interval (x0 + yi+1, x0 + yi] of R. Note that, unlike the case of section 3, intervals eIi\u2019s are not all of the same size now.",
                    "sid": 40,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let also eIk\u22121 = [xk\u22121 + yk\u22121, x0 + yk\u22121].",
                    "sid": 41,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each i, j with 0 < j < k and 0 < i < k \u2212 j, we define segment eQi,j as the descending sublist consisting of all elements of the j-th column of L that belong to eIi+j.",
                    "sid": 42,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this way, the j-th column We claim that the ordered concatenation of M0, M1, ... , Mt\u22121 truncated after the first k elements is exactly the output of CP on input L1, L2.",
                    "sid": 43,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To prove our claim, it helps to visualize the descending list L1 \u2295 L2 (of size k2) as a k x k matrix L whose j-th column is shift(L1, yj), 0 < j < k. For an interval I = (x, x\u2032], we define shift(I, y) = (x + y, x\u2032 + y].",
                    "sid": 44,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Similarly to what we have done with L1, we can split each column of L into s segments.",
                    "sid": 45,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each i, j with 0 < i < s and 0 < j < k, we define the i-th segment of the j-th column, written Qi,j, we have a variable number of segments per column.",
                    "sid": 46,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that segments eQi,j with a constant value of i+j contain all and only those elements of L that belong to the left-open interval eIi+j.",
                    "sid": 47,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Similarly to section 3, we define descending lists fMi, 0 < i < k, by setting fM0 = eQ0,0 and, for 1 < i < k, by letting Note that the function path( Mi\u22121, L) should not return shift(fMi\u22121, \u22120), for some value 0, as in the case of (2).",
                    "sid": 48,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is because input list L2 does not have constant slope in general.",
                    "sid": 49,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In an exact algorithm, path(fMi\u22121, L) should return the descending list L\u22c6 i\u22121 = mergeij=1 e\ufffdi\u2212j,j: Unfortunately, we do not know how to compute such a i-way merge without introducing a logarithmic factor.",
                    "sid": 50,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our solution is to define path(fMi\u22121, L) in such a way that it computes a list Li\u22121 which is a permutation of the correct solution L\u22c6 i\u22121.",
                    "sid": 51,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To do this, we consider the \u201crelative\u201d path starting at x0 +yi\u22121 that we need to follow in L in order to collect all the elements of fMi\u22121 in the given order.",
                    "sid": 52,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We then apply such a path starting at x0 + yi and return the list of collected elements.",
                    "sid": 53,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, we compute the output list eL\u22c6 as the concatenation of all lists fMi up to the first k elements.",
                    "sid": 54,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is not difficult to see that when L2 has constant slope we ehave Mi = Mi for all i with 0 \u2264 i < k, and list L\u22c6 is the exact solution to the CP problem.",
                    "sid": 55,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When L2 does not have a constant slope, list eL\u22c6 might depart from the exact solution in two respects: it might not be a descending list, because of local variations in the ordering of the elements; and it might not be a permutation of the exact solution, because of local variations at the end of the list.",
                    "sid": 56,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the next section we evaluate the impact that referColumn =0 We encode a relative path (mentioned above) as a sequence of elements, called displacements, each of the form [i, S].",
                    "sid": 57,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Here i is the index of the next row, and S represents the relative displacement needed to reach the next column, to be summed to a variable called referColumn denoting the index of the column of the first element of the path.",
                    "sid": 58,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The reason why only the second coordinate is a relative value is that we shift paths only horizontally (row indices are preserved).",
                    "sid": 59,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The relative path is stored in a circular list C, with displacement [0, 1] marking the starting point (paths are always shifted one element to the right).",
                    "sid": 60,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When merging the list obtained through the path for Mi\u22121 with segment e\ufffdi,0, as specified in (3), we update C accordingly, so that the new relative path can be used at the next round for fMi.",
                    "sid": 61,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The merge operator is implemented by the while cycle at lines 8 to 19 of algorithm 1.",
                    "sid": 62,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The if statement at line 9 tests whether the next step should follow the relative path for fMi\u22121 stored in C (lines 10 to 14) or LCP speed gain over CP LCP speed gain over FCP else depart visiting an element from Qi,0 in the first column of L (lines 16 to 19).",
                    "sid": 63,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the latter case, we update C with the new displacement (line 18), where the function insert() inserts a new element before the one currently pointed to.",
                    "sid": 64,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The function next() at line 13 moves the iterator to the next element and then returns its value.",
                    "sid": 65,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A running example of algorithm 1 is reported in Figure 1.",
                    "sid": 66,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The input lists are L1 = (12, 7, 5, 0), L2 = (9, 6, 3, 0).",
                    "sid": 67,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each of the picture in the sequence represents the state of the algorithm when the test at line 9 is executed.",
                    "sid": 68,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The value in the shaded cell in the first column is xdeviate, while the value in the other shaded cell is xfollow.",
                    "sid": 69,
                    "ssid": 33,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "5 experiments",
            "number": "5",
            "sents": [
                {
                    "text": "We implement Linear CP (LCP) on top of Cdec (Dyer et al., 2010), a widely-used hierarchical MT system that includes implementations of standard CP and FCP algorithms.",
                    "sid": 70,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The experiments were executed on the NIST 2003 Chinese-English parallel corpus.",
                    "sid": 71,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The training corpus contains 239k sentence pairs.",
                    "sid": 72,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A binary translation grammar was extracted using a suffix array rule extractor (Lopez, 2007).",
                    "sid": 73,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The model was tuned using MERT (Och, 2003).",
                    "sid": 74,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The algorithms are compared on the NIST-03 test set, which contains 919 sentence pairs.",
                    "sid": 75,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The features used are basic lexical features, word penalty and a 3-gram Language Model (Heafield, 2011).",
                    "sid": 76,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since we compare decoding algorithms on the same search space, the accuracy comparison is done in terms of search score.",
                    "sid": 77,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each algorithm we compute the average score of the best translation found for the test sentences.",
                    "sid": 78,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In Figure 2 we plot the score-loss relative to standard CP average score.",
                    "sid": 79,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that the FCP loss is always < 3%, and the LCP loss is always < 7%.",
                    "sid": 80,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The dotted line plots the loss of a baseline linear time heuristic algorithm which assumes that both input lists have constant slope, and that scans L along parallel lines whose steep is the ratio of the average slope of each input list.",
                    "sid": 81,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The baseline greatly deteriorates the accuracy: this shows that finding a reasonable linear time heuristic algorithm is not trivial.",
                    "sid": 82,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We can assume a bounded loss in accuracy, because for larger beam size all the algorithms tend to converge to exhaustive search.",
                    "sid": 83,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We found that these differences in search score resulted in no significant variations in BLEU score (e.g. with k = 30, CP reaches 32.2 while LCP 32.3).",
                    "sid": 84,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The speed comparison is done in terms of algorithm run-time.",
                    "sid": 85,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 3 plots the relative speed gain of LCP over standard CP and over FCP.",
                    "sid": 86,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given the log-scale used for the beam size k, the linear shape of the speed gain over FCP (and CP) in Figure 3 empirically confirms that LCP has a log(k) asymptotic advantage over FCP and CP.",
                    "sid": 87,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition to Chinese-English, we ran experiments on translating English to French (from Europarl corpus (Koehn, 2005)), and find that the LCP score-loss relative to CP is < 9% while the speed relative advantage of LCP over CP increases in average by 11.4% every time the beam size is multiplied by 10 (e.g. with k = 1000 the speed advantage is 34.3%).",
                    "sid": 88,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These results confirm the bounded accuracy loss and log(k) speed advantage of LCP.",
                    "sid": 89,
                    "ssid": 20,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}