{
    "ID": "W05-0602",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "A Statistical Semantic Parser That Integrates Syntax And Semantics",
                    "sid": 0,
                    "ssid": null,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We introduce a learning semantic parser,SCISSOR, that maps natural-language sentences to a detailed, formal, meaning representation language.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It first usesan integrated statistical parser to pro duce a semantically augmented parse tree, in which each non-terminal node has both a syntactic and a semantic label.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A compositional-semantics procedure is then used to map the augmented parse tree into a final meaning representation.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We evaluate the system in two domains, a natural-language database interface and an interpreter for coaching instructions in robotic soccer.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We present experimentalresults demonstrating that SCISSOR produces more accurate semantic representa tions than several previous approaches.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Most recent work in learning for semantic parsinghas focused on ?shallow?",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "analysis such as seman tic role labeling (Gildea and Jurafsky, 2002).",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In thispaper, we address the more ambitious task of learning to map sentences to a complete formal meaning representation language (MRL).",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We consider two MRL?s that can be directly used to perform useful, complex tasks.",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first is a Prolog-based language used in a previously-developed corpus of queries to a database on U.S. geography (Zelle and Mooney, 1996).",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The second MRL is a coaching language for robotic soccer developed for the RoboCup Coach Competition, in which AI researchers compete to provide effective instructions to a coachable team of agents in a simulated soccer domain (et al, 2003).We present an approach based on a statisti cal parser that generates a semantically augmentedparse tree (SAPT), in which each internal node includes both a syntactic and semantic label.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We aug ment Collins?",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "head-driven model 2 (Collins, 1997) to incorporate a semantic label on each internalnode.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By integrating syntactic and semantic inter pretation into a single statistical model and finding the globally most likely parse, an accurate combined syntactic/semantic analysis can be obtained.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Once a SAPT is generated, an additional step is required totranslate it into a final formal meaning representa tion (MR).",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our approach is implemented in a system called SCISSOR (Semantic Composition that IntegratesSyntax and Semantics to get Optimal Representations).",
                    "sid": 16,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Training the system requires sentences an notated with both gold-standard SAPT?s and MR?s. We present experimental results on corpora for bothgeography-database querying and Robocup coaching demonstrating that SCISSOR produces more accurate semantic representations than several previ ous approaches based on symbolic learning (Tang and Mooney, 2001; Kate et al, 2005).",
                    "sid": 17,
                    "ssid": 17,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "target mrl?s. ",
            "number": "2",
            "sents": [
                {
                    "text": "We used two MRLs in our experiments: CLANG and GEOQUERY.",
                    "sid": 18,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "They capture the meaning of linguistic utterances in their domain in a formal language.",
                    "sid": 19,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "9 2.1 CLANG: the RoboCup Coach Language.",
                    "sid": 20,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "RoboCup (www.robocup.org) is an interna tional AI research initiative using robotic soccer as its primary domain.",
                    "sid": 21,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the Coach Competition, teams of agents compete on a simulated soccer field and receive advice from a team coach in a formal language called CLANG.",
                    "sid": 22,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In CLANG, tactics and behaviors are expressed in terms of if-then rules.",
                    "sid": 23,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As described in (et al, 2003), its grammar consists of 37 non-terminal symbols and 133 productions.",
                    "sid": 24,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Below is a sample rule with its English gloss: ((bpos (penalty-area our)) (do (player-except our {4}) (pos (half our)))) ?If the ball is in our penalty area, all our players except player 4 should stay in our half.?",
                    "sid": 25,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.2 GEOQUERY: a DB Query Language.",
                    "sid": 26,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "GEOQUERY is a logical query language for a small database of U.S. geography containing about 800 facts.",
                    "sid": 27,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This domain was originally chosen to testcorpus-based semantic parsing due to the avail ability of a hand-built natural-language interface, GEOBASE, supplied with Turbo Prolog 2.0 (Borland International, 1988).",
                    "sid": 28,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The GEOQUERY language consists of Prolog queries augmented with several meta-predicates (Zelle and Mooney, 1996).",
                    "sid": 29,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Below is a sample query with its English gloss: answer(A,count(B,(city(B),loc(B,C), const(C,countryid(usa))),A)) ?How many cities are there in the US??",
                    "sid": 30,
                    "ssid": 13,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "semantic parsing framework. ",
            "number": "3",
            "sents": [
                {
                    "text": "This section describes our basic framework for semantic parsing, which is based on a fairly standard approach to compositional semantics (Juraf sky and Martin, 2000).",
                    "sid": 31,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First, a statistical parseris used to construct a SAPT that captures the se mantic interpretation of individual words and the basic predicate-argument structure of the sentence.Next, a recursive procedure is used to composition ally construct an MR for each node in the SAPT from the semantic label of the node and the MR?s has2 VP?bowner player the ball NN?player CD?unum NP?null NN?null VB?bowner S?bowner NP?player DT?null PRP$?team our Figure 1: An SAPT for a simple CLANG sentence.",
                    "sid": 32,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Function:BUILDMR(N;K) Input: The root node N of a SAPT; predicate-argument knowledge, K, for the MRL.",
                    "sid": 33,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Notation: X MR is the MR of node X . Output: N MR C i := the ith child node of N; 1  i  n C h = GETSEMANTICHEAD(N ) // see Section 3 C h MR = BUILDMR(C h ; K) for each other child C i where i 6= h C i MR = BUILDMR(C i ; K) COMPOSEMR(C h MR , C i MR ; K) // see Section 3 N MR = C h MR Figure 2: Computing an MR from a SAPT.of its children.",
                    "sid": 34,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Syntactic structure provides information of how the parts should be composed.",
                    "sid": 35,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Ambiguities arise in both syntactic structure and the semantic interpretation of words and phrases.",
                    "sid": 36,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By in tegrating syntax and semantics in a single statisticalparser that produces an SAPT, we can use both se mantic information to resolve syntactic ambiguitiesand syntactic information to resolve semantic ambi guities.",
                    "sid": 37,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In a SAPT, each internal node in the parse tree is annotated with a semantic label.",
                    "sid": 38,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 1 showsthe SAPT for a simple sentence in the CLANG do main.",
                    "sid": 39,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The semantic labels which are shown afterdashes are concepts in the domain.",
                    "sid": 40,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Some type con cepts do not take arguments, like team and unum (uniform number).",
                    "sid": 41,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Some concepts, which we refer to as predicates, take an ordered list of arguments,like player and bowner (ball owner).",
                    "sid": 42,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The predicateargument knowledge, K , specifies, for each predicate, the semantic constraints on its arguments.",
                    "sid": 43,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Con straints are specified in terms of the concepts that can fill each argument, such as player(team, unum) and bowner(player).",
                    "sid": 44,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A special semantic label nullis used for nodes that do not correspond to any con cept in the domain.Figure 2 shows the basic algorithm for build ing an MR from an SAPT.",
                    "sid": 45,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Figure 3 illustrates the 10 player the ball N3?bowner(_)N7?player(our,2) N2?null null null N4?player(_,_) N5?team our N6?unum 2 N1?bowner(_) has N8?bowner(player(our,2)) Figure 3: MR?s constructed for each SAPT Node.",
                    "sid": 46,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "construction of the MR for the SAPT in Figure 1.Nodes are numbered in the order in which the con struction of their MR?s are completed.",
                    "sid": 47,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The first step, GETSEMANTICHEAD , determines which of anode?s children is its semantic head based on hav ing a matching semantic label.",
                    "sid": 48,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the example, node N3 is determined to be the semantic head of the sentence, since its semantic label, bowner, matchesN8?s semantic label.",
                    "sid": 49,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Next, the MR of the seman tic head is constructed recursively.",
                    "sid": 50,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The semantichead of N3 is clearly N1.",
                    "sid": 51,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since N1 is a part-ofspeech (POS) node, its semantic label directly de termines its MR, which becomes bowner( ).",
                    "sid": 52,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Once the MR for the head is constructed, the MR of all other (non-head) children are computed recursively,and COMPOSEMR assigns their MR?s to fill the arguments in the head?s MR to construct the com plete MR for the node.",
                    "sid": 53,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Argument constraints areused to determine the appropriate filler for each ar gument.",
                    "sid": 54,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since, N2 has a null label, the MR of N3 also becomes bowner( ).",
                    "sid": 55,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When computing the MR for N7, N4 is determined to be the head with the MR: player( , ).",
                    "sid": 56,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "COMPOSEMR then assigns N5?s MR to fill the team argument and N6?s MR to fill the unum argument to construct N7?s complete MR: player(our, 2).",
                    "sid": 57,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This MR in turn is composed withthe MR for N3 to yield the final MR for the sen tence: bowner(player(our,2)).",
                    "sid": 58,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For MRL?s, such as CLANG, whose syntax doesnot strictly follow a nested set of predicates and ar guments, some final minor syntactic adjustment of the final MR may be needed.",
                    "sid": 59,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the example, thefinal MR is (bowner (player our f2g)).",
                    "sid": 60,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the fol lowing discussion, we ignore the difference between these two.There are a few complications left which re quire special handling when generating MR?s,like coordination, anaphora resolution and noncompositionality exceptions.",
                    "sid": 61,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Due to space limitations, we do not present the straightforward tech niques we used to handle them.",
                    "sid": 62,
                    "ssid": 32,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "corpus annotation. ",
            "number": "4",
            "sents": [
                {
                    "text": "This section discusses how sentences for training SCISSOR were manually annotated with SAPT?s. Sentences were parsed by Collins?",
                    "sid": 63,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "head-driven model 2 (Bikel, 2004) (trained on sections 02-21 of the WSJ Penn Treebank) to generate an initial syntactic parse tree.",
                    "sid": 64,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The trees were then manually corrected and each node augmented with a semantic label.",
                    "sid": 65,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First, semantic labels for individual words, called semantic tags, are added to the POS nodes in thetree.",
                    "sid": 66,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The tag null is used for words that have no cor responding concept.",
                    "sid": 67,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Some concepts are conveyedby phrases, like ?has the ball?",
                    "sid": 68,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "for bowner in the pre vious example.",
                    "sid": 69,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Only one word is labeled with the concept; the syntactic head word (Collins, 1997) is preferred.",
                    "sid": 70,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "During parsing, the other words in thephrase will provide context for determining the se mantic label of the head word.",
                    "sid": 71,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Labels are added to the remaining nodes in abottom-up manner.",
                    "sid": 72,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For each node, one of its chil dren is chosen as the semantic head, from which it will inherit its label.",
                    "sid": 73,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The semantic head is chosen as the child whose semantic label can take the MR?s of the other children as arguments.",
                    "sid": 74,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This step wasdone mostly automatically, but required some man ual corrections to account for unusual cases.",
                    "sid": 75,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order for COMPOSEMR to be able to construct the MR for a node, the argument constraints for its semantic head must identify a unique concept to fill each argument.",
                    "sid": 76,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, some predicates take multiple arguments of the same type, such as point.num(num,num), which is a kind of point that represents a field coordinate in CLANG.",
                    "sid": 77,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this case, extra nodes are inserted in the treewith new type concepts that are unique for each ar gument.",
                    "sid": 78,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An example is shown in Figure 4 in whichthe additional type concepts num1 and num2 are in troduced.",
                    "sid": 79,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Again, during parsing, context will be used to determine the correct type for a given word.",
                    "sid": 80,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The point label of the root node of Figure 4 is the concept that includes all kinds of points in CLANG.",
                    "sid": 81,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Once a predicate has all of its arguments filled, we 11 ,0.5 , ?RRB?",
                    "sid": 82,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "?RRB??null ?LRB?",
                    "sid": 83,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "0.1 CD?num CD?num ?LRB??point.num PRN?point CD?num1 CD?num2Figure 4: Adding new types to disambiguate argu ments.",
                    "sid": 84,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "use the most general CLANG label for its concept (e.g. point instead of point.num).",
                    "sid": 85,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This generality avoids sparse data problems during training.",
                    "sid": 86,
                    "ssid": 24,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "integrated parsing model. ",
            "number": "5",
            "sents": [
                {
                    "text": "5.1 Collins Head-Driven Model 2.",
                    "sid": 87,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Collins?",
                    "sid": 88,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "head-driven model 2 is a generative, lexi calized model of statistical parsing.",
                    "sid": 89,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the following section, we follow the notation in (Collins, 1997).",
                    "sid": 90,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each non-terminal X in the tree is a syntactic label, which is lexicalized by annotating it with a word, w, and a POS tag, t syn . Thus, we write a non-.",
                    "sid": 91,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "terminal as X(x), where X is a syntactic label and x = hw; t syn i. X(x) is then what is generated by the generative model.",
                    "sid": 92,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each production LHS ) RHS in the PCFG is in the form: P (h)!L n (l n ):::L 1 (l 1 )H(h)R 1 (r 1 ):::R m (r m )where H is the head-child of the phrase, which in herits the head-word h from its parent P . L 1 :::L n and R 1 :::R m are left and right modifiers of H . Sparse data makes the direct estimation ofP(RHSjLHS) infeasible.",
                    "sid": 93,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, it is decom posed into several steps ? first generating the head, then the right modifiers from the head outward, then the left modifiers in the same way.",
                    "sid": 94,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Syntactic subcategorization frames, LC and RC, for the leftand right modifiers respectively, are generated be fore the generation of the modifiers.",
                    "sid": 95,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Subcat framesrepresent knowledge about subcategorization preferences.",
                    "sid": 96,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The final probability of a production is com posed from the following probabilities: 1.",
                    "sid": 97,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The probability of choosing a head constituent.",
                    "sid": 98,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "label H: P h (HjP; h).",
                    "sid": 99,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.",
                    "sid": 100,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The probabilities of choosing the left and right.",
                    "sid": 101,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "subcat frames LC and RC: P l (LCjP;H; h) and P r (RCjP;H; h).",
                    "sid": 102,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "has2our player the PRP$?team NN?player CD?unum NN?nullDT?null NP?player(player) VP?bowner(has) NP?null(ball) ball S?bowner(has) VB?bowner Figure 5: A lexicalized SAPT.",
                    "sid": 103,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3.",
                    "sid": 104,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The probabilities of generat-.",
                    "sid": 105,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "ing the left and right modifiers: Q i=1::m+1 P r (R i (r i )jH;P; h;",
                    "sid": 106,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "i",
                    "sid": 107,
                    "ssid": 21,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}