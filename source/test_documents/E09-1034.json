{
    "ID": "E09-1034",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Parsing Mildly Non-Projective Dependency Structures",
                    "sid": 0,
                    "ssid": null,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We present parsing algorithms for various mildly non-projective dependency formalisms.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, algorithms are presented for: all well-nested structures of degree at most with the same complexity as the best existing parsers for constituency formalisms of equivalent generative power; all well-nested structures with degree bounded by any constant and a new class of structures with gap deup to includes some ill-nested structures.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The third case includes all the degree in a number of dependency treebanks.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "1 introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Dependency parsers analyse a sentence in terms of a set of directed links (dependencies) expressing the head-modifier and head-complement relationships which form the basis of predicate argument structure.",
                    "sid": 4,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We take dependency structures to be directed trees, where each node corresponds to a word and the root of the tree marks the syntactic head of the sentence.",
                    "sid": 5,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For reasons of efficiency, many practical implementations of dependency parsing are restricted to projective structures, in which the subtree rooted at each word covers a contiguous substring of the sentence.",
                    "sid": 6,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, while free word order languages such as Czech do not satisfy this constraint, parsing without the projectivity constraint is computationally complex.",
                    "sid": 7,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Although it is possible to parse non-projective structures in quadratic time under a model in which each dependency decision is independent of all the others (McDonald et al., 2005), the problem is intractable in the absence of this assumption (McDonald and Satta, 2007).",
                    "sid": 8,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Nivre and Nilsson (2005) observe that most non-projective dependency structures appearing in practice are \u201cclose\u201d to being projective, since they contain only a small proportion of nonprojective arcs.",
                    "sid": 9,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This has led to the study of classes of dependency structures that lie between projective and unrestricted non-projective structures (Kuhlmann and Nivre, 2006; Havelka, 2007).",
                    "sid": 10,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Kuhlmann (2007) investigates several such classes, based on well-nestedness and gap degree constraints (Bodirsky et al., 2005), relating them to lexicalised constituency grammar formalisms.",
                    "sid": 11,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Specifically, he shows that: linear context-free rewriting systems (LCFRS) with fan-out k (VijayShanker et al., 1987; Satta, 1992) induce the set of dependency structures with gap degree at most k \u2212 1; coupled context-free grammars in which the maximal rank of a nonterminal is k (Hotz and Pitsch, 1996) induce the set of well-nested dependency structures with gap degree at most k \u2212 1; and LTAGs (Joshi and Schabes, 1997) induce the set of well-nested dependency structures with gap degree at most 1.",
                    "sid": 12,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These results establish that there must be polynomial-time dependency parsing algorithms for well-nested structures with bounded gap degree, since such parsers exist for their corresponding lexicalised constituency-based formalisms.",
                    "sid": 13,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, since most of the non-projective structures in treebanks are well-nested and have a small gap degree (Kuhlmann and Nivre, 2006), developing efficient dependency parsing strategies for these sets of structures has considerable practical interest, since we would be able to parse directly with dependencies in a data-driven manner, rather than indirectly by constructing intermediate constituency grammars and extracting dependencies from constituency parses.",
                    "sid": 14,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We address this problem with the following contributions: (1) we define a parsing algorithm for well-nested dependency structures of gap degree 1, and prove its correctness.",
                    "sid": 15,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The parser runs in time O(n7), the same complexity as the best existing algorithms for LTAG (Eisner and Satta, 2000), and can be optimised to O(n6) in the nonlexicalised case; (2) we generalise the previous algorithm to any well-nested dependency structure with gap degree at most k in time O(n5+2k); (3) we generalise the previous parsers to be able to analyse not only well-nested structures, but also ill-nested structures with gap degree at most k satisfying certain constraints1, in time O(n4+3k); and (4) we characterise the set of structures covered by this parser, which we call mildly ill-nested structures, and show that it includes all the trees present in a number of dependency treebanks.",
                    "sid": 16,
                    "ssid": 13,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "2 preliminaries",
            "number": "2",
            "sents": [
                {
                    "text": "A dependency graph for a string w1 ... wn is a graph G = (V, E), where V = {w1, ... , wn} and E \u2286 V \u00d7 V .",
                    "sid": 17,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We write the edge (wi, wj) as wi \u2192 wj, meaning that the word wi is a syntactic dependent (or a child) of wj or, conversely, that wj is the governor (parent) of wi.",
                    "sid": 18,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We write wi \u2192* wj to denote that there exists a (possibly empty) path from wi to wj.",
                    "sid": 19,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The projection of a node wi, denoted bwic, is the set of reflexivetransitive dependents of wi, that is: bwic = {wj \u2208 V  |wj \u2192* wi}.",
                    "sid": 20,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An interval (with endpoints i and j) is a set of the form [i, j] = {wk  |i \u2264 k \u2264 j}.",
                    "sid": 21,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A dependency graph is said to be a tree if it is: We now define the concepts of gap degree and well-nestedness (Kuhlmann and Nivre, 2006).",
                    "sid": 22,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Let T be a (possibly partial) dependency tree for w1 ... wn: We say that T is projective if an interval for every word wi.",
                    "sid": 23,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus every node in the dependency structure must dominate a contiguous substring in the sentence.",
                    "sid": 24,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The gap degree of a particular node wk in T is the minimum g \u2208 IlV such that bwkc can be written as the union of g +1 intervals; that is, the number of discontinuities in bwkc.",
                    "sid": 25,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The gap degree of the dependency tree T is the maximum among the gap degrees of its nodes.",
                    "sid": 26,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that T has gap degree 0 if and only if T is projective.",
                    "sid": 27,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The subtrees induced by nodes wp and wQ are interleaved if bwpc \u2229 bwQc = \u2205 and there are nodes wi, wj \u2208 bwpc and wk, wl \u2208 bwQc such that i < k < j < l. A dependency tree T is well-nested if it does not contain two interleaved subtrees.",
                    "sid": 28,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A tree that is not well-nested is said to be ill-nested.",
                    "sid": 29,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that projective trees are always well-nested, but well-nested trees are not always projective.",
                    "sid": 30,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The framework of parsing schemata (Sikkel, 1997) provides a uniform way to describe, analyse and compare parsing algorithms.",
                    "sid": 31,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Parsing schemata were initially defined for constituencybased grammatical formalisms, but G\u00b4omezRodriguez et al. (2008a) define a variant of the framework for dependency-based parsers.",
                    "sid": 32,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use these dependency parsing schemata to define parsers and prove their correctness.",
                    "sid": 33,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Due to space constraints, we only provide brief outlines of the main concepts behind dependency parsing schemata.",
                    "sid": 34,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The parsing schema approach considers parsing as deduction, generating intermediate results called items.",
                    "sid": 35,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An initial set of items is obtained from the input sentence, and the parsing process involves deduction steps which produce new items from existing ones.",
                    "sid": 36,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each item contains information about the sentence\u2019s structure, and a successful parsing process produces at least one final item providing a full dependency analysis for the sentence or guaranteeing its existence.",
                    "sid": 37,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In a dependency parsing schema, items are defined as sets of partial dependency trees2.",
                    "sid": 38,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To define a parser by means of a schema, we must define an item set and provide a set of deduction steps that operate on it.",
                    "sid": 39,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given an item set I, the set of final items for strings of length n is the set of items in I that contain a full dependency tree for some arbitrary string of length n. A final item containing a dependency tree for a particular string w1 ... wn is said to be a correctfinal item for that string.",
                    "sid": 40,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These concepts can be used to prove the correctness of a parser: for each input string, a parsing schema\u2019s deduction steps allow us to infer a set of items, called valid items for that string.",
                    "sid": 41,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A schema is said to be sound if all valid final items it produces for any arbitrary string are correct for that string.",
                    "sid": 42,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A schema is said to be complete if all correct final items are valid.",
                    "sid": 43,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A correct parsing schema is one which is both sound and complete.",
                    "sid": 44,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In constituency-based parsing schemata, deduction steps usually have grammar rules as side conditions.",
                    "sid": 45,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the case of dependency parsers it is also possible to use grammars (Eisner and Satta, 1999), but many algorithms use a data-driven approach instead, making individual decisions about which dependencies to create by using probabilistic models (Eisner, 1996) or classifiers (Yamada and Matsumoto, 2003).",
                    "sid": 46,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To represent these algorithms as deduction systems, we use the notion of D-rules (Covington, 1990).",
                    "sid": 47,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "D-rules take the form a \u2192 b, which says that word b can have a as a dependent.",
                    "sid": 48,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Deduction steps in non-grammarbased parsers can be tied to the D-rules associated with the links they create.",
                    "sid": 49,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this way, we obtain a representation of the underlying logic of the parser while abstracting away from control structures (the particular model used to create the decisions associated with D-rules).",
                    "sid": 50,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Furthermore, the choice points in the parsing process and the information we can use to make decisions are made explicit in the steps linked to D-rules.",
                    "sid": 51,
                    "ssid": 35,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "3 the wg1 parser",
            "number": "3",
            "sents": [
                {
                    "text": "We define WG1, a parser for well-nested dependency structures of gap degree \u2264 1, as follows: The item set is IWG1 = I1 \u222a I2, with where each item of the form [i, j, h, o, o] represents the set of all well-nested partial dependency trees3 with gap degree at most 1, rooted at wh, and such that bwhc = {wh} \u222a [i, j], and 3In this and subsequent schemata, we use D-rules to express parsing decisions, so partial dependency trees are assumed to be taken from the set of trees licensed by a set of D-rules. where each item of the form [i, j, h,l, r] represents the set of all well-nested partial dependency trees rooted at wh such that bwhc = {wh} \u222a ([i, j] \\ [l, r]), and all the nodes (except possibly h) have gap degree at most 1.",
                    "sid": 52,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We call items of this form gapped items, and the interval [l, r] the gap of the item.",
                    "sid": 53,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that the constraints h =6 j, h =6 i + 1, h =6 l \u2212 1, h =6 r are added to items to avoid redundancy in the item set.",
                    "sid": 54,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Since the result of the expression {wh} \u222a ([i, j] \\ [l, r]) for a given head can be the same for different sets of values of i, j,l, r, we restrict these values so that we cannot get two different items representing the same dependency structures.",
                    "sid": 55,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Items t violating these constraints always have an alternative representation that does not violate them, that we can express with a normalising function nm(t) as follows: When defining the deduction steps for this and other parsers, we assume that they always produce normalised items.",
                    "sid": 56,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For clarity, we do not explicitly write this in the deduction steps, writing t instead of nm(t) as antecedents and consequents of steps.",
                    "sid": 57,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set of initial items is defined as the set H = {[h, h, h, o, o]  |h \u2208 W,1 \u2264 h \u2264 n}, where each item [h, h, h, o, o] represents the set containing the trivial partial dependency tree consisting of a single node wh and no links.",
                    "sid": 58,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This same set of hypotheses can be used for all the parsers, so we do not make it explicit for subsequent schemata.",
                    "sid": 59,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that initial items are separate from the item set IWG1 and not subject to its constraints, so they do not require normalisation.",
                    "sid": 60,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set of final items for strings of length n in WG1 is defined as the set which is the set of items in IWG1 containing dependency trees for the complete input string (from position 1 to n), with their head at any word wh.",
                    "sid": 61,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The deduction steps of the parser can be seen in Figure 1A.",
                    "sid": 62,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The WG1 parser proceeds bottom-up, by building dependency subtrees and joining them to form larger subtrees, until it finds a complete dependency tree for the input sentence.",
                    "sid": 63,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The logic of Combine Interleaving Gap L: [i, j, h, l, r] Combine Interleaving Gap R: [i, j, h, l, r] [l, k, h, r + 1, u] [k, m, h, r + 1, j] [i, k, h, j + 1, u] [i, m, h, l, k \u2212 1] such that u > j, such that k > l. D. General form of the MGk Combine step: the parser can be understood by considering how it infers the item corresponding to the subtree induced by a particular node, given the items for the subtrees induced by the direct dependents of that node.",
                    "sid": 64,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Suppose that, in a complete dependency analysis for a sentence wi ... wn, the word wh has wd1 ... wdp as direct dependents (i.e. we have dependency links wd1 \u2192 wh, .",
                    "sid": 65,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": ".",
                    "sid": 66,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": ".",
                    "sid": 67,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", wdp \u2192 wh).",
                    "sid": 68,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then, the item corresponding to the subtree induced by wh is obtained from the ones corresponding to the subtrees induced by wd1 ... wdp by: (1) applying the Link Ungapped or Link Gapped step to each of the items corresponding to the subtrees induced by the direct dependents, and to the hypothesis [h, h, h, o, o].",
                    "sid": 69,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This allows us to infer p items representing the result of linking each of the dependent subtrees to the new head wh; (2) applying the various Combine steps to join all of the items obtained in the previous step into a single item.",
                    "sid": 70,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The Combine steps perform a union operation between subtrees.",
                    "sid": 71,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, the result is a dependency tree containing all the dependent subtrees, and with all of them linked to h: this is the subtree induced by wh.",
                    "sid": 72,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This process is applied repeatedly to build larger subtrees, until, if the parsing process is successful, a final item is found containing a dependency tree for the complete sentence.",
                    "sid": 73,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The parsing schemata formalism can be used to prove the correctness of a parsing schema.",
                    "sid": 74,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To prove that WG1 is correct, we need to prove its soundness and completeness.4 Soundness is proven by checking that valid items always contain well-nested trees.",
                    "sid": 75,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Completeness is proven by induction, taking initial items as the base case and showing that an item containing a correct subtree for a string can always be obtained from items corresponding to smaller subtrees.",
                    "sid": 76,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to prove this induction step, we use the concept of order annotations (Kuhlmann, 2007; Kuhlmann and M\u00a8ohl, 2007), which are strings that lexicalise the precedence relation between the nodes of a dependency tree.",
                    "sid": 77,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given a correct subtree, we divide the proof into cases according to the order annotation of its head and we find that, for every possible form of this order annotation, we can find a sequence of Combine steps to infer the relevant item from smaller correct items.",
                    "sid": 78,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The time complexity of WG1 is O(n7), as the step Combine Shrinking Gap Centre works with 7 free string positions.",
                    "sid": 79,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This complexity with respect to the length of the input is as expected for this set of structures, since Kuhlmann (2007) shows that they are equivalent to LTAG, and the best existing parsers for this formalism also perform in O(n7) (Eisner and Satta, 2000).",
                    "sid": 80,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that the Combine step which is the bottleneck only uses the 7 indexes, and not any other entities like D-rules, so its O(n7) complexity does not have any additional factors due to grammar size or other variables.",
                    "sid": 81,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The space complexity of WG1 is O(n5) for recognition, due to the 5 indexes in items, and O(n7) for full parsing.",
                    "sid": 82,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It is possible to build a variant of this parser with time complexity O(n6), as with parsers for unlexicalised TAG, if we work with unlexicalised D-rules specifying the possibility of dependencies between pairs of categories instead of pairs of words.",
                    "sid": 83,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to do this, we expand the item set with unlexicalised items of the form [i, j, C,l, r], where C is a category, apart from the existing items [i, j, h,l, r].",
                    "sid": 84,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Steps in the parser are duplicated, to work both with lexicalised and unlexicalised items, except for the Link steps, which always work with a lexicalised item and an unlexicalised hypothesis to produce an unlexicalised item, and the Combine Shrinking Gap steps, which can work only with unlexicalised items.",
                    "sid": 85,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Steps are added to obtain lexicalised items from their unlexicalised equivalents by binding the head to particular string positions.",
                    "sid": 86,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, we need certain variants of the Combine Shrinking Gap steps that take 2 unlexicalised antecedents and produce a lexicalised consequent; an example is the following: such that cat(wl)=C Although this version of the algorithm reduces time complexity with respect to the length of the input to O(n6), it also adds a factor related to the number of categories, as well as constant factors due to using more kinds of items and steps than the original WG1 algorithm.",
                    "sid": 87,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This, together with the advantages of lexicalised dependency parsing, may mean that the original WG1 algorithm is more practical than this version.",
                    "sid": 88,
                    "ssid": 37,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "4 the wgk parser",
            "number": "4",
            "sents": [
                {
                    "text": "The WG1 parsing schema can be generalised to obtain a parser for all well-nested dependency structures with gap degree bounded by a constant k(k > 1), which we call WGk parser.",
                    "sid": 89,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In order to do this, we extend the item set so that it can contain items with up to k gaps, and modify the deduction steps to work with these multi-gapped items.",
                    "sid": 90,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The item set ZWGk is the set of all [i, j, h, [(l1, r1), ... , (lg, rg)]] where i, j, h, g E IlV , 0 < g < k, 1 < h < n, 1 < i < j < n , h =\ufffd j, h =\ufffd i \u2212 1; and for each p E 11,2,... , g}: lp, rp E W, i < lp < rp < j, rp < lp+1 \u2212 1, h =\ufffdlp \u2212 1, h =\ufffdrp.",
                    "sid": 91,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An item [i, j, h, [(l1, r1), ... , (lg, rg)]] represents the set of all well-nested partial dependency trees rooted at wh such that Lwh] = {wh}U([i, j]\ufffd Ugp=1[lp, rp]), where each interval [lp, rp] is called a gap.",
                    "sid": 92,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The constraints h =\ufffd j, h =\ufffd i + 1, h =\ufffd lp \u2212 1, h =\ufffd rp are added to avoid redundancy, and normalisation is defined as in WG1.",
                    "sid": 93,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set of final items is defined as the set F = {[1, n, h, []] | h E W,1 < h < n}.",
                    "sid": 94,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that this set is the same as in WG1, as these are the items that we denoted [1, n, h, o, o] in the previous parser.",
                    "sid": 95,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The deduction steps can be seen in Figure 1B.",
                    "sid": 96,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As expected, the WG1 parser corresponds to WGk when we make k = 1.",
                    "sid": 97,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "WGk works in the same way as WG1, except for the fact that Combine steps can create items with more than one gap5.",
                    "sid": 98,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The correctness proof is also analogous to that of WG1, but we must take into account that the set of possible order annotations is larger when k > 1, so more cases arise in the completeness proof.",
                    "sid": 99,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The WGk parser runs in time O(n5+2k): as in the case of WG1, the deduction step with most free variables is Combine Shrinking Gap Centre, and in this case it has 5 + 2k free indexes.",
                    "sid": 100,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Again, this complexity result is in line with what could be expected from previous research in constituency parsing: Kuhlmann (2007) shows that the set of well-nested dependency structures with gap degree at most k is closely related to coupled context-free grammars in which the maximal rank of a nonterminal is k + 1; and the constituency parser defined by Hotz and Pitsch (1996) for these grammars also adds an n2 factor for each unit increment of k. Note that a small value of k should be enough to cover the vast majority of the non-projective sentences found in natural language treebanks.",
                    "sid": 101,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, the Prague Dependency Treebank contains no structures with gap degree greater than 4.",
                    "sid": 102,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, a WG4 parser would be able to analyse all the well-nested structures in this treebank, which represent 99.89% of the total.",
                    "sid": 103,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Increasing k beyond 4 would not produce further improvements in coverage.",
                    "sid": 104,
                    "ssid": 16,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "5 parsing ill-nested structures",
            "number": "5",
            "sents": [
                {
                    "text": "The WGk parser analyses dependency structures with bounded gap degree as long as they are well-nested.",
                    "sid": 105,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This covers the vast majority of 5In all the parsers in this paper, Combine steps may be applied in different orders to produce the same result, causing spurious ambiguity.",
                    "sid": 106,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In WG1 and WGk, this can be avoided when implementing the schemata, by adding flags to items so as to impose a particular order. the structures that occur in natural-language treebanks (Kuhlmann and Nivre, 2006), but there is still a significant minority of sentences that contain ill-nested structures.",
                    "sid": 107,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unfortunately, the general problem of parsing ill-nested structures is NPcomplete, even when the gap degree is bounded: this set of structures is closely related to LCFRS with bounded fan-out and unbounded production length, and parsing in this formalism has been proven to be NP-complete (Satta, 1992).",
                    "sid": 108,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The reason for this high complexity is the problem of unrestricted crossing configurations, appearing when dependency subtrees are allowed to interleave in every possible way.",
                    "sid": 109,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, just as it has been noted that most non-projective structures appearing in practice are only \u201cslightly\u201d nonprojective (Nivre and Nilsson, 2005), we characterise a sense in which the structures appearing in treebanks can be viewed as being only \u201cslightly\u201d ill-nested.",
                    "sid": 110,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this section, we generalise the algorithms WG1 and WGk to parse a proper superset of the set of well-nested structures in polynomial time; and give a characterisation of this new set of structures, which includes all the structures in several dependency treebanks.",
                    "sid": 111,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The WGk parser presented previously is based on a bottom-up process, where Link steps are used to link completed subtrees to a head, and Combine steps are used to join subtrees governed by a common head to obtain a larger structure.",
                    "sid": 112,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As WGk is a parser for well-nested structures of gap degree up to k, its Combine steps correspond to all the ways in which we can join two sets of sibling subtrees meeting these constraints, and having a common head, into another.",
                    "sid": 113,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, this parser does not use Combine steps that produce interleaved subtrees, since these would generate items corresponding to ill-nested structures.",
                    "sid": 114,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We obtain a polynomial parser for a wider set of structures of gap degree at most k, including some ill-nested ones, by having Combine steps representing every way in which two sets of sibling subtrees of gap degree at most k with a common head can be joined into another, including those producing interleaved subtrees, like the steps for gap degree 1 shown in Figure 1C.",
                    "sid": 115,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that this does not mean that we can build every possible ill-nested structure: some structures with complex crossed configurations have gap degree k, but cannot be built by combining two structures of that gap degree.",
                    "sid": 116,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "More specifically, our algorithm will be able to parse a dependency structure (well-nested or not) if there exists a binarisation of that structure that has gap degree at most k. The parser implicitly works by finding such a binarisation, since Combine steps are always applied to two items and no intermediate item generated by them can exceed gap degree k (not counting the position of the head in the projection).",
                    "sid": 117,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "More formally, let T be a dependency structure for the string w1 ... wn.",
                    "sid": 118,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A binarisation of T is a dependency tree T0 over a set of nodes, each of which may be unlabelled or labelled with a word in {w1 ... wn}, such that the following conditions hold: (1) each node has at most two children, and (2) wz \u2014* wj in T if and only if wz \u2014** wj in T\ufffd.",
                    "sid": 119,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A dependency structure is mildly ill-nested for gap degree k if it has at least one binarisation of gap degree < k. Otherwise, we say that it is strongly ill-nested for gap degree k. It is easy to prove that the set of mildly ill-nested structures for gap degree k includes all well-nested structures with gap degree up to k. We define MG1, a parser for mildly ill-nested structures for gap degree 1, as follows: (1) the item set is the same as that of WG1, except that items can now contain any mildly ill-nested structures for gap degree 1, instead of being restricted to well-nested structures; and (2) deduction steps are the same as in WG1, plus the additional steps shown in Figure 1C.",
                    "sid": 120,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These extra Combine steps allow the parser to combine interleaved subtrees with simple crossing configurations.",
                    "sid": 121,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The MG1 parser still runs in O(n7), as these new steps do not use more than 7 string positions.",
                    "sid": 122,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The proof of correctness for this parser is similar to that of WG1.",
                    "sid": 123,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Again, we use the concept of order annotations.",
                    "sid": 124,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set of mildly ill-nested structures for gap degree k can be defined as those that only contain annotations meeting certain constraints.",
                    "sid": 125,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The soundness proof involves showing that Combine steps always generate items containing trees with such annotations.",
                    "sid": 126,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Completeness is proven by induction, by showing that if a subtree is mildly ill-nested for gap degree k, an item for it can be obtained from items for smaller subtrees by applying Combine and Link steps.",
                    "sid": 127,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the cases where Combine steps have to be applied, the order in which they may be used to produce a subtree can be obtained from its head\u2019s order annotation.",
                    "sid": 128,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To generalise this algorithm to mildly ill-nested structures for gap degree k, we need to add a Combine step for every possible way of joining two structures of gap degree at most k into another.",
                    "sid": 129,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This can be done systematically by considering a set of strings over an alphabet of three symbols: a and b to represent intervals of words in the projection of each of the structures, and g to represent intervals that are not in the projection of either structure, and will correspond to gaps in the joined structure.",
                    "sid": 130,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The legal combinations of structures for gap degree k will correspond to strings where symbols a and b each appear at most k + 1 times, g appears at most k times and is not the first or last symbol, and there is no more than one consecutive appearance of any symbol.",
                    "sid": 131,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Given a string of this form, the corresponding Combine step is given by the expression in Figure 1D.",
                    "sid": 132,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As a particular example, the Combine Interleaving Gap C step in Figure 1C is obtained from the string abgab.",
                    "sid": 133,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, we define the parsing schema for MGk, a parser for mildly ill-nested structures for gap degree k, as the schema where (1) the item set is like that of WGk, except that items can now contain any mildly ill-nested structures for gap degree k, instead of being restricted to well-nested structures; and (2) the set of deduction steps consists of a Link step as the one in WGk, plus a set of Combine steps obtained as expressed in Figure 1D.",
                    "sid": 134,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As the string used to generate a Combine step can have length at most 3k + 2, and the resulting step contains an index for each symbol of the string plus two extra indexes, the MGk parser has complexity O(n3k+4).",
                    "sid": 135,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Note that the item and deduction step sets of an MGk parser are always supersets of those of WGk.",
                    "sid": 136,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In particular, the steps for WGk are those obtained from strings that do not contain abab or baba as a scattered substring.",
                    "sid": 137,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The MGk algorithm defined in the previous section can parse any mildly ill-nested structure for a given gap degree k in polynomial time.",
                    "sid": 138,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have characterised the set of mildly ill-nested structures for gap degree k as those having a binarisation of gap degree < k. Since a binarisation of a dependency structure cannot have lower gap degree than the original structure, this set only contains structures with gap degree at most k. Furthermore, by the relation between MGk and WGk, we know that it contains all the well-nested structures with gap degree up to k. Figure 2 shows an example of a structure that has gap degree 1, but is strongly ill-nested for gap degree 1.",
                    "sid": 139,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is one of the smallest possible such structures: by generating all the possible trees up to 10 nodes (without counting a dummy root node located at position 0), it can be shown that all the structures of any gap degree k with length smaller than 10 are well-nested or only mildly ill-nested for that gap degree k. Even if a structure T is strongly ill-nested for a given gap degree, there is always some m \u2208 IN such that T is mildly ill-nested for m (since every dependency structure can be binarised, and binarisations have finite gap degree).",
                    "sid": 140,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, the structure in Figure 2 is mildly ill-nested for gap degree 2.",
                    "sid": 141,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, MGk parsers have the property of being able to parse any possible dependency structure as long as we make k large enough.",
                    "sid": 142,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In practice, structures like the one in Figure 2 do not seem to appear in dependency treebanks.",
                    "sid": 143,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have analysed treebanks for nine different languages, obtaining the data presented in Table 1.",
                    "sid": 144,
                    "ssid": 40,
                    "kind_of_tag": "s"
                },
                {
                    "text": "None of these treebanks contain structures that are strongly ill-nested for their gap degree.",
                    "sid": 145,
                    "ssid": 41,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, in any of these treebanks, the MGk parser can parse every sentence with gap degree at most k.",
                    "sid": 146,
                    "ssid": 42,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "6 conclusions and future work",
            "number": "6",
            "sents": [
                {
                    "text": "We have defined a parsing algorithm for wellnested dependency structures with bounded gap degree.",
                    "sid": 147,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In terms of computational complexity, this algorithm is comparable to the best parsers for related constituency-based formalisms: when the gap degree is at most 1, it runs in O(n7), like the fastest known parsers for LTAG, and can be made O(n6) if we use unlexicalised dependencies.",
                    "sid": 148,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When the gap degree is greater than 1, the time complexity goes up by a factor of n2 for each extra unit of gap degree, as in parsers for coupled context-free grammars.",
                    "sid": 149,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Most of the non-projective sentences appearing in treebanks are well-nested and have a small gap degree, so this algorithm directly parses the vast majority of the non-projective constructions present in natural languages, without requiring the construction of a constituency grammar as an intermediate step.",
                    "sid": 150,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Additionally, we have defined a set of structures for any gap degree k which we call mildly ill-nested.",
                    "sid": 151,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This set includes ill-nested structures verifying certain conditions, and can be parsed in O(n3k+4) with a variant of the parser for wellnested structures.",
                    "sid": 152,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The practical interest of mildly ill-nested structures can be seen in the data obtained from several dependency treebanks, showing that all of the ill-nested structures in them are mildly ill-nested for their corresponding gap degree.",
                    "sid": 153,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, our O(n3k+4) parser can analyse all the gap degree k structures in these treebanks.",
                    "sid": 154,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The set of mildly ill-nested structures for gap degree k is defined as the set of structures that have a binarisation of gap degree at most k. This definition is directly related to the way the MGk parser works, since it implicitly finds such a binarisation.",
                    "sid": 155,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "An interesting line of future work would be to find an equivalent characterisation of mildly ill-nested structures which is more grammar-oriented and would provide a more linguistic insight into these structures.",
                    "sid": 156,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Another research direction, which we are currently working on, is exploring how variants of the MGk parser\u2019s strategy can be applied to the problem of binarising LCFRS (G\u00b4omezRodriguez et al., 2009).",
                    "sid": 157,
                    "ssid": 11,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}