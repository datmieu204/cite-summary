{
    "ID": "N06-2033",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Parser Combination By Reparsing",
                    "sid": 0,
                    "ssid": null,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We present a novel parser combination scheme that works by reparsing input sentences once they have already been parsed by several different parsers.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We apply this idea to dependency and constituent parsing, generating results that surpass state-of-theart accuracy levels for individual parsers.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "1 introduction",
            "number": "1",
            "sents": [
                {
                    "text": "Over the past decade, remarkable progress has been made in data-driven parsing.",
                    "sid": 3,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Much of this work has been fueled by the availability of large corpora annotated with syntactic structures, especially the Penn Treebank (Marcus et al., 1993).",
                    "sid": 4,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In fact, years of extensive research on training and testing parsers on the Wall Street Journal (WSJ) corpus of the Penn Treebank have resulted in the availability of several high-accuracy parsers.",
                    "sid": 5,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We present a framework for combining the output of several different accurate parsers to produce results that are superior to those of each of the individual parsers.",
                    "sid": 6,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is done in a two stage process of reparsing.",
                    "sid": 7,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the first stage, m different parsers analyze an input sentence, each producing a syntactic structure.",
                    "sid": 8,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the second stage, a parsing algorithm is applied to the original sentence, taking into account the analyses produced by each parser in the first stage.",
                    "sid": 9,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our approach produces results with accuracy above those of the best individual parsers on both dependency and constituent parsing of the standard WSJ test set.",
                    "sid": 10,
                    "ssid": 8,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "2 dependency reparsing",
            "number": "2",
            "sents": [
                {
                    "text": "In dependency reparsing we focus on unlabeled dependencies, as described by Eisner (1996).",
                    "sid": 11,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this scheme, the syntactic structure for a sentence with n words is a dependency tree representing head-dependent relations between pairs of words.",
                    "sid": 12,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When m parsers each output a set of dependencies (forming m dependency structures) for a given sentence containing n words, the dependencies can be combined in a simple wordby-word voting scheme, where each parser votes for the head of each of the n words in the sentence, and the head with most votes is assigned to each word.",
                    "sid": 13,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This very simple scheme guarantees that the final set of dependencies will have as many votes as possible, but it does not guarantee that the final voted set of dependencies will be a well-formed dependency tree.",
                    "sid": 14,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In fact, the resulting graph may not even be connected.",
                    "sid": 15,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Zeman & \u017dabokrtsk\u00fd (2005) apply this dependency voting scheme to Czech with very strong results.",
                    "sid": 16,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, when the constraint that structures must be well-formed is enforced, the accuracy of their results drops sharply.",
                    "sid": 17,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Instead, if we reparse the sentence based on the output of the m parsers, we can maximize the number of votes for a well-formed dependency structure.",
                    "sid": 18,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Once we have obtained the m initial dependency structures to be combined, the first step is to build a graph where each word in the sentence is a node.",
                    "sid": 19,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We then create weighted directed edges between the nodes corresponding to words for which dependencies are obtained from each of the initial structures.1 In cases where more than one dependency structure indicates that an edge should be created, the corresponding weights are simply added.",
                    "sid": 20,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As long as at least one of the m initial structures is a well-formed dependency structure, the directed graph created this way will be connected.",
                    "sid": 21,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Once this graph is created, we reparse the sentence using a dependency parsing algorithm such as, for example, one of the algorithms described by McDonald et al. (2005).",
                    "sid": 22,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finding the optimal dependency structure given the set of weighted dependencies is simply a matter of finding the maximum spanning tree (MST) for the directed weighted graph, which can be done using the Chu-Liu/Edmonds directed MST algorithm (Chu & Liu, 1965; Edmonds, 1967).",
                    "sid": 23,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The maximum spanning tree maximizes the votes for dependencies given the constraint that the resulting structure must be a tree.",
                    "sid": 24,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "If projectivity (no crossing branches) is desired, Eisner\u2019s (1996) dynamic programming algorithm (similar to CYK) for dependency parsing can be used instead.",
                    "sid": 25,
                    "ssid": 15,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "3 constituent reparsing",
            "number": "3",
            "sents": [
                {
                    "text": "In constituent reparsing we deal with labeled constituent trees, or phrase structure trees, such as those in the Penn Treebank (after removing traces, empty nodes and function tags).",
                    "sid": 26,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The general idea is the same as with dependencies.",
                    "sid": 27,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First, m parsers each produce one parse tree for an input sentence.",
                    "sid": 28,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We then use these m initial parse trees to guide the application of a parse algorithm to the input.",
                    "sid": 29,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Instead of building a graph out of words (nodes) and dependencies (edges), in constituent reparsing we use the m initial trees to build a weighted parse chart.",
                    "sid": 30,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We start by decomposing each tree into its constituents, with each constituent being a 4-tuple [label, begin, end, weight], where label is the phrase structure type, such as NP or VP, begin is the index of the word where the constituent starts, end is the index of the word where the constituent ends plus one, and weight is the weight of the constituent.",
                    "sid": 31,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As with dependencies, in the simplest case the weight of each constituent is simply 1.0, but different weighting schemes can be used.",
                    "sid": 32,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Once the initial trees have been broken down into constituents, we put all the constituents from all of the m trees into a single list.",
                    "sid": 33,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We then look for each pair of constituents A and B where the label, begin, and end are identical, and merge A and B into a single constituent with the same label, begin, and end, and with weight equal to the weight of A plus the weight of B.",
                    "sid": 34,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Once no more constituent mergers are possible, the resulting constituents are placed on a standard parse chart, but where the constituents in the chart do not contain back-pointers indicating what smaller constituents they contain.",
                    "sid": 35,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Building the final tree amounts to determining these back-pointers.",
                    "sid": 36,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This can be done by running a bottom-up chart parsing algorithm (Allen, 1995) for a weighted grammar, but instead of using a grammar to determine what constituents can be built and what their weights are, we simply constrain the building of constituents to what is already in the chart (adding the weights of constituents when they are combined).",
                    "sid": 37,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This way, we perform an exhaustive search for the tree that represents the heaviest combination of constituents that spans the entire sentence as a well-formed tree.",
                    "sid": 38,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A problem with simply considering all constituents and picking the heaviest tree is that this favors recall over precision.",
                    "sid": 39,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Balancing precision and recall is accomplished by discarding every constituent with weight below a threshold t before the search for the final parse tree starts.",
                    "sid": 40,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the simple case where each constituent starts out with weight 1.0 (before any merging), this means that a constituent is only considered for inclusion in the final parse tree if it appears in at least t of the m initial parse trees.",
                    "sid": 41,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Intuitively, this should increase precision, since we expect that a constituent that appears in the output of more parsers to be more likely to be correct.",
                    "sid": 42,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By changing the threshold t we can control the precision/recall tradeoff.",
                    "sid": 43,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Henderson and Brill (1999) proposed two parser combination schemes, one that picks an entire tree from one of the parsers, and one that, like ours, builds a new tree from constituents from the initial trees.",
                    "sid": 44,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The latter scheme performed better, producing remarkable results despite its simplicity.",
                    "sid": 45,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The combination is done with a simple majority vote of whether or not constituents should appear in the combined tree.",
                    "sid": 46,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In other words, if a constituent appears at least (m + 1)/2 times in the output of the m parsers, the constituent is added to the final tree.",
                    "sid": 47,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This simple vote resulted in trees with f-score significantly higher than the one of the best parser in the combination.",
                    "sid": 48,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, the scheme heavily favors precision over recall.",
                    "sid": 49,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Their results on WSJ section 23 were 92.1 precision and 89.2 recall (90.61 f-score), well above the most accurate parser in their experiments (88.6 f-score).",
                    "sid": 50,
                    "ssid": 25,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "4 experiments",
            "number": "4",
            "sents": [
                {
                    "text": "In our dependency parsing experiments we used unlabeled dependencies extracted from the Penn Treebank using the same head-table as Yamada and Matsumoto (2003), using sections 02-21 as training data and section 23 as test data, following (McDonald et al., 2005; Nivre & Scholz, 2004; Yamada & Matsumoto, 2003).",
                    "sid": 51,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Dependencies extracted from section 00 were used as held-out data, and section 22 was used as additional development data.",
                    "sid": 52,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For constituent parsing, we used the section splits of the Penn Treebank as described above, as has become standard in statistical parsing research.",
                    "sid": 53,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Six dependency parsers were used in our combination experiments, as described below.",
                    "sid": 54,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The deterministic shift-reduce parsing algorithm of (Nivre & Scholz, 2004) was used to create two parsers2, one that processes the input sentence from left-to-right (LR), and one that goes from right-toleft (RL).",
                    "sid": 55,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Because this deterministic algorithm makes a single pass over the input string with no back-tracking, making decisions based on the parser\u2019s state and history, the order in which input tokens are considered affects the result.",
                    "sid": 56,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, we achieve additional parser diversity with the same algorithm, simply by varying the direction of parsing.",
                    "sid": 57,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We refer to the two parsers as LR and RL.",
                    "sid": 58,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The deterministic parser of Yamada and Matsumoto (2003) uses an algorithm similar to Nivre and Scholz\u2019s, but it makes several successive leftto-right passes over the input instead of keeping a stack.",
                    "sid": 59,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To increase parser diversity, we used a version of Yamada and Matsumoto\u2019s algorithm where the direction of each of the consecutive passes over the input string alternates from left-to-right and right-to-left.",
                    "sid": 60,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We refer to this parser as LRRL.",
                    "sid": 61,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The large-margin parser described in (McDonald et al., 2005) was used with no alterations.",
                    "sid": 62,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unlike the deterministic parsers above, this parser uses a dynamic programming algorithm (Eisner, 1996) to determine the best tree, so there is no difference between presenting the input from left-to-right or right-to-left.",
                    "sid": 63,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Three different weight configurations were considered: (1) giving all dependencies the same weight; (2) giving dependencies different weights, depending only on which parser generated the dependency; and (3) giving dependencies different 2 Nivre and Scholz use memory based learning in their experiments.",
                    "sid": 64,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our implementation of their parser uses support vector machines, with improved results. weights, depending on which parser generated the dependency, and the part-of-speech of the dependent word.",
                    "sid": 65,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Option 2 takes into consideration that parsers may have different levels of accuracy, and dependencies proposed by more accurate parsers should be counted more heavily.",
                    "sid": 66,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Option 3 goes a step further, attempting to capitalize on the specific strengths of the different parsers.",
                    "sid": 67,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The weights in option 2 are determined by computing the accuracy of each parser on the held-out set (WSJ section 00).",
                    "sid": 68,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The weights are simply the corresponding parser\u2019s accuracy (number of correct dependencies divided by the total number of dependencies).",
                    "sid": 69,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The weights in option 3 are determined in a similar manner, but different accuracy figures are computed for each part-of-speech.",
                    "sid": 70,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 1 shows the dependency accuracy and root accuracy (number of times the root of the dependency tree was identified correctly divided by the number of sentences) for each of the parsers, and for each of the different weight settings in the reparsing experiments (numbered according to their descriptions above).",
                    "sid": 71,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The parsers that were used in the constituent reparsing experiments are: (1) Charniak and Johnson\u2019s (2005) reranking parser; (2) Henderson\u2019s (2004) synchronous neural network parser; (3) Bikel\u2019s (2002) implementation of the Collins (1999) model 2 parser; and (4) two versions of Sagae and Lavie\u2019s (2005) shift-reduce parser, one using a maximum entropy classifier, and one using support vector machines.",
                    "sid": 72,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Henderson and Brill\u2019s voting scheme mentioned in section 3 can be emulated by our reparsing approach by setting all weights to 1.0 and t to (m + 1)/2, but better results can be obtained by setting appropriate weights and adjusting the precision/recall tradeoff.",
                    "sid": 73,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Weights for different types of constituents from each parser can be set in a similar way to configuration 3 in the dependency experiments.",
                    "sid": 74,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, instead of measuring accuracy for each part-of-speech tag of dependents, we measure precision for each non-terminal label.",
                    "sid": 75,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The parameter t is set using held-out data (from WSJ section 22) and a simple hill-climbing procedure.",
                    "sid": 76,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "First we set t to (m + 1)/2 (which heavily favors precision).",
                    "sid": 77,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We then repeatedly evaluate the combination of parsers, each time decreasing the value of t (by 0.01, say).",
                    "sid": 78,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We record the values of t for which precision and recall were closest, and for which f-score was highest.",
                    "sid": 79,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 2 shows the accuracy of each individual parser and for three reparsing settings.",
                    "sid": 80,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Setting 1 is the emulation of Henderson and Brill\u2019s voting.",
                    "sid": 81,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In setting 2, t is set for balancing precision and recall.",
                    "sid": 82,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In setting 3, t is set for highest f-score.",
                    "sid": 83,
                    "ssid": 33,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "5 discussion",
            "number": "5",
            "sents": [
                {
                    "text": "We have presented a reparsing scheme that produces results with accuracy higher than the best individual parsers available by combining their results.",
                    "sid": 84,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have shown that in the case of dependencies, the reparsing approach successfully addresses the issue of constructing high-accuracy well-formed structures from the output of several parsers.",
                    "sid": 85,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In constituent reparsing, held-out data can be used for setting a parameter that allows for balancing precision and recall, or increasing f-score.",
                    "sid": 86,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "By combining several parsers with f-scores ranging from 91.0% to 86.7%, we obtain reparsed results with a 92.1% f-score.",
                    "sid": 87,
                    "ssid": 4,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}