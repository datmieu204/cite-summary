{
    "ID": "W05-0638",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "Exploiting Full Parsing Information To Label Semantic Roles Using An Ensemble Of ME And SVM Via Integer Linear Programming",
                    "sid": 0,
                    "ssid": null,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we propose a method that exploits full parsing information by representing it as features of argument classification models and as constraints in integer linear learning programs.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, to take advantage of SVM-based and Maximum Entropy-based argument classification models, we incorporate their scoring matrices, and use the combined matrix in the above-mentioned integer linear programs.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The experimental results show that full parsing information not only increases the F-score of argument classification models by 0.7%, but also effectively removes all labeling inconsistencies, which increases the F-score by 0.64%.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The ensemble of SVM and ME also boosts the F-score by 0.77%.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Our system achieves an F-score of 76.53% in the development set and 76.38% in Test WSJ.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "1 introduction",
            "number": "1",
            "sents": [
                {
                    "text": "The Semantic Role Labeling problem can be formulated as a sentence tagging problem.",
                    "sid": 6,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A sentence can be represented as a sequence of words, as phrases (chunks), or as a parsing tree.",
                    "sid": 7,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The basic units of a sentence are words, phrases, and constituents in these representations, respectively.. Pradhan et al. (2004) established that Constituentby-Constituent (C-by-C) is better than Phrase-byPhrase (P-by-P), which is better than Word-byWord (W-by-W).",
                    "sid": 8,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This is probably because the boundaries of the constituents coincide with the arguments; therefore, C-by-C has the highest argument identification F-score among the three approaches.",
                    "sid": 9,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, a full parsing tree also provides richer syntactic information than a sequence of chunks or words.",
                    "sid": 10,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Pradhan et al. (2004) compared the seven most common features as well as several features related to the target constituent\u2019s parent and sibling constituents.",
                    "sid": 11,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Their experimental results show that using other constituents\u2019 information increases the F-score by 6%.",
                    "sid": 12,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Punyakanok et al. (2004) represent full parsing information as constraints in integer linear programs.",
                    "sid": 13,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Their experimental results show that using such information increases the argument classification accuracy by 1%.",
                    "sid": 14,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this paper, we not only add more full parsing features to argument classification models, but also represent full parsing information as constraints in integer linear programs (ILP) to resolve label inconsistencies.",
                    "sid": 15,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also build an ensemble of two argument classification models: Maximum Entropy and SVM by combining their argument classification results and applying them to the abovementioned ILPs.",
                    "sid": 16,
                    "ssid": 11,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "2 system architecture",
            "number": "2",
            "sents": [
                {
                    "text": "Our SRL system is comprised of four stages: pruning, argument classification, classification model incorporation, and integer linear programming.",
                    "sid": 17,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This section describes how we build these stages, including the features used in training the argument classification models.",
                    "sid": 18,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "When the full parsing tree of a sentence is available, only the constituents in the tree are considered as argument candidates.",
                    "sid": 19,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In CoNLL-2005, full parsing trees are provided by two full parsers: the Collins parser (Collins, 1999) and the Charniak parser (Charniak, 2000).",
                    "sid": 20,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "According to Punyakanok et al. (2005), the boundary agreement of Charniak is higher than that of Collins; therefore, we choose the Charniak parser\u2019s results.",
                    "sid": 21,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, there are two million nodes on the full parsing trees in the training corpus, which makes the training time of machine learning algorithms extremely long.",
                    "sid": 22,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Besides, noisy information from unrelated parts of a sentence could also affect the training of machine learning models.",
                    "sid": 23,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, our system exploits the heuristic rules introduced by Xue and Palmer (2004) to filter out simple constituents that are unlikely to be arguments.",
                    "sid": 24,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Applying pruning heuristics to the output of Charniak\u2019s parser effectively eliminates 61% of the training data and 61.3% of the development data, while still achieves 93% and 85.5% coverage of the correct arguments in the training and development sets, respectively.",
                    "sid": 25,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This stage assigns the final labels to the candidates derived in Section 2.1.",
                    "sid": 26,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A multi-class classifier is trained to classify the types of the arguments supplied by the pruning stage.",
                    "sid": 27,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In addition, to reduce the number of excess candidates mistakenly output by the previous stage, these candidates can be labeled as null (meaning \u201cnot an argument\u201d).",
                    "sid": 28,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The features used in this stage are as follows.",
                    "sid": 29,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We believe that information from related constituents in the full parsing tree helps in labeling the target constituent.",
                    "sid": 30,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Denote the target constituent by t. The following features are the most common baseline features of t\u2019s parent and sibling constituents.",
                    "sid": 31,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, Parent/ Left Sibling/ Right Sibling Path denotes t\u2019s parents\u2019, left sibling\u2019s, and right sibling\u2019s Path features.",
                    "sid": 32,
                    "ssid": 16,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "argument classification models",
            "number": "3",
            "sents": [
                {
                    "text": "We use all the features of the SVM-based and MEbased argument classification models.",
                    "sid": 33,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All SVM classifiers are realized using SVM-Light with a polynomial kernel of degree 2.",
                    "sid": 34,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The ME-based model is implemented based on Zhang\u2019s MaxEnt toolkit1 and L-BFGS (Nocedal and Wright, 1999) method to perform parameter estimation.",
                    "sid": 35,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We now explain how we incorporate the SVMbased and ME-based argument classification models.",
                    "sid": 36,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After argument classification, we acquire two scoring matrices, PME and PSVM, respectively.",
                    "sid": 37,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Incorporation of these two models is realized by weighted summation of PME and PSVM as follows: We use P\u2019 for the objective coefficients of the ILP described in Section 2.4.",
                    "sid": 38,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "To represent full parsing information as features, there are still several syntactic constraints on a parsing tree in the SRL problem.",
                    "sid": 39,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, on a path of the parsing tree, there can be only one constituent annotated as a non-null argument.",
                    "sid": 40,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, it is difficult to encode this constraint in the argument classification models.",
                    "sid": 41,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, we apply integer linear programming to resolve inconsistencies produced in the argument classification stage.",
                    "sid": 42,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "According to Punyakanok et al. (2004), given a set of constituents, S, and a set of semantic role labels, A, the SRL problem can be formulated as an ILP as follows: Let zia be the indicator variable that represents whether or not an argument, a, is assigned to any Si \u2208 S; and let pia = score(Si = a).",
                    "sid": 43,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The scoring matrix P composed of all pia is calculated by the argument classification models.",
                    "sid": 44,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The goal of this ILP is to find a set of assignments for all zia that maximizes the following function: piazia .",
                    "sid": 45,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Each Si\u2208 S should have one of these argument types, or no type (null).",
                    "sid": 46,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Therefore, we have zia =1.",
                    "sid": 47,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Next, we show how to transform the constraints in the filter function into linear equalities or inequalities, and use them in this ILP.",
                    "sid": 48,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Constraint I: No overlapping or embedding For arguments Sj1 , .",
                    "sid": 49,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": ".",
                    "sid": 50,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": ".",
                    "sid": 51,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": ", Sjk on the same path in a full parsing tree, only one argument can be assigned to an argument type.",
                    "sid": 52,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Thus, at least k \u2212 1 arguments will be null, which is represented by \u03c6 in the following linear equality: Constraint II: No duplicate argument classes Within the same sentence, A0-A5 cannot appear more than once.",
                    "sid": 53,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The inequality for A0 is therefore:",
                    "sid": 54,
                    "ssid": 22,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "constraint iii: r-xxx arguments",
            "number": "4",
            "sents": [
                {
                    "text": "The linear inequalities that represent A0 and its reference type R-A0 are: The continued argument XXX has to occur before C-XXX.",
                    "sid": 55,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The linear inequalities for A0 are: For each verb, we look up its allowed roles.",
                    "sid": 56,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This constraint is represented by summing all the corresponding indicator variables to 0.",
                    "sid": 57,
                    "ssid": 3,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "3 experiment results",
            "number": "5",
            "sents": [
                {
                    "text": "The data, which is part of the PropBank corpus, consists of sections from the Wall Street Journal part of the Penn Treebank.",
                    "sid": 58,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All experiments were carried out using Section 2 to Section 21 for training, Section 24 for development, and Section 23 for testing.",
                    "sid": 59,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Unlike CoNLL-2004, part of the Brown corpus is also included in the test set.",
                    "sid": 60,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Table 1 shows that our system makes little difference to the development set and Test WSJ.",
                    "sid": 61,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, due to the intrinsic difference between the WSJ and Brown corpora, our system performs better on Test WSJ than on Test Brown.",
                    "sid": 62,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "From Table 2, we can see that the model with full parsing features outperforms the model without the features in all three performance matrices.",
                    "sid": 63,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "After applying ILP, the performance is improved further.",
                    "sid": 64,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also observe that SVM slightly outperforms ME.",
                    "sid": 65,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "However, the hybrid argument classification model achieves the best results in all three metrics.",
                    "sid": 66,
                    "ssid": 9,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "4 conclusion",
            "number": "6",
            "sents": [
                {
                    "text": "In this paper, we add more full parsing features to argument classification models, and represent full parsing information as constraints in ILPs to resolve labeling inconsistencies.",
                    "sid": 67,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also integrate two argument classification models, ME and SVM, by combining their argument classification results and applying them to the above-mentioned ILPs.",
                    "sid": 68,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The results show full parsing information increases the total F-score by 1.34%.",
                    "sid": 69,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The ensemble of SVM and ME also boosts the F-score by 0.77%.",
                    "sid": 70,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Finally, our system achieves an F-score of 76.53% in the development set and 76.38% in Test WSJ.",
                    "sid": 71,
                    "ssid": 5,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "acknowledgement",
            "number": "7",
            "sents": [
                {
                    "text": "We are indebted to Wen Shong Lin and Prof. Fu Chang for their invaluable advice in data pruning, which greatly speeds up the training of our machine learning models.",
                    "sid": 72,
                    "ssid": 1,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}