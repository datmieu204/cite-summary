{
    "ID": "D07-1122",
    "sections": [
        {
            "text": "abstract",
            "number": 0,
            "sents": [
                {
                    "text": "A Two-Stage Parser for Multilingual Dependency Parsing",
                    "sid": 0,
                    "ssid": null,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We present a two-stage multilingual de pendency parsing system submitted to the Multilingual Track of CoNLL-2007.",
                    "sid": 1,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The parser first identifies dependencies using a deterministic parsing method and then labels those dependencies as a sequence labeling problem.",
                    "sid": 2,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We describe the features used ineach stage.",
                    "sid": 3,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For four languages with different values of ROOT, we design some spe cial features for the ROOT labeler.",
                    "sid": 4,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then we present evaluation results and error analyses focusing on Chinese.",
                    "sid": 5,
                    "ssid": 5,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "introduction",
            "number": "1",
            "sents": [
                {
                    "text": "The CoNLL-2007 shared tasks include two tracks: the Multilingual Track and Domain AdaptationTrack(Nivre et al, 2007).",
                    "sid": 6,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We took part the Multi lingual Track of all ten languages provided by the CoNLL-2007 shared task organizers(Hajic?",
                    "sid": 7,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "et al, 2004; Aduriz et al, 2003; Mart??",
                    "sid": 8,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "et al, 2007; Chen et al, 2003; Bo?hmova?",
                    "sid": 9,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "et al, 2003; Marcus et al, 1993; Johansson and Nugues, 2007; Prokopidis et al., 2005; Csendes et al, 2005; Montemagni et al, 2003; Oflazer et al, 2003) . In this paper, we describe a two-stage parsingsystem consisting of an unlabeled parser and a sequence labeler, which was submitted to the Multilingual Track.",
                    "sid": 10,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "At the first stage, we use the pars ing model proposed by (Nivre, 2003) to assign thearcs between the words.",
                    "sid": 11,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Then we obtain a dependency parsing tree based on the arcs.",
                    "sid": 12,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "At the sec ond stage, we use a SVM-based approach(Kudo and Matsumoto, 2001) to tag the dependency label foreach arc. The labeling is treated as a sequence la beling problem.",
                    "sid": 13,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We design some special features for tagging the labels of ROOT for Arabic, Basque, Czech, and Greek, which have different labels forROOT.",
                    "sid": 14,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The experimental results show that our ap proach can provide higher scores than average.",
                    "sid": 15,
                    "ssid": 15,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "two-stage parsing. ",
            "number": "2",
            "sents": [
                {
                    "text": "2.1 The Unlabeled Parser.",
                    "sid": 16,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The unlabeled parser predicts unlabeled directed de pendencies.",
                    "sid": 17,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This parser is primarily based on theparsing models described by (Nivre, 2003).",
                    "sid": 18,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The algorithm makes a dependency parsing tree in one left to-right pass over the input, and uses a stack to store the processed tokens.",
                    "sid": 19,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The behaviors of the parser are defined by four elementary actions (where TOP is the token on top of the stack and NEXT is the next token in the original input string): ? Left-Arc(LA): Add an arc from NEXT to TOP; pop the stack.",
                    "sid": 20,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Right-Arc(RA): Add an arc from TOP to NEXT; push NEXT onto the stack.",
                    "sid": 21,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Reduce(RE): Pop the stack.",
                    "sid": 22,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Shift(SH): Push NEXT onto the stack.Although (Nivre et al, 2006) used the pseudoprojective approach to process non-projective dependencies, here we only derive projective depen dency tree.",
                    "sid": 23,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use MaltParser(Nivre et al, 2006) 1129 V0.41 to implement the unlabeled parser, and use the SVM model as the classifier.",
                    "sid": 24,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "More specifically, the MaltParser use LIBSVM(Chang and Lin, 2001)with a quadratic kernel and the built-in one-versus all strategy for multi-class classification.",
                    "sid": 25,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.1.1 Features for Parsing The MaltParser is a history-based parsing model, which relies on features of the derivation history to predict the next parser action.",
                    "sid": 26,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We represent thefeatures extracted from the fields of the data repre sentation, including FORM, LEMMA, CPOSTAG, POSTAG, and FEATS.",
                    "sid": 27,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use the features for all languages that are listed as follows: ? The FORM features: the FORM of TOP and NEXT, the FORM of the token immediately before NEXT in original input string, and the FORM of the head of TOP.",
                    "sid": 28,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The LEMMA features: the LEMMA of TOPand NEXT, the LEMMA of the token immedi ately before NEXT in original input string, and the LEMMA of the head of TOP.",
                    "sid": 29,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The CPOS features: the CPOSTAG of TOP and NEXT, and the CPOSTAG of next left token of the head of TOP.",
                    "sid": 30,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The POS features: the POSTAG of TOP andNEXT, the POSTAG of next three tokens after NEXT, the POSTAG of the token immedi ately before NEXT in original input string, the POSTAG of the token immediately below TOP,and the POSTAG of the token immediately af ter rightmost dependent of TOP.",
                    "sid": 31,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The FEATS features: the FEATS of TOP and NEXT.",
                    "sid": 32,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "But note that the fields LEMMA and FEATS are not available for all languages.",
                    "sid": 33,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.2 The Sequence Labeler.",
                    "sid": 34,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.2.1 The Sequence Problem We denote by x = x 1 , ..., xn a sentence with n words and by y a corresponding dependency tree.",
                    "sid": 35,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "A dependency tree is represented from ROOT to leaves 1The tool is available at http://w3.msi.vxu.se/?nivre/research/MaltParser.html with a set of ordered pairs (i, j) ? y in which xj is a dependent and xi is the head.",
                    "sid": 36,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We have produced the dependency tree y at the first stage.",
                    "sid": 37,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In this stage, we assign a label l (i,j) to each pair.",
                    "sid": 38,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "As described in (McDonald et al, 2006), we treat the labeling of dependencies as a sequence labeling problem.",
                    "sid": 39,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Suppose that we consider a head xi withdependents xj1, ..., xjM . We then consider the la bels of (i, j1), ..., (i, jM) as a sequence.",
                    "sid": 40,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We use the model to find the solution: lmax = arg max l s(l, i, y, x) (1)And we consider a first-order Markov chain of la bels.We used the package YamCha (V0.33)2 to imple ment the SVM model for labeling.",
                    "sid": 41,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "YamCha is apowerful tool for sequence labeling(Kudo and Mat sumoto, 2001).",
                    "sid": 42,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.2.2 Features for LabelingAfter the first stage, we know the unlabeled de pendency parsing tree for the input sentence.",
                    "sid": 43,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "This information forms the basis for part of the features of the second stage.",
                    "sid": 44,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the sequence labeler, we define the individual features, the pair features, the verb features, the neighbor features, and the position features.",
                    "sid": 45,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "All the features are listed as follows: ? The individual features: the FORM, the LEMMA, the CPOSTAG, the POSTAG, and the FEATS of the parent and child node.?",
                    "sid": 46,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The pair features: the direction of depen dency, the combination of lemmata of the parent and child node, the combination of parent?s LEMMA and child?s CPOSTAG, the combination of parent?s CPOSTAG and child?s LEMMA, and the combination of FEATS of parent and child.",
                    "sid": 47,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The verb features: whether the parent or child is the first or last verb in the sentence.",
                    "sid": 48,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The neighbor features: the combination of CPOSTAG and LEMMA of the left and right neighbors of the parent and child, number of children, CPOSTAG sequence of children.",
                    "sid": 49,
                    "ssid": 34,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2YamCha is available at http://chasen.org/?taku/software/yamcha/ 1130 ? The position features: whether the child is the first or last word in the sentence and whetherthe child is the first word of left or right of par ent.",
                    "sid": 50,
                    "ssid": 35,
                    "kind_of_tag": "s"
                },
                {
                    "text": "2.2.3 Features for the Root Labeler Because there are four languages have different labels for root, we define the features for the root labeler.",
                    "sid": 51,
                    "ssid": 36,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The features are listed as follows: ? The individual features: the FORM, the LEMMA, the CPOSTAG, the POSTAG, and the FEATS of the parent and child node.",
                    "sid": 52,
                    "ssid": 37,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The verb features: whether the child is the first or last verb in the sentence.",
                    "sid": 53,
                    "ssid": 38,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The neighbor features: the combination of CPOSTAG and LEMMA of the left and right neighbors of the parent and child, number of children, CPOSTAG sequence of children.",
                    "sid": 54,
                    "ssid": 39,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The position features: whether the child is the first or last word in the sentence and whetherthe child is the first word of left or right of par ent.",
                    "sid": 55,
                    "ssid": 40,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "evaluation results. ",
            "number": "3",
            "sents": [
                {
                    "text": "We evaluated our system in the Multilingual Track for all languages.",
                    "sid": 56,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For the unlabeled parser, we chosethe parameters for the MaltParser based on perfor mance from a held-out section of the training data.",
                    "sid": 57,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We also chose the parameters for Yamcha based on performance from training data.Our official results are shown at Table 1.",
                    "sid": 58,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Performance is measured by labeled accuracy and unlabeled accuracy.",
                    "sid": 59,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "These results showed that our two stage system can achieve good performance.",
                    "sid": 60,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For all languages, our system provided better results than average performance of all the systems(Nivre et al, 2007).",
                    "sid": 61,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Compared with top 3 scores, our system provided slightly worse performance.",
                    "sid": 62,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The reasonsmay be that we just used projective parsing algorithms while all languages except Chinese have non projective structure.",
                    "sid": 63,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Another reason was that we did not tune good parameters for the system due to lack of time.",
                    "sid": 64,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Data Set LA UA Arabic 74.65 83.49 Basque 72.39 78.63 Catalan 86.66 90.87 Chinese 81.24 85.91 Czech 73.69 80.14 English 83.81 84.91 Greek 74.42 81.16 Hungarian 75.34 79.25 Italian 82.04 85.91 Turkish 76.31 81.92 average 78.06 83.22Table 1: The results of proposed approach.",
                    "sid": 65,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "LABELED ATTACHMENT SCORE(LA) and UNLA BELED ATTACHMENT SCORE(UA)",
                    "sid": 66,
                    "ssid": 11,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "general error analysis. ",
            "number": "4",
            "sents": [
                {
                    "text": "4.1 Chinese.",
                    "sid": 67,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For Chinese, the system achieved 81.24% on labeled accuracy and 85.91% on unlabeled accuracy.",
                    "sid": 68,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Wealso ran the MaltParser to provide the labels.",
                    "sid": 69,
                    "ssid": 3,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Besides the same features, we added the DEPREL fea tures: the dependency type of TOP, the dependency type of the token leftmost of TOP, the dependencytype of the token rightmost of TOP, and the de pendency type of the token leftmost of NEXT.",
                    "sid": 70,
                    "ssid": 4,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The labeled accuracy of MaltParser was 80.84%, 0.4% lower than our system.Some conjunctions, prepositions, and DE3 attached to their head words with much lower ac curacy: 74% for DE, 76% for conjunctions, and 71% for prepositions.",
                    "sid": 71,
                    "ssid": 5,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the test data, these words formed 19.7%.",
                    "sid": 72,
                    "ssid": 6,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For Chinese parsing, coordinationand preposition phrase attachment were hard prob lems.",
                    "sid": 73,
                    "ssid": 7,
                    "kind_of_tag": "s"
                },
                {
                    "text": "(Chen et al, 2006) defined the special features for coordinations for chunking.",
                    "sid": 74,
                    "ssid": 8,
                    "kind_of_tag": "s"
                },
                {
                    "text": "In the future, we plan to define some special features for these words.",
                    "sid": 75,
                    "ssid": 9,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Now we focused words where most of the errors occur as Table 2 shows.",
                    "sid": 76,
                    "ssid": 10,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For ??/DE?, there was 32.4% error rate of 383 occurrences.",
                    "sid": 77,
                    "ssid": 11,
                    "kind_of_tag": "s"
                },
                {
                    "text": "And most ofthem were assigned incorrect labels between ?property?",
                    "sid": 78,
                    "ssid": 12,
                    "kind_of_tag": "s"
                },
                {
                    "text": "and ?predication?: 45 times for ?property?",
                    "sid": 79,
                    "ssid": 13,
                    "kind_of_tag": "s"
                },
                {
                    "text": "instead of ?predication?",
                    "sid": 80,
                    "ssid": 14,
                    "kind_of_tag": "s"
                },
                {
                    "text": "and 20 times for ?predica tion?",
                    "sid": 81,
                    "ssid": 15,
                    "kind_of_tag": "s"
                },
                {
                    "text": "instead of ?property?.",
                    "sid": 82,
                    "ssid": 16,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For examples, ??/DE?",
                    "sid": 83,
                    "ssid": 17,
                    "kind_of_tag": "s"
                },
                {
                    "text": "3including ??/?/?/??.",
                    "sid": 84,
                    "ssid": 18,
                    "kind_of_tag": "s"
                },
                {
                    "text": "1131 num any head dep both ?/ DE 383 124 35 116 27 a/ C 117 38 36 37 35 ?/ P 67 20 6 19 5 ??/ N 31 10 8 4 2 ?/ V 72 8 8 8 8 Table 2: The words where most of errors occur in Chinese data.",
                    "sid": 85,
                    "ssid": 19,
                    "kind_of_tag": "s"
                },
                {
                    "text": "in ???/?/??/??(popular TV channel)?",
                    "sid": 86,
                    "ssid": 20,
                    "kind_of_tag": "s"
                },
                {
                    "text": "was to be tagged as ?property?",
                    "sid": 87,
                    "ssid": 21,
                    "kind_of_tag": "s"
                },
                {
                    "text": "instead of ?predication?, while ??/DE?",
                    "sid": 88,
                    "ssid": 22,
                    "kind_of_tag": "s"
                },
                {
                    "text": "in ????/?/??(volunteer of museum)?",
                    "sid": 89,
                    "ssid": 23,
                    "kind_of_tag": "s"
                },
                {
                    "text": "was to be tagged as ?predication?",
                    "sid": 90,
                    "ssid": 24,
                    "kind_of_tag": "s"
                },
                {
                    "text": "insteadof ?property?.",
                    "sid": 91,
                    "ssid": 25,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It was very hard to tell the labels be tween the words around ???.",
                    "sid": 92,
                    "ssid": 26,
                    "kind_of_tag": "s"
                },
                {
                    "text": "Humans can make the distinction between property and predication for ???, because we have background knowledge of the words.",
                    "sid": 93,
                    "ssid": 27,
                    "kind_of_tag": "s"
                },
                {
                    "text": "So if we can incorporate the additional knowledge for the system, the system may assign the correct label.",
                    "sid": 94,
                    "ssid": 28,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For ?a/C?, it was hard to assign the head, 36 wrong head of all 38 errors.",
                    "sid": 95,
                    "ssid": 29,
                    "kind_of_tag": "s"
                },
                {
                    "text": "It often appeared at coordination expressions.",
                    "sid": 96,
                    "ssid": 30,
                    "kind_of_tag": "s"
                },
                {
                    "text": "For example, the head of ?a? at ??/?/?/?/a/?/?/?/??/(Besides extreme cool and too amazing)?",
                    "sid": 97,
                    "ssid": 31,
                    "kind_of_tag": "s"
                },
                {
                    "text": "was ????, and the head of ?a? at ????/??/?/??/a/?/?",
                    "sid": 98,
                    "ssid": 32,
                    "kind_of_tag": "s"
                },
                {
                    "text": "?/?/??(Give the visitors solid and methodical knowledge)?",
                    "sid": 99,
                    "ssid": 33,
                    "kind_of_tag": "s"
                },
                {
                    "text": "was ????.",
                    "sid": 100,
                    "ssid": 34,
                    "kind_of_tag": "s"
                }
            ]
        },
        {
            "text": "conclusion. ",
            "number": "5",
            "sents": [
                {
                    "text": "In this paper, we presented our two-stage depen dency parsing system submitted to the Multilingual Track of CoNLL-2007 shared task.",
                    "sid": 101,
                    "ssid": 1,
                    "kind_of_tag": "s"
                },
                {
                    "text": "We used Nivre?smethod to produce the dependency arcs and the se quence labeler to produce the dependency labels.",
                    "sid": 102,
                    "ssid": 2,
                    "kind_of_tag": "s"
                },
                {
                    "text": "The experimental results showed that our system can provide good performance for all languages.",
                    "sid": 103,
                    "ssid": 3,
                    "kind_of_tag": "s"
                }
            ]
        }
    ]
}